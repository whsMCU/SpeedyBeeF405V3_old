
SpeedyBeeF405V3_CUBE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800c32c  0800c32c  0001c32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c394  0800c394  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c394  0800c394  0001c394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c39c  0800c39c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c39c  0800c39c  0001c39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3a0  0800c3a0  0001c3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800c3a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          0000179c  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001898  20001898  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e60e  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000429b  00000000  00000000  0003e73a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018d0  00000000  00000000  000429d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001720  00000000  00000000  000442a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023df6  00000000  00000000  000459c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000208a9  00000000  00000000  000697be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c85d6  00000000  00000000  0008a067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015263d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067f8  00000000  00000000  00152690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c314 	.word	0x0800c314

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	0800c314 	.word	0x0800c314

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	4b23      	ldr	r3, [pc, #140]	; (8000564 <MX_DMA_Init+0x98>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	4a22      	ldr	r2, [pc, #136]	; (8000564 <MX_DMA_Init+0x98>)
 80004dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e0:	6313      	str	r3, [r2, #48]	; 0x30
 80004e2:	4b20      	ldr	r3, [pc, #128]	; (8000564 <MX_DMA_Init+0x98>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	603b      	str	r3, [r7, #0]
 80004f2:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <MX_DMA_Init+0x98>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <MX_DMA_Init+0x98>)
 80004f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b19      	ldr	r3, [pc, #100]	; (8000564 <MX_DMA_Init+0x98>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	2100      	movs	r1, #0
 800050e:	200e      	movs	r0, #14
 8000510:	f000 ffdf 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000514:	200e      	movs	r0, #14
 8000516:	f000 fff8 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	2100      	movs	r1, #0
 800051e:	200f      	movs	r0, #15
 8000520:	f000 ffd7 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000524:	200f      	movs	r0, #15
 8000526:	f000 fff0 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	2010      	movs	r0, #16
 8000530:	f000 ffcf 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000534:	2010      	movs	r0, #16
 8000536:	f000 ffe8 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	203a      	movs	r0, #58	; 0x3a
 8000540:	f000 ffc7 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000544:	203a      	movs	r0, #58	; 0x3a
 8000546:	f000 ffe0 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	203b      	movs	r0, #59	; 0x3b
 8000550:	f000 ffbf 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000554:	203b      	movs	r0, #59	; 0x3b
 8000556:	f000 ffd8 	bl	800150a <HAL_NVIC_EnableIRQ>

}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40023800 	.word	0x40023800

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	4b3b      	ldr	r3, [pc, #236]	; (8000670 <MX_GPIO_Init+0x108>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a3a      	ldr	r2, [pc, #232]	; (8000670 <MX_GPIO_Init+0x108>)
 8000588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b38      	ldr	r3, [pc, #224]	; (8000670 <MX_GPIO_Init+0x108>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	4b34      	ldr	r3, [pc, #208]	; (8000670 <MX_GPIO_Init+0x108>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a33      	ldr	r2, [pc, #204]	; (8000670 <MX_GPIO_Init+0x108>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b31      	ldr	r3, [pc, #196]	; (8000670 <MX_GPIO_Init+0x108>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <MX_GPIO_Init+0x108>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a2c      	ldr	r2, [pc, #176]	; (8000670 <MX_GPIO_Init+0x108>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <MX_GPIO_Init+0x108>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <MX_GPIO_Init+0x108>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a25      	ldr	r2, [pc, #148]	; (8000670 <MX_GPIO_Init+0x108>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b23      	ldr	r3, [pc, #140]	; (8000670 <MX_GPIO_Init+0x108>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 7184 	mov.w	r1, #264	; 0x108
 80005f4:	481f      	ldr	r0, [pc, #124]	; (8000674 <MX_GPIO_Init+0x10c>)
 80005f6:	f001 fcc9 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2110      	movs	r1, #16
 80005fe:	481e      	ldr	r0, [pc, #120]	; (8000678 <MX_GPIO_Init+0x110>)
 8000600:	f001 fcc4 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC3 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 8000604:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	4815      	ldr	r0, [pc, #84]	; (8000674 <MX_GPIO_Init+0x10c>)
 800061e:	f001 fb19 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000622:	2310      	movs	r3, #16
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800062e:	2303      	movs	r3, #3
 8000630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	480f      	ldr	r0, [pc, #60]	; (8000678 <MX_GPIO_Init+0x110>)
 800063a:	f001 fb0b 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800063e:	2310      	movs	r3, #16
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000642:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4808      	ldr	r0, [pc, #32]	; (8000674 <MX_GPIO_Init+0x10c>)
 8000654:	f001 fafe 	bl	8001c54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2100      	movs	r1, #0
 800065c:	200a      	movs	r0, #10
 800065e:	f000 ff38 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000662:	200a      	movs	r0, #10
 8000664:	f000 ff51 	bl	800150a <HAL_NVIC_EnableIRQ>

}
 8000668:	bf00      	nop
 800066a:	3728      	adds	r7, #40	; 0x28
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40020800 	.word	0x40020800
 8000678:	40020000 	.word	0x40020000

0800067c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_I2C2_Init+0x50>)
 8000682:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <MX_I2C2_Init+0x54>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_I2C2_Init+0x50>)
 8000688:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <MX_I2C2_Init+0x58>)
 800068a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_I2C2_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_I2C2_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_I2C2_Init+0x50>)
 800069a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800069e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <MX_I2C2_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_I2C2_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <MX_I2C2_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_I2C2_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_I2C2_Init+0x50>)
 80006ba:	f001 fca5 	bl	8002008 <HAL_I2C_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006c4:	f000 f916 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000118 	.word	0x20000118
 80006d0:	40005800 	.word	0x40005800
 80006d4:	00061a80 	.word	0x00061a80

080006d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a21      	ldr	r2, [pc, #132]	; (800077c <HAL_I2C_MspInit+0xa4>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d13c      	bne.n	8000774 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <HAL_I2C_MspInit+0xa8>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a1f      	ldr	r2, [pc, #124]	; (8000780 <HAL_I2C_MspInit+0xa8>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <HAL_I2C_MspInit+0xa8>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000716:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800071a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800071c:	2312      	movs	r3, #18
 800071e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000720:	2301      	movs	r3, #1
 8000722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000728:	2304      	movs	r3, #4
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	4814      	ldr	r0, [pc, #80]	; (8000784 <HAL_I2C_MspInit+0xac>)
 8000734:	f001 fa8e 	bl	8001c54 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <HAL_I2C_MspInit+0xa8>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <HAL_I2C_MspInit+0xa8>)
 8000742:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <HAL_I2C_MspInit+0xa8>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2100      	movs	r1, #0
 8000758:	2021      	movs	r0, #33	; 0x21
 800075a:	f000 feba 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800075e:	2021      	movs	r0, #33	; 0x21
 8000760:	f000 fed3 	bl	800150a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	2022      	movs	r0, #34	; 0x22
 800076a:	f000 feb2 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800076e:	2022      	movs	r0, #34	; 0x22
 8000770:	f000 fecb 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000774:	bf00      	nop
 8000776:	3728      	adds	r7, #40	; 0x28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40005800 	.word	0x40005800
 8000780:	40023800 	.word	0x40023800
 8000784:	40020400 	.word	0x40020400

08000788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078e:	f000 fd2f 	bl	80011f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000792:	f000 f845 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000796:	f7ff fee7 	bl	8000568 <MX_GPIO_Init>
  MX_DMA_Init();
 800079a:	f7ff fe97 	bl	80004cc <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800079e:	f00b f899 	bl	800b8d4 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80007a2:	f000 fb59 	bl	8000e58 <MX_TIM4_Init>
  MX_I2C2_Init();
 80007a6:	f7ff ff69 	bl	800067c <MX_I2C2_Init>
  MX_SPI1_Init();
 80007aa:	f000 f8a9 	bl	8000900 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007ae:	f000 f8dd 	bl	800096c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80007b2:	f000 fc47 	bl	8001044 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2110      	movs	r1, #16
 80007ba:	4817      	ldr	r0, [pc, #92]	; (8000818 <main+0x90>)
 80007bc:	f001 fbe6 	bl	8001f8c <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 80007c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c4:	f000 fd86 	bl	80012d4 <HAL_Delay>

  uint8_t buffer[2] = {0, 0};
 80007c8:	2300      	movs	r3, #0
 80007ca:	80bb      	strh	r3, [r7, #4]

  HAL_StatusTypeDef status = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	71fb      	strb	r3, [r7, #7]

  uint8_t addr = BMI270_REG_CHIP_ID | 0x80;
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	70fb      	strb	r3, [r7, #3]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2110      	movs	r1, #16
 80007d8:	480f      	ldr	r0, [pc, #60]	; (8000818 <main+0x90>)
 80007da:	f001 fbd7 	bl	8001f8c <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 80007de:	1cf9      	adds	r1, r7, #3
 80007e0:	2364      	movs	r3, #100	; 0x64
 80007e2:	2201      	movs	r2, #1
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <main+0x94>)
 80007e6:	f005 f9cc 	bl	8005b82 <HAL_SPI_Transmit>
  status = HAL_SPI_Receive(&hspi1, buffer, 2, 100);
 80007ea:	1d39      	adds	r1, r7, #4
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	2202      	movs	r2, #2
 80007f0:	480a      	ldr	r0, [pc, #40]	; (800081c <main+0x94>)
 80007f2:	f005 fb02 	bl	8005dfa <HAL_SPI_Receive>
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2110      	movs	r1, #16
 80007fe:	4806      	ldr	r0, [pc, #24]	; (8000818 <main+0x90>)
 8000800:	f001 fbc4 	bl	8001f8c <HAL_GPIO_WritePin>

  if(status == 0)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d104      	bne.n	8000814 <main+0x8c>
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	2110      	movs	r1, #16
 800080e:	4802      	ldr	r0, [pc, #8]	; (8000818 <main+0x90>)
 8000810:	f001 fbbc 	bl	8001f8c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000814:	e7fe      	b.n	8000814 <main+0x8c>
 8000816:	bf00      	nop
 8000818:	40020000 	.word	0x40020000
 800081c:	2000016c 	.word	0x2000016c

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	2230      	movs	r2, #48	; 0x30
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f00b fd68 	bl	800c304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b28      	ldr	r3, [pc, #160]	; (80008ec <SystemClock_Config+0xcc>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	4a27      	ldr	r2, [pc, #156]	; (80008ec <SystemClock_Config+0xcc>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	; 0x40
 8000854:	4b25      	ldr	r3, [pc, #148]	; (80008ec <SystemClock_Config+0xcc>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <SystemClock_Config+0xd0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <SystemClock_Config+0xd0>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <SystemClock_Config+0xd0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000894:	23a8      	movs	r3, #168	; 0xa8
 8000896:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800089c:	2307      	movs	r3, #7
 800089e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	4618      	mov	r0, r3
 80008a6:	f004 fc4b 	bl	8005140 <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b0:	f000 f820 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b4:	230f      	movs	r3, #15
 80008b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b8:	2302      	movs	r3, #2
 80008ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	2105      	movs	r1, #5
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 feac 	bl	8005630 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008de:	f000 f809 	bl	80008f4 <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3750      	adds	r7, #80	; 0x50
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_tx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_SPI1_Init+0x64>)
 8000906:	4a18      	ldr	r2, [pc, #96]	; (8000968 <MX_SPI1_Init+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_SPI1_Init+0x64>)
 800090c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000910:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_SPI1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_SPI1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_SPI1_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_SPI1_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_SPI1_Init+0x64>)
 800092c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000930:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_SPI1_Init+0x64>)
 8000934:	2210      	movs	r2, #16
 8000936:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_SPI1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_SPI1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_SPI1_Init+0x64>)
 800094c:	220a      	movs	r2, #10
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_SPI1_Init+0x64>)
 8000952:	f005 f88d 	bl	8005a70 <HAL_SPI_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800095c:	f7ff ffca 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000016c 	.word	0x2000016c
 8000968:	40013000 	.word	0x40013000

0800096c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000972:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <MX_SPI2_Init+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800097c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_SPI2_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_SPI2_Init+0x64>)
 8000998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800099c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009b8:	220a      	movs	r2, #10
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_SPI2_Init+0x64>)
 80009be:	f005 f857 	bl	8005a70 <HAL_SPI_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009c8:	f7ff ff94 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200001c4 	.word	0x200001c4
 80009d4:	40003800 	.word	0x40003800

080009d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	; 0x30
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a9e      	ldr	r2, [pc, #632]	; (8000c70 <HAL_SPI_MspInit+0x298>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	f040 80a1 	bne.w	8000b3e <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
 8000a00:	4b9c      	ldr	r3, [pc, #624]	; (8000c74 <HAL_SPI_MspInit+0x29c>)
 8000a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a04:	4a9b      	ldr	r2, [pc, #620]	; (8000c74 <HAL_SPI_MspInit+0x29c>)
 8000a06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a0a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0c:	4b99      	ldr	r3, [pc, #612]	; (8000c74 <HAL_SPI_MspInit+0x29c>)
 8000a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a14:	61bb      	str	r3, [r7, #24]
 8000a16:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	4b95      	ldr	r3, [pc, #596]	; (8000c74 <HAL_SPI_MspInit+0x29c>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	4a94      	ldr	r2, [pc, #592]	; (8000c74 <HAL_SPI_MspInit+0x29c>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	6313      	str	r3, [r2, #48]	; 0x30
 8000a28:	4b92      	ldr	r3, [pc, #584]	; (8000c74 <HAL_SPI_MspInit+0x29c>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a34:	23e0      	movs	r3, #224	; 0xe0
 8000a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a44:	2305      	movs	r3, #5
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	488a      	ldr	r0, [pc, #552]	; (8000c78 <HAL_SPI_MspInit+0x2a0>)
 8000a50:	f001 f900 	bl	8001c54 <HAL_GPIO_Init>


    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a54:	2340      	movs	r3, #64	; 0x40
 8000a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a64:	2305      	movs	r3, #5
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4882      	ldr	r0, [pc, #520]	; (8000c78 <HAL_SPI_MspInit+0x2a0>)
 8000a70:	f001 f8f0 	bl	8001c54 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8000a74:	4b81      	ldr	r3, [pc, #516]	; (8000c7c <HAL_SPI_MspInit+0x2a4>)
 8000a76:	4a82      	ldr	r2, [pc, #520]	; (8000c80 <HAL_SPI_MspInit+0x2a8>)
 8000a78:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000a7a:	4b80      	ldr	r3, [pc, #512]	; (8000c7c <HAL_SPI_MspInit+0x2a4>)
 8000a7c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000a80:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a82:	4b7e      	ldr	r3, [pc, #504]	; (8000c7c <HAL_SPI_MspInit+0x2a4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a88:	4b7c      	ldr	r3, [pc, #496]	; (8000c7c <HAL_SPI_MspInit+0x2a4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a8e:	4b7b      	ldr	r3, [pc, #492]	; (8000c7c <HAL_SPI_MspInit+0x2a4>)
 8000a90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a94:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a96:	4b79      	ldr	r3, [pc, #484]	; (8000c7c <HAL_SPI_MspInit+0x2a4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a9c:	4b77      	ldr	r3, [pc, #476]	; (8000c7c <HAL_SPI_MspInit+0x2a4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000aa2:	4b76      	ldr	r3, [pc, #472]	; (8000c7c <HAL_SPI_MspInit+0x2a4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000aa8:	4b74      	ldr	r3, [pc, #464]	; (8000c7c <HAL_SPI_MspInit+0x2a4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aae:	4b73      	ldr	r3, [pc, #460]	; (8000c7c <HAL_SPI_MspInit+0x2a4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000ab4:	4871      	ldr	r0, [pc, #452]	; (8000c7c <HAL_SPI_MspInit+0x2a4>)
 8000ab6:	f000 fd43 	bl	8001540 <HAL_DMA_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_SPI_MspInit+0xec>
    {
      Error_Handler();
 8000ac0:	f7ff ff18 	bl	80008f4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a6d      	ldr	r2, [pc, #436]	; (8000c7c <HAL_SPI_MspInit+0x2a4>)
 8000ac8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000aca:	4a6c      	ldr	r2, [pc, #432]	; (8000c7c <HAL_SPI_MspInit+0x2a4>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000ad0:	4b6c      	ldr	r3, [pc, #432]	; (8000c84 <HAL_SPI_MspInit+0x2ac>)
 8000ad2:	4a6d      	ldr	r2, [pc, #436]	; (8000c88 <HAL_SPI_MspInit+0x2b0>)
 8000ad4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000ad6:	4b6b      	ldr	r3, [pc, #428]	; (8000c84 <HAL_SPI_MspInit+0x2ac>)
 8000ad8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000adc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ade:	4b69      	ldr	r3, [pc, #420]	; (8000c84 <HAL_SPI_MspInit+0x2ac>)
 8000ae0:	2240      	movs	r2, #64	; 0x40
 8000ae2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae4:	4b67      	ldr	r3, [pc, #412]	; (8000c84 <HAL_SPI_MspInit+0x2ac>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000aea:	4b66      	ldr	r3, [pc, #408]	; (8000c84 <HAL_SPI_MspInit+0x2ac>)
 8000aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000af0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000af2:	4b64      	ldr	r3, [pc, #400]	; (8000c84 <HAL_SPI_MspInit+0x2ac>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000af8:	4b62      	ldr	r3, [pc, #392]	; (8000c84 <HAL_SPI_MspInit+0x2ac>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000afe:	4b61      	ldr	r3, [pc, #388]	; (8000c84 <HAL_SPI_MspInit+0x2ac>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b04:	4b5f      	ldr	r3, [pc, #380]	; (8000c84 <HAL_SPI_MspInit+0x2ac>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b0a:	4b5e      	ldr	r3, [pc, #376]	; (8000c84 <HAL_SPI_MspInit+0x2ac>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000b10:	485c      	ldr	r0, [pc, #368]	; (8000c84 <HAL_SPI_MspInit+0x2ac>)
 8000b12:	f000 fd15 	bl	8001540 <HAL_DMA_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 8000b1c:	f7ff feea 	bl	80008f4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a58      	ldr	r2, [pc, #352]	; (8000c84 <HAL_SPI_MspInit+0x2ac>)
 8000b24:	649a      	str	r2, [r3, #72]	; 0x48
 8000b26:	4a57      	ldr	r2, [pc, #348]	; (8000c84 <HAL_SPI_MspInit+0x2ac>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2023      	movs	r0, #35	; 0x23
 8000b32:	f000 fcce 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b36:	2023      	movs	r0, #35	; 0x23
 8000b38:	f000 fce7 	bl	800150a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000b3c:	e094      	b.n	8000c68 <HAL_SPI_MspInit+0x290>
  else if(spiHandle->Instance==SPI2)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a52      	ldr	r2, [pc, #328]	; (8000c8c <HAL_SPI_MspInit+0x2b4>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	f040 808f 	bne.w	8000c68 <HAL_SPI_MspInit+0x290>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b49      	ldr	r3, [pc, #292]	; (8000c74 <HAL_SPI_MspInit+0x29c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a48      	ldr	r2, [pc, #288]	; (8000c74 <HAL_SPI_MspInit+0x29c>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b46      	ldr	r3, [pc, #280]	; (8000c74 <HAL_SPI_MspInit+0x29c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b42      	ldr	r3, [pc, #264]	; (8000c74 <HAL_SPI_MspInit+0x29c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a41      	ldr	r2, [pc, #260]	; (8000c74 <HAL_SPI_MspInit+0x29c>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b3f      	ldr	r3, [pc, #252]	; (8000c74 <HAL_SPI_MspInit+0x29c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b82:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b94:	2305      	movs	r3, #5
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	483c      	ldr	r0, [pc, #240]	; (8000c90 <HAL_SPI_MspInit+0x2b8>)
 8000ba0:	f001 f858 	bl	8001c54 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000ba4:	4b3b      	ldr	r3, [pc, #236]	; (8000c94 <HAL_SPI_MspInit+0x2bc>)
 8000ba6:	4a3c      	ldr	r2, [pc, #240]	; (8000c98 <HAL_SPI_MspInit+0x2c0>)
 8000ba8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000baa:	4b3a      	ldr	r3, [pc, #232]	; (8000c94 <HAL_SPI_MspInit+0x2bc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bb0:	4b38      	ldr	r3, [pc, #224]	; (8000c94 <HAL_SPI_MspInit+0x2bc>)
 8000bb2:	2240      	movs	r2, #64	; 0x40
 8000bb4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb6:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <HAL_SPI_MspInit+0x2bc>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bbc:	4b35      	ldr	r3, [pc, #212]	; (8000c94 <HAL_SPI_MspInit+0x2bc>)
 8000bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bc2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bc4:	4b33      	ldr	r3, [pc, #204]	; (8000c94 <HAL_SPI_MspInit+0x2bc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bca:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <HAL_SPI_MspInit+0x2bc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000bd0:	4b30      	ldr	r3, [pc, #192]	; (8000c94 <HAL_SPI_MspInit+0x2bc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bd6:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <HAL_SPI_MspInit+0x2bc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <HAL_SPI_MspInit+0x2bc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000be2:	482c      	ldr	r0, [pc, #176]	; (8000c94 <HAL_SPI_MspInit+0x2bc>)
 8000be4:	f000 fcac 	bl	8001540 <HAL_DMA_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_SPI_MspInit+0x21a>
      Error_Handler();
 8000bee:	f7ff fe81 	bl	80008f4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a27      	ldr	r2, [pc, #156]	; (8000c94 <HAL_SPI_MspInit+0x2bc>)
 8000bf6:	649a      	str	r2, [r3, #72]	; 0x48
 8000bf8:	4a26      	ldr	r2, [pc, #152]	; (8000c94 <HAL_SPI_MspInit+0x2bc>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000bfe:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <HAL_SPI_MspInit+0x2c4>)
 8000c00:	4a27      	ldr	r2, [pc, #156]	; (8000ca0 <HAL_SPI_MspInit+0x2c8>)
 8000c02:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000c04:	4b25      	ldr	r3, [pc, #148]	; (8000c9c <HAL_SPI_MspInit+0x2c4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c0a:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <HAL_SPI_MspInit+0x2c4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c10:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <HAL_SPI_MspInit+0x2c4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <HAL_SPI_MspInit+0x2c4>)
 8000c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c1c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <HAL_SPI_MspInit+0x2c4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <HAL_SPI_MspInit+0x2c4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <HAL_SPI_MspInit+0x2c4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <HAL_SPI_MspInit+0x2c4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_SPI_MspInit+0x2c4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000c3c:	4817      	ldr	r0, [pc, #92]	; (8000c9c <HAL_SPI_MspInit+0x2c4>)
 8000c3e:	f000 fc7f 	bl	8001540 <HAL_DMA_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <HAL_SPI_MspInit+0x274>
      Error_Handler();
 8000c48:	f7ff fe54 	bl	80008f4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <HAL_SPI_MspInit+0x2c4>)
 8000c50:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <HAL_SPI_MspInit+0x2c4>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2024      	movs	r0, #36	; 0x24
 8000c5e:	f000 fc38 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000c62:	2024      	movs	r0, #36	; 0x24
 8000c64:	f000 fc51 	bl	800150a <HAL_NVIC_EnableIRQ>
}
 8000c68:	bf00      	nop
 8000c6a:	3730      	adds	r7, #48	; 0x30
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40013000 	.word	0x40013000
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	2000021c 	.word	0x2000021c
 8000c80:	40026440 	.word	0x40026440
 8000c84:	2000027c 	.word	0x2000027c
 8000c88:	40026458 	.word	0x40026458
 8000c8c:	40003800 	.word	0x40003800
 8000c90:	40020400 	.word	0x40020400
 8000c94:	200002dc 	.word	0x200002dc
 8000c98:	40026070 	.word	0x40026070
 8000c9c:	2000033c 	.word	0x2000033c
 8000ca0:	40026058 	.word	0x40026058

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_MspInit+0x4c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d40:	f000 faa8 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000d4c:	2010      	movs	r0, #16
 8000d4e:	f001 f937 	bl	8001fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <DMA1_Stream3_IRQHandler+0x10>)
 8000d5e:	f000 fd2f 	bl	80017c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2000033c 	.word	0x2000033c

08000d6c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <DMA1_Stream4_IRQHandler+0x10>)
 8000d72:	f000 fd25 	bl	80017c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200002dc 	.word	0x200002dc

08000d80 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <DMA1_Stream5_IRQHandler+0x10>)
 8000d86:	f000 fd1b 	bl	80017c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000428 	.word	0x20000428

08000d94 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <I2C2_EV_IRQHandler+0x10>)
 8000d9a:	f001 fa79 	bl	8002290 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000118 	.word	0x20000118

08000da8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <I2C2_ER_IRQHandler+0x10>)
 8000dae:	f001 fbe0 	bl	8002572 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000118 	.word	0x20000118

08000dbc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <SPI1_IRQHandler+0x10>)
 8000dc2:	f005 facd 	bl	8006360 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000016c 	.word	0x2000016c

08000dd0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <SPI2_IRQHandler+0x10>)
 8000dd6:	f005 fac3 	bl	8006360 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200001c4 	.word	0x200001c4

08000de4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <USART2_IRQHandler+0x10>)
 8000dea:	f006 fadd 	bl	80073a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200003e4 	.word	0x200003e4

08000df8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <DMA2_Stream2_IRQHandler+0x10>)
 8000dfe:	f000 fcdf 	bl	80017c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2000021c 	.word	0x2000021c

08000e0c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <DMA2_Stream3_IRQHandler+0x10>)
 8000e12:	f000 fcd5 	bl	80017c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000027c 	.word	0x2000027c

08000e20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <OTG_FS_IRQHandler+0x10>)
 8000e26:	f003 f85e 	bl	8003ee6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000116c 	.word	0x2000116c

08000e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <SystemInit+0x20>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <SystemInit+0x20>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08e      	sub	sp, #56	; 0x38
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e78:	463b      	mov	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]
 8000e86:	615a      	str	r2, [r3, #20]
 8000e88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e8a:	4b3e      	ldr	r3, [pc, #248]	; (8000f84 <MX_TIM4_Init+0x12c>)
 8000e8c:	4a3e      	ldr	r2, [pc, #248]	; (8000f88 <MX_TIM4_Init+0x130>)
 8000e8e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e90:	4b3c      	ldr	r3, [pc, #240]	; (8000f84 <MX_TIM4_Init+0x12c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b3b      	ldr	r3, [pc, #236]	; (8000f84 <MX_TIM4_Init+0x12c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e9c:	4b39      	ldr	r3, [pc, #228]	; (8000f84 <MX_TIM4_Init+0x12c>)
 8000e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea4:	4b37      	ldr	r3, [pc, #220]	; (8000f84 <MX_TIM4_Init+0x12c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eaa:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <MX_TIM4_Init+0x12c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000eb0:	4834      	ldr	r0, [pc, #208]	; (8000f84 <MX_TIM4_Init+0x12c>)
 8000eb2:	f005 fca3 	bl	80067fc <HAL_TIM_Base_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000ebc:	f7ff fd1a 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ec0:	4830      	ldr	r0, [pc, #192]	; (8000f84 <MX_TIM4_Init+0x12c>)
 8000ec2:	f005 fcea 	bl	800689a <HAL_TIM_PWM_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000ecc:	f7ff fd12 	bl	80008f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000ed0:	2307      	movs	r3, #7
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4829      	ldr	r0, [pc, #164]	; (8000f84 <MX_TIM4_Init+0x12c>)
 8000ee0:	f005 fdf6 	bl	8006ad0 <HAL_TIM_SlaveConfigSynchro>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000eea:	f7ff fd03 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	4821      	ldr	r0, [pc, #132]	; (8000f84 <MX_TIM4_Init+0x12c>)
 8000efe:	f006 f989 	bl	8007214 <HAL_TIMEx_MasterConfigSynchronization>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000f08:	f7ff fcf4 	bl	80008f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f0c:	2360      	movs	r3, #96	; 0x60
 8000f0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4619      	mov	r1, r3
 8000f22:	4818      	ldr	r0, [pc, #96]	; (8000f84 <MX_TIM4_Init+0x12c>)
 8000f24:	f005 fd12 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000f2e:	f7ff fce1 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	2204      	movs	r2, #4
 8000f36:	4619      	mov	r1, r3
 8000f38:	4812      	ldr	r0, [pc, #72]	; (8000f84 <MX_TIM4_Init+0x12c>)
 8000f3a:	f005 fd07 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8000f44:	f7ff fcd6 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480d      	ldr	r0, [pc, #52]	; (8000f84 <MX_TIM4_Init+0x12c>)
 8000f50:	f005 fcfc 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8000f5a:	f7ff fccb 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	220c      	movs	r2, #12
 8000f62:	4619      	mov	r1, r3
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <MX_TIM4_Init+0x12c>)
 8000f66:	f005 fcf1 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 8000f70:	f7ff fcc0 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <MX_TIM4_Init+0x12c>)
 8000f76:	f000 f82b 	bl	8000fd0 <HAL_TIM_MspPostInit>

}
 8000f7a:	bf00      	nop
 8000f7c:	3738      	adds	r7, #56	; 0x38
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000039c 	.word	0x2000039c
 8000f88:	40000800 	.word	0x40000800

08000f8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d10d      	bne.n	8000fba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_TIM_Base_MspInit+0x40>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <HAL_TIM_Base_MspInit+0x40>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <HAL_TIM_Base_MspInit+0x40>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40000800 	.word	0x40000800
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a12      	ldr	r2, [pc, #72]	; (8001038 <HAL_TIM_MspPostInit+0x68>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d11e      	bne.n	8001030 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_TIM_MspPostInit+0x6c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a10      	ldr	r2, [pc, #64]	; (800103c <HAL_TIM_MspPostInit+0x6c>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_TIM_MspPostInit+0x6c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800100e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001012:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001020:	2302      	movs	r3, #2
 8001022:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4619      	mov	r1, r3
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <HAL_TIM_MspPostInit+0x70>)
 800102c:	f000 fe12 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40000800 	.word	0x40000800
 800103c:	40023800 	.word	0x40023800
 8001040:	40020400 	.word	0x40020400

08001044 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <MX_USART2_UART_Init+0x50>)
 800104c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800107c:	f006 f946 	bl	800730c <HAL_UART_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001086:	f7ff fc35 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200003e4 	.word	0x200003e4
 8001094:	40004400 	.word	0x40004400

08001098 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a34      	ldr	r2, [pc, #208]	; (8001188 <HAL_UART_MspInit+0xf0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d161      	bne.n	800117e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b33      	ldr	r3, [pc, #204]	; (800118c <HAL_UART_MspInit+0xf4>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	4a32      	ldr	r2, [pc, #200]	; (800118c <HAL_UART_MspInit+0xf4>)
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ca:	4b30      	ldr	r3, [pc, #192]	; (800118c <HAL_UART_MspInit+0xf4>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b2c      	ldr	r3, [pc, #176]	; (800118c <HAL_UART_MspInit+0xf4>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a2b      	ldr	r2, [pc, #172]	; (800118c <HAL_UART_MspInit+0xf4>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b29      	ldr	r3, [pc, #164]	; (800118c <HAL_UART_MspInit+0xf4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010f2:	230c      	movs	r3, #12
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001102:	2307      	movs	r3, #7
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4820      	ldr	r0, [pc, #128]	; (8001190 <HAL_UART_MspInit+0xf8>)
 800110e:	f000 fda1 	bl	8001c54 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_UART_MspInit+0xfc>)
 8001114:	4a20      	ldr	r2, [pc, #128]	; (8001198 <HAL_UART_MspInit+0x100>)
 8001116:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <HAL_UART_MspInit+0xfc>)
 800111a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800111e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <HAL_UART_MspInit+0xfc>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001126:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <HAL_UART_MspInit+0xfc>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_UART_MspInit+0xfc>)
 800112e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001132:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_UART_MspInit+0xfc>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <HAL_UART_MspInit+0xfc>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_UART_MspInit+0xfc>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <HAL_UART_MspInit+0xfc>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_UART_MspInit+0xfc>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001152:	4810      	ldr	r0, [pc, #64]	; (8001194 <HAL_UART_MspInit+0xfc>)
 8001154:	f000 f9f4 	bl	8001540 <HAL_DMA_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800115e:	f7ff fbc9 	bl	80008f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <HAL_UART_MspInit+0xfc>)
 8001166:	639a      	str	r2, [r3, #56]	; 0x38
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_UART_MspInit+0xfc>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2026      	movs	r0, #38	; 0x26
 8001174:	f000 f9ad 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001178:	2026      	movs	r0, #38	; 0x26
 800117a:	f000 f9c6 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	; 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40004400 	.word	0x40004400
 800118c:	40023800 	.word	0x40023800
 8001190:	40020000 	.word	0x40020000
 8001194:	20000428 	.word	0x20000428
 8001198:	40026088 	.word	0x40026088

0800119c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800119c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011a2:	490e      	ldr	r1, [pc, #56]	; (80011dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011a4:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011b8:	4c0b      	ldr	r4, [pc, #44]	; (80011e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011c6:	f7ff fe35 	bl	8000e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ca:	f00b f877 	bl	800c2bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ce:	f7ff fadb 	bl	8000788 <main>
  bx  lr    
 80011d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011dc:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80011e0:	0800c3a4 	.word	0x0800c3a4
  ldr r2, =_sbss
 80011e4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80011e8:	20001898 	.word	0x20001898

080011ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC_IRQHandler>
	...

080011f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <HAL_Init+0x40>)
 80011fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <HAL_Init+0x40>)
 8001206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_Init+0x40>)
 8001212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f94f 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121e:	2000      	movs	r0, #0
 8001220:	f000 f808 	bl	8001234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001224:	f7ff fd3e 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023c00 	.word	0x40023c00

08001234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x54>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x58>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f967 	bl	8001526 <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e00e      	b.n	8001280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d80a      	bhi.n	800127e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f000 f92f 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_InitTick+0x5c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000000 	.word	0x20000000
 800128c:	20000008 	.word	0x20000008
 8001290:	20000004 	.word	0x20000004

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000488 	.word	0x20000488

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000488 	.word	0x20000488

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ffee 	bl	80012bc <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_Delay+0x44>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffde 	bl	80012bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000008 	.word	0x20000008

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff8e 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff29 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff3e 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff8e 	bl	8001410 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5d 	bl	80013bc <__NVIC_SetPriority>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff31 	bl	8001380 <__NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffa2 	bl	8001478 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff feb6 	bl	80012bc <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e099      	b.n	8001690 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2202      	movs	r2, #2
 8001560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0201 	bic.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800157c:	e00f      	b.n	800159e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800157e:	f7ff fe9d 	bl	80012bc <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b05      	cmp	r3, #5
 800158a:	d908      	bls.n	800159e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2220      	movs	r2, #32
 8001590:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2203      	movs	r2, #3
 8001596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e078      	b.n	8001690 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1e8      	bne.n	800157e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <HAL_DMA_Init+0x158>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d107      	bne.n	8001608 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	4313      	orrs	r3, r2
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4313      	orrs	r3, r2
 8001606:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f023 0307 	bic.w	r3, r3, #7
 800161e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	4313      	orrs	r3, r2
 8001628:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	2b04      	cmp	r3, #4
 8001630:	d117      	bne.n	8001662 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	4313      	orrs	r3, r2
 800163a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00e      	beq.n	8001662 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 fa89 	bl	8001b5c <DMA_CheckFifoParam>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2240      	movs	r2, #64	; 0x40
 8001654:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800165e:	2301      	movs	r3, #1
 8001660:	e016      	b.n	8001690 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 fa40 	bl	8001af0 <DMA_CalcBaseAndBitshift>
 8001670:	4603      	mov	r3, r0
 8001672:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001678:	223f      	movs	r2, #63	; 0x3f
 800167a:	409a      	lsls	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	f010803f 	.word	0xf010803f

0800169c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016aa:	f7ff fe07 	bl	80012bc <HAL_GetTick>
 80016ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d008      	beq.n	80016ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2280      	movs	r2, #128	; 0x80
 80016c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e052      	b.n	8001774 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0216 	bic.w	r2, r2, #22
 80016dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	695a      	ldr	r2, [r3, #20]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d103      	bne.n	80016fe <HAL_DMA_Abort+0x62>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0208 	bic.w	r2, r2, #8
 800170c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0201 	bic.w	r2, r2, #1
 800171c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800171e:	e013      	b.n	8001748 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001720:	f7ff fdcc 	bl	80012bc <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b05      	cmp	r3, #5
 800172c:	d90c      	bls.n	8001748 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2220      	movs	r2, #32
 8001732:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2203      	movs	r2, #3
 8001738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e015      	b.n	8001774 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1e4      	bne.n	8001720 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175a:	223f      	movs	r2, #63	; 0x3f
 800175c:	409a      	lsls	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d004      	beq.n	800179a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2280      	movs	r2, #128	; 0x80
 8001794:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e00c      	b.n	80017b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2205      	movs	r2, #5
 800179e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0201 	bic.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017cc:	4b8e      	ldr	r3, [pc, #568]	; (8001a08 <HAL_DMA_IRQHandler+0x248>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a8e      	ldr	r2, [pc, #568]	; (8001a0c <HAL_DMA_IRQHandler+0x24c>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	0a9b      	lsrs	r3, r3, #10
 80017d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ea:	2208      	movs	r2, #8
 80017ec:	409a      	lsls	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d01a      	beq.n	800182c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0204 	bic.w	r2, r2, #4
 8001812:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001818:	2208      	movs	r2, #8
 800181a:	409a      	lsls	r2, r3
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001830:	2201      	movs	r2, #1
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d012      	beq.n	8001862 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00b      	beq.n	8001862 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184e:	2201      	movs	r2, #1
 8001850:	409a      	lsls	r2, r3
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185a:	f043 0202 	orr.w	r2, r3, #2
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001866:	2204      	movs	r2, #4
 8001868:	409a      	lsls	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d012      	beq.n	8001898 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00b      	beq.n	8001898 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001884:	2204      	movs	r2, #4
 8001886:	409a      	lsls	r2, r3
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001890:	f043 0204 	orr.w	r2, r3, #4
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189c:	2210      	movs	r2, #16
 800189e:	409a      	lsls	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d043      	beq.n	8001930 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d03c      	beq.n	8001930 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ba:	2210      	movs	r2, #16
 80018bc:	409a      	lsls	r2, r3
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d018      	beq.n	8001902 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d108      	bne.n	80018f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d024      	beq.n	8001930 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	4798      	blx	r3
 80018ee:	e01f      	b.n	8001930 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01b      	beq.n	8001930 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4798      	blx	r3
 8001900:	e016      	b.n	8001930 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190c:	2b00      	cmp	r3, #0
 800190e:	d107      	bne.n	8001920 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0208 	bic.w	r2, r2, #8
 800191e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001934:	2220      	movs	r2, #32
 8001936:	409a      	lsls	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 808f 	beq.w	8001a60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 8087 	beq.w	8001a60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	2220      	movs	r2, #32
 8001958:	409a      	lsls	r2, r3
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b05      	cmp	r3, #5
 8001968:	d136      	bne.n	80019d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0216 	bic.w	r2, r2, #22
 8001978:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695a      	ldr	r2, [r3, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001988:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	2b00      	cmp	r3, #0
 8001990:	d103      	bne.n	800199a <HAL_DMA_IRQHandler+0x1da>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001996:	2b00      	cmp	r3, #0
 8001998:	d007      	beq.n	80019aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0208 	bic.w	r2, r2, #8
 80019a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	223f      	movs	r2, #63	; 0x3f
 80019b0:	409a      	lsls	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d07e      	beq.n	8001acc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	4798      	blx	r3
        }
        return;
 80019d6:	e079      	b.n	8001acc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d01d      	beq.n	8001a22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10d      	bne.n	8001a10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d031      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	4798      	blx	r3
 8001a04:	e02c      	b.n	8001a60 <HAL_DMA_IRQHandler+0x2a0>
 8001a06:	bf00      	nop
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d023      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	4798      	blx	r3
 8001a20:	e01e      	b.n	8001a60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10f      	bne.n	8001a50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0210 	bic.w	r2, r2, #16
 8001a3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d032      	beq.n	8001ace <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d022      	beq.n	8001aba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2205      	movs	r2, #5
 8001a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0201 	bic.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d307      	bcc.n	8001aa8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f2      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x2cc>
 8001aa6:	e000      	b.n	8001aaa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001aa8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
 8001aca:	e000      	b.n	8001ace <HAL_DMA_IRQHandler+0x30e>
        return;
 8001acc:	bf00      	nop
    }
  }
}
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ae2:	b2db      	uxtb	r3, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	3b10      	subs	r3, #16
 8001b00:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <DMA_CalcBaseAndBitshift+0x64>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b0a:	4a13      	ldr	r2, [pc, #76]	; (8001b58 <DMA_CalcBaseAndBitshift+0x68>)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d909      	bls.n	8001b32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b26:	f023 0303 	bic.w	r3, r3, #3
 8001b2a:	1d1a      	adds	r2, r3, #4
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	659a      	str	r2, [r3, #88]	; 0x58
 8001b30:	e007      	b.n	8001b42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b3a:	f023 0303 	bic.w	r3, r3, #3
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	aaaaaaab 	.word	0xaaaaaaab
 8001b58:	0800c38c 	.word	0x0800c38c

08001b5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d11f      	bne.n	8001bb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d856      	bhi.n	8001c2a <DMA_CheckFifoParam+0xce>
 8001b7c:	a201      	add	r2, pc, #4	; (adr r2, 8001b84 <DMA_CheckFifoParam+0x28>)
 8001b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b82:	bf00      	nop
 8001b84:	08001b95 	.word	0x08001b95
 8001b88:	08001ba7 	.word	0x08001ba7
 8001b8c:	08001b95 	.word	0x08001b95
 8001b90:	08001c2b 	.word	0x08001c2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d046      	beq.n	8001c2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ba4:	e043      	b.n	8001c2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001baa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bae:	d140      	bne.n	8001c32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bb4:	e03d      	b.n	8001c32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bbe:	d121      	bne.n	8001c04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d837      	bhi.n	8001c36 <DMA_CheckFifoParam+0xda>
 8001bc6:	a201      	add	r2, pc, #4	; (adr r2, 8001bcc <DMA_CheckFifoParam+0x70>)
 8001bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bcc:	08001bdd 	.word	0x08001bdd
 8001bd0:	08001be3 	.word	0x08001be3
 8001bd4:	08001bdd 	.word	0x08001bdd
 8001bd8:	08001bf5 	.word	0x08001bf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
      break;
 8001be0:	e030      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d025      	beq.n	8001c3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bf2:	e022      	b.n	8001c3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bfc:	d11f      	bne.n	8001c3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c02:	e01c      	b.n	8001c3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d903      	bls.n	8001c12 <DMA_CheckFifoParam+0xb6>
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d003      	beq.n	8001c18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c10:	e018      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
      break;
 8001c16:	e015      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00e      	beq.n	8001c42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
      break;
 8001c28:	e00b      	b.n	8001c42 <DMA_CheckFifoParam+0xe6>
      break;
 8001c2a:	bf00      	nop
 8001c2c:	e00a      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
      break;
 8001c2e:	bf00      	nop
 8001c30:	e008      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
      break;
 8001c32:	bf00      	nop
 8001c34:	e006      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
      break;
 8001c36:	bf00      	nop
 8001c38:	e004      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
      break;
 8001c3a:	bf00      	nop
 8001c3c:	e002      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c3e:	bf00      	nop
 8001c40:	e000      	b.n	8001c44 <DMA_CheckFifoParam+0xe8>
      break;
 8001c42:	bf00      	nop
    }
  } 
  
  return status; 
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	; 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	e16b      	b.n	8001f48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c70:	2201      	movs	r2, #1
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	f040 815a 	bne.w	8001f42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d005      	beq.n	8001ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d130      	bne.n	8001d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cdc:	2201      	movs	r2, #1
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 0201 	and.w	r2, r3, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d017      	beq.n	8001d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d123      	bne.n	8001d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	08da      	lsrs	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3208      	adds	r2, #8
 8001d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	220f      	movs	r2, #15
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	08da      	lsrs	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3208      	adds	r2, #8
 8001d92:	69b9      	ldr	r1, [r7, #24]
 8001d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80b4 	beq.w	8001f42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b60      	ldr	r3, [pc, #384]	; (8001f60 <HAL_GPIO_Init+0x30c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	4a5f      	ldr	r2, [pc, #380]	; (8001f60 <HAL_GPIO_Init+0x30c>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dea:	4b5d      	ldr	r3, [pc, #372]	; (8001f60 <HAL_GPIO_Init+0x30c>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001df6:	4a5b      	ldr	r2, [pc, #364]	; (8001f64 <HAL_GPIO_Init+0x310>)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a52      	ldr	r2, [pc, #328]	; (8001f68 <HAL_GPIO_Init+0x314>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d02b      	beq.n	8001e7a <HAL_GPIO_Init+0x226>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a51      	ldr	r2, [pc, #324]	; (8001f6c <HAL_GPIO_Init+0x318>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d025      	beq.n	8001e76 <HAL_GPIO_Init+0x222>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a50      	ldr	r2, [pc, #320]	; (8001f70 <HAL_GPIO_Init+0x31c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01f      	beq.n	8001e72 <HAL_GPIO_Init+0x21e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4f      	ldr	r2, [pc, #316]	; (8001f74 <HAL_GPIO_Init+0x320>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d019      	beq.n	8001e6e <HAL_GPIO_Init+0x21a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4e      	ldr	r2, [pc, #312]	; (8001f78 <HAL_GPIO_Init+0x324>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0x216>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4d      	ldr	r2, [pc, #308]	; (8001f7c <HAL_GPIO_Init+0x328>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00d      	beq.n	8001e66 <HAL_GPIO_Init+0x212>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4c      	ldr	r2, [pc, #304]	; (8001f80 <HAL_GPIO_Init+0x32c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_Init+0x20e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4b      	ldr	r2, [pc, #300]	; (8001f84 <HAL_GPIO_Init+0x330>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_GPIO_Init+0x20a>
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	e00e      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e5e:	2308      	movs	r3, #8
 8001e60:	e00c      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e62:	2306      	movs	r3, #6
 8001e64:	e00a      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e66:	2305      	movs	r3, #5
 8001e68:	e008      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	e006      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e004      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e002      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	f002 0203 	and.w	r2, r2, #3
 8001e82:	0092      	lsls	r2, r2, #2
 8001e84:	4093      	lsls	r3, r2
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e8c:	4935      	ldr	r1, [pc, #212]	; (8001f64 <HAL_GPIO_Init+0x310>)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	3302      	adds	r3, #2
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ebe:	4a32      	ldr	r2, [pc, #200]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec4:	4b30      	ldr	r3, [pc, #192]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ee8:	4a27      	ldr	r2, [pc, #156]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f12:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f18:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f3c:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3301      	adds	r3, #1
 8001f46:	61fb      	str	r3, [r7, #28]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2b0f      	cmp	r3, #15
 8001f4c:	f67f ae90 	bls.w	8001c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40013800 	.word	0x40013800
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	40020800 	.word	0x40020800
 8001f74:	40020c00 	.word	0x40020c00
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40021400 	.word	0x40021400
 8001f80:	40021800 	.word	0x40021800
 8001f84:	40021c00 	.word	0x40021c00
 8001f88:	40013c00 	.word	0x40013c00

08001f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f9c:	787b      	ldrb	r3, [r7, #1]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa8:	e003      	b.n	8001fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001faa:	887b      	ldrh	r3, [r7, #2]
 8001fac:	041a      	lsls	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	619a      	str	r2, [r3, #24]
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fd6:	4a05      	ldr	r2, [pc, #20]	; (8001fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f806 	bl	8001ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40013c00 	.word	0x40013c00

08001ff0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e12b      	b.n	8002272 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d106      	bne.n	8002034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7fe fb52 	bl	80006d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2224      	movs	r2, #36	; 0x24
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0201 	bic.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800205a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800206a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800206c:	f003 fcd8 	bl	8005a20 <HAL_RCC_GetPCLK1Freq>
 8002070:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4a81      	ldr	r2, [pc, #516]	; (800227c <HAL_I2C_Init+0x274>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d807      	bhi.n	800208c <HAL_I2C_Init+0x84>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4a80      	ldr	r2, [pc, #512]	; (8002280 <HAL_I2C_Init+0x278>)
 8002080:	4293      	cmp	r3, r2
 8002082:	bf94      	ite	ls
 8002084:	2301      	movls	r3, #1
 8002086:	2300      	movhi	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	e006      	b.n	800209a <HAL_I2C_Init+0x92>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4a7d      	ldr	r2, [pc, #500]	; (8002284 <HAL_I2C_Init+0x27c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	bf94      	ite	ls
 8002094:	2301      	movls	r3, #1
 8002096:	2300      	movhi	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e0e7      	b.n	8002272 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4a78      	ldr	r2, [pc, #480]	; (8002288 <HAL_I2C_Init+0x280>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	0c9b      	lsrs	r3, r3, #18
 80020ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	430a      	orrs	r2, r1
 80020c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4a6a      	ldr	r2, [pc, #424]	; (800227c <HAL_I2C_Init+0x274>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d802      	bhi.n	80020dc <HAL_I2C_Init+0xd4>
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	3301      	adds	r3, #1
 80020da:	e009      	b.n	80020f0 <HAL_I2C_Init+0xe8>
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	4a69      	ldr	r2, [pc, #420]	; (800228c <HAL_I2C_Init+0x284>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	099b      	lsrs	r3, r3, #6
 80020ee:	3301      	adds	r3, #1
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	430b      	orrs	r3, r1
 80020f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002102:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	495c      	ldr	r1, [pc, #368]	; (800227c <HAL_I2C_Init+0x274>)
 800210c:	428b      	cmp	r3, r1
 800210e:	d819      	bhi.n	8002144 <HAL_I2C_Init+0x13c>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1e59      	subs	r1, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	fbb1 f3f3 	udiv	r3, r1, r3
 800211e:	1c59      	adds	r1, r3, #1
 8002120:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002124:	400b      	ands	r3, r1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00a      	beq.n	8002140 <HAL_I2C_Init+0x138>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1e59      	subs	r1, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fbb1 f3f3 	udiv	r3, r1, r3
 8002138:	3301      	adds	r3, #1
 800213a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213e:	e051      	b.n	80021e4 <HAL_I2C_Init+0x1dc>
 8002140:	2304      	movs	r3, #4
 8002142:	e04f      	b.n	80021e4 <HAL_I2C_Init+0x1dc>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d111      	bne.n	8002170 <HAL_I2C_Init+0x168>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1e58      	subs	r0, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6859      	ldr	r1, [r3, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	440b      	add	r3, r1
 800215a:	fbb0 f3f3 	udiv	r3, r0, r3
 800215e:	3301      	adds	r3, #1
 8002160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	e012      	b.n	8002196 <HAL_I2C_Init+0x18e>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1e58      	subs	r0, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	0099      	lsls	r1, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	fbb0 f3f3 	udiv	r3, r0, r3
 8002186:	3301      	adds	r3, #1
 8002188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Init+0x196>
 800219a:	2301      	movs	r3, #1
 800219c:	e022      	b.n	80021e4 <HAL_I2C_Init+0x1dc>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10e      	bne.n	80021c4 <HAL_I2C_Init+0x1bc>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1e58      	subs	r0, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6859      	ldr	r1, [r3, #4]
 80021ae:	460b      	mov	r3, r1
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	440b      	add	r3, r1
 80021b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b8:	3301      	adds	r3, #1
 80021ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021c2:	e00f      	b.n	80021e4 <HAL_I2C_Init+0x1dc>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1e58      	subs	r0, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	0099      	lsls	r1, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021da:	3301      	adds	r3, #1
 80021dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	6809      	ldr	r1, [r1, #0]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69da      	ldr	r2, [r3, #28]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002212:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6911      	ldr	r1, [r2, #16]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68d2      	ldr	r2, [r2, #12]
 800221e:	4311      	orrs	r1, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	430b      	orrs	r3, r1
 8002226:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2220      	movs	r2, #32
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	000186a0 	.word	0x000186a0
 8002280:	001e847f 	.word	0x001e847f
 8002284:	003d08ff 	.word	0x003d08ff
 8002288:	431bde83 	.word	0x431bde83
 800228c:	10624dd3 	.word	0x10624dd3

08002290 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022b0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	2b10      	cmp	r3, #16
 80022be:	d003      	beq.n	80022c8 <HAL_I2C_EV_IRQHandler+0x38>
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	2b40      	cmp	r3, #64	; 0x40
 80022c4:	f040 80c1 	bne.w	800244a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10d      	bne.n	80022fe <HAL_I2C_EV_IRQHandler+0x6e>
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80022e8:	d003      	beq.n	80022f2 <HAL_I2C_EV_IRQHandler+0x62>
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80022f0:	d101      	bne.n	80022f6 <HAL_I2C_EV_IRQHandler+0x66>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_I2C_EV_IRQHandler+0x68>
 80022f6:	2300      	movs	r3, #0
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	f000 8132 	beq.w	8002562 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00c      	beq.n	8002322 <HAL_I2C_EV_IRQHandler+0x92>
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	0a5b      	lsrs	r3, r3, #9
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d006      	beq.n	8002322 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f001 fc7b 	bl	8003c10 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fd83 	bl	8002e26 <I2C_Master_SB>
 8002320:	e092      	b.n	8002448 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	08db      	lsrs	r3, r3, #3
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <HAL_I2C_EV_IRQHandler+0xb2>
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	0a5b      	lsrs	r3, r3, #9
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 fdf9 	bl	8002f32 <I2C_Master_ADD10>
 8002340:	e082      	b.n	8002448 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	085b      	lsrs	r3, r3, #1
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d009      	beq.n	8002362 <HAL_I2C_EV_IRQHandler+0xd2>
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	0a5b      	lsrs	r3, r3, #9
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fe13 	bl	8002f86 <I2C_Master_ADDR>
 8002360:	e072      	b.n	8002448 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d03b      	beq.n	80023e6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800237c:	f000 80f3 	beq.w	8002566 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	09db      	lsrs	r3, r3, #7
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00f      	beq.n	80023ac <HAL_I2C_EV_IRQHandler+0x11c>
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	0a9b      	lsrs	r3, r3, #10
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d009      	beq.n	80023ac <HAL_I2C_EV_IRQHandler+0x11c>
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d103      	bne.n	80023ac <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f9f3 	bl	8002790 <I2C_MasterTransmit_TXE>
 80023aa:	e04d      	b.n	8002448 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80d6 	beq.w	8002566 <HAL_I2C_EV_IRQHandler+0x2d6>
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	0a5b      	lsrs	r3, r3, #9
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80cf 	beq.w	8002566 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80023c8:	7bbb      	ldrb	r3, [r7, #14]
 80023ca:	2b21      	cmp	r3, #33	; 0x21
 80023cc:	d103      	bne.n	80023d6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fa7a 	bl	80028c8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023d4:	e0c7      	b.n	8002566 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	2b40      	cmp	r3, #64	; 0x40
 80023da:	f040 80c4 	bne.w	8002566 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fae8 	bl	80029b4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023e4:	e0bf      	b.n	8002566 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023f4:	f000 80b7 	beq.w	8002566 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	099b      	lsrs	r3, r3, #6
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00f      	beq.n	8002424 <HAL_I2C_EV_IRQHandler+0x194>
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	0a9b      	lsrs	r3, r3, #10
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d009      	beq.n	8002424 <HAL_I2C_EV_IRQHandler+0x194>
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d103      	bne.n	8002424 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 fb5d 	bl	8002adc <I2C_MasterReceive_RXNE>
 8002422:	e011      	b.n	8002448 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 809a 	beq.w	8002566 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	0a5b      	lsrs	r3, r3, #9
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8093 	beq.w	8002566 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fc06 	bl	8002c52 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002446:	e08e      	b.n	8002566 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002448:	e08d      	b.n	8002566 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d004      	beq.n	800245c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	e007      	b.n	800246c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	085b      	lsrs	r3, r3, #1
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d012      	beq.n	800249e <HAL_I2C_EV_IRQHandler+0x20e>
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	0a5b      	lsrs	r3, r3, #9
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00c      	beq.n	800249e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002494:	69b9      	ldr	r1, [r7, #24]
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 ffc4 	bl	8003424 <I2C_Slave_ADDR>
 800249c:	e066      	b.n	800256c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d009      	beq.n	80024be <HAL_I2C_EV_IRQHandler+0x22e>
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	0a5b      	lsrs	r3, r3, #9
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fffe 	bl	80034b8 <I2C_Slave_STOPF>
 80024bc:	e056      	b.n	800256c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80024be:	7bbb      	ldrb	r3, [r7, #14]
 80024c0:	2b21      	cmp	r3, #33	; 0x21
 80024c2:	d002      	beq.n	80024ca <HAL_I2C_EV_IRQHandler+0x23a>
 80024c4:	7bbb      	ldrb	r3, [r7, #14]
 80024c6:	2b29      	cmp	r3, #41	; 0x29
 80024c8:	d125      	bne.n	8002516 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	09db      	lsrs	r3, r3, #7
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00f      	beq.n	80024f6 <HAL_I2C_EV_IRQHandler+0x266>
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	0a9b      	lsrs	r3, r3, #10
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_I2C_EV_IRQHandler+0x266>
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 feda 	bl	80032a8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024f4:	e039      	b.n	800256a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d033      	beq.n	800256a <HAL_I2C_EV_IRQHandler+0x2da>
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	0a5b      	lsrs	r3, r3, #9
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d02d      	beq.n	800256a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 ff07 	bl	8003322 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002514:	e029      	b.n	800256a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	099b      	lsrs	r3, r3, #6
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00f      	beq.n	8002542 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	0a9b      	lsrs	r3, r3, #10
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_I2C_EV_IRQHandler+0x2b2>
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d103      	bne.n	8002542 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 ff12 	bl	8003364 <I2C_SlaveReceive_RXNE>
 8002540:	e014      	b.n	800256c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	089b      	lsrs	r3, r3, #2
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00e      	beq.n	800256c <HAL_I2C_EV_IRQHandler+0x2dc>
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	0a5b      	lsrs	r3, r3, #9
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 ff40 	bl	80033e0 <I2C_SlaveReceive_BTF>
 8002560:	e004      	b.n	800256c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002562:	bf00      	nop
 8002564:	e002      	b.n	800256c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002566:	bf00      	nop
 8002568:	e000      	b.n	800256c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800256a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b08a      	sub	sp, #40	; 0x28
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002594:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00e      	beq.n	80025c0 <HAL_I2C_ER_IRQHandler+0x4e>
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d008      	beq.n	80025c0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025be:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	0a5b      	lsrs	r3, r3, #9
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00e      	beq.n	80025ea <HAL_I2C_ER_IRQHandler+0x78>
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	f043 0302 	orr.w	r3, r3, #2
 80025de:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80025e8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	0a9b      	lsrs	r3, r3, #10
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d03f      	beq.n	8002676 <HAL_I2C_ER_IRQHandler+0x104>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d039      	beq.n	8002676 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002602:	7efb      	ldrb	r3, [r7, #27]
 8002604:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800261c:	7ebb      	ldrb	r3, [r7, #26]
 800261e:	2b20      	cmp	r3, #32
 8002620:	d112      	bne.n	8002648 <HAL_I2C_ER_IRQHandler+0xd6>
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10f      	bne.n	8002648 <HAL_I2C_ER_IRQHandler+0xd6>
 8002628:	7cfb      	ldrb	r3, [r7, #19]
 800262a:	2b21      	cmp	r3, #33	; 0x21
 800262c:	d008      	beq.n	8002640 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800262e:	7cfb      	ldrb	r3, [r7, #19]
 8002630:	2b29      	cmp	r3, #41	; 0x29
 8002632:	d005      	beq.n	8002640 <HAL_I2C_ER_IRQHandler+0xce>
 8002634:	7cfb      	ldrb	r3, [r7, #19]
 8002636:	2b28      	cmp	r3, #40	; 0x28
 8002638:	d106      	bne.n	8002648 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2b21      	cmp	r3, #33	; 0x21
 800263e:	d103      	bne.n	8002648 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f001 f869 	bl	8003718 <I2C_Slave_AF>
 8002646:	e016      	b.n	8002676 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002650:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800265a:	7efb      	ldrb	r3, [r7, #27]
 800265c:	2b10      	cmp	r3, #16
 800265e:	d002      	beq.n	8002666 <HAL_I2C_ER_IRQHandler+0xf4>
 8002660:	7efb      	ldrb	r3, [r7, #27]
 8002662:	2b40      	cmp	r3, #64	; 0x40
 8002664:	d107      	bne.n	8002676 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002674:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	0adb      	lsrs	r3, r3, #11
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00e      	beq.n	80026a0 <HAL_I2C_ER_IRQHandler+0x12e>
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	f043 0308 	orr.w	r3, r3, #8
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800269e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d008      	beq.n	80026b8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f001 f8a0 	bl	80037f8 <I2C_ITError>
  }
}
 80026b8:	bf00      	nop
 80026ba:	3728      	adds	r7, #40	; 0x28
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	70fb      	strb	r3, [r7, #3]
 800271c:	4613      	mov	r3, r2
 800271e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d150      	bne.n	8002858 <I2C_MasterTransmit_TXE+0xc8>
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	2b21      	cmp	r3, #33	; 0x21
 80027ba:	d14d      	bne.n	8002858 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d01d      	beq.n	80027fe <I2C_MasterTransmit_TXE+0x6e>
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d01a      	beq.n	80027fe <I2C_MasterTransmit_TXE+0x6e>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027ce:	d016      	beq.n	80027fe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027de:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2211      	movs	r2, #17
 80027e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ff62 	bl	80026c0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027fc:	e060      	b.n	80028c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800280c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b40      	cmp	r3, #64	; 0x40
 8002836:	d107      	bne.n	8002848 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff ff7d 	bl	8002740 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002846:	e03b      	b.n	80028c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ff35 	bl	80026c0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002856:	e033      	b.n	80028c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b21      	cmp	r3, #33	; 0x21
 800285c:	d005      	beq.n	800286a <I2C_MasterTransmit_TXE+0xda>
 800285e:	7bbb      	ldrb	r3, [r7, #14]
 8002860:	2b40      	cmp	r3, #64	; 0x40
 8002862:	d12d      	bne.n	80028c0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	2b22      	cmp	r3, #34	; 0x22
 8002868:	d12a      	bne.n	80028c0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d108      	bne.n	8002886 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002882:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002884:	e01c      	b.n	80028c0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d103      	bne.n	800289a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f88e 	bl	80029b4 <I2C_MemoryTransmit_TXE_BTF>
}
 8002898:	e012      	b.n	80028c0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	781a      	ldrb	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80028be:	e7ff      	b.n	80028c0 <I2C_MasterTransmit_TXE+0x130>
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b21      	cmp	r3, #33	; 0x21
 80028e0:	d164      	bne.n	80029ac <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d012      	beq.n	8002912 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002910:	e04c      	b.n	80029ac <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2b08      	cmp	r3, #8
 8002916:	d01d      	beq.n	8002954 <I2C_MasterTransmit_BTF+0x8c>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2b20      	cmp	r3, #32
 800291c:	d01a      	beq.n	8002954 <I2C_MasterTransmit_BTF+0x8c>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002924:	d016      	beq.n	8002954 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002934:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2211      	movs	r2, #17
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff feb7 	bl	80026c0 <HAL_I2C_MasterTxCpltCallback>
}
 8002952:	e02b      	b.n	80029ac <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002962:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002972:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b40      	cmp	r3, #64	; 0x40
 800298c:	d107      	bne.n	800299e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff fed2 	bl	8002740 <HAL_I2C_MemTxCpltCallback>
}
 800299c:	e006      	b.n	80029ac <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff fe8a 	bl	80026c0 <HAL_I2C_MasterTxCpltCallback>
}
 80029ac:	bf00      	nop
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d11d      	bne.n	8002a08 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d10b      	bne.n	80029ec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e4:	1c9a      	adds	r2, r3, #2
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80029ea:	e073      	b.n	8002ad4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	121b      	asrs	r3, r3, #8
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a06:	e065      	b.n	8002ad4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d10b      	bne.n	8002a28 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a26:	e055      	b.n	8002ad4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d151      	bne.n	8002ad4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	2b22      	cmp	r3, #34	; 0x22
 8002a34:	d10d      	bne.n	8002a52 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a44:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a50:	e040      	b.n	8002ad4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d015      	beq.n	8002a88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	2b21      	cmp	r3, #33	; 0x21
 8002a60:	d112      	bne.n	8002a88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	781a      	ldrb	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a86:	e025      	b.n	8002ad4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d120      	bne.n	8002ad4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	2b21      	cmp	r3, #33	; 0x21
 8002a96:	d11d      	bne.n	8002ad4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aa6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff fe36 	bl	8002740 <HAL_I2C_MemTxCpltCallback>
}
 8002ad4:	bf00      	nop
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b22      	cmp	r3, #34	; 0x22
 8002aee:	f040 80ac 	bne.w	8002c4a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d921      	bls.n	8002b44 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	f040 808c 	bne.w	8002c4a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b40:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002b42:	e082      	b.n	8002c4a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d075      	beq.n	8002c38 <I2C_MasterReceive_RXNE+0x15c>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d002      	beq.n	8002b58 <I2C_MasterReceive_RXNE+0x7c>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d16f      	bne.n	8002c38 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f001 f827 	bl	8003bac <I2C_WaitOnSTOPRequestThroughIT>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d142      	bne.n	8002bea <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b72:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b82:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b40      	cmp	r3, #64	; 0x40
 8002bbc:	d10a      	bne.n	8002bd4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff fdc1 	bl	8002754 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002bd2:	e03a      	b.n	8002c4a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2212      	movs	r2, #18
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff fd76 	bl	80026d4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002be8:	e02f      	b.n	8002c4a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bf8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff fd99 	bl	8002768 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c36:	e008      	b.n	8002c4a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c46:	605a      	str	r2, [r3, #4]
}
 8002c48:	e7ff      	b.n	8002c4a <I2C_MasterReceive_RXNE+0x16e>
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d11b      	bne.n	8002ca2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c78:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002ca0:	e0bd      	b.n	8002e1e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d129      	bne.n	8002d00 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cba:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d00a      	beq.n	8002cd8 <I2C_MasterReceive_BTF+0x86>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d007      	beq.n	8002cd8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002cfe:	e08e      	b.n	8002e1e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d176      	bne.n	8002df8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d002      	beq.n	8002d16 <I2C_MasterReceive_BTF+0xc4>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d108      	bne.n	8002d28 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	e019      	b.n	8002d5c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d002      	beq.n	8002d34 <I2C_MasterReceive_BTF+0xe2>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d108      	bne.n	8002d46 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	e00a      	b.n	8002d5c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b10      	cmp	r3, #16
 8002d4a:	d007      	beq.n	8002d5c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002db6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
 8002dca:	d10a      	bne.n	8002de2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff fcba 	bl	8002754 <HAL_I2C_MemRxCpltCallback>
}
 8002de0:	e01d      	b.n	8002e1e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2212      	movs	r2, #18
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff fc6f 	bl	80026d4 <HAL_I2C_MasterRxCpltCallback>
}
 8002df6:	e012      	b.n	8002e1e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	d117      	bne.n	8002e6a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	461a      	mov	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e52:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002e54:	e067      	b.n	8002f26 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	611a      	str	r2, [r3, #16]
}
 8002e68:	e05d      	b.n	8002f26 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e72:	d133      	bne.n	8002edc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b21      	cmp	r3, #33	; 0x21
 8002e7e:	d109      	bne.n	8002e94 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e90:	611a      	str	r2, [r3, #16]
 8002e92:	e008      	b.n	8002ea6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <I2C_Master_SB+0x92>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d108      	bne.n	8002eca <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d032      	beq.n	8002f26 <I2C_Master_SB+0x100>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d02d      	beq.n	8002f26 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ed8:	605a      	str	r2, [r3, #4]
}
 8002eda:	e024      	b.n	8002f26 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10e      	bne.n	8002f02 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	11db      	asrs	r3, r3, #7
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f003 0306 	and.w	r3, r3, #6
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f063 030f 	orn	r3, r3, #15
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	611a      	str	r2, [r3, #16]
}
 8002f00:	e011      	b.n	8002f26 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d10d      	bne.n	8002f26 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	11db      	asrs	r3, r3, #7
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f003 0306 	and.w	r3, r3, #6
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f063 030e 	orn	r3, r3, #14
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	611a      	str	r2, [r3, #16]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d004      	beq.n	8002f58 <I2C_Master_ADD10+0x26>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d108      	bne.n	8002f6a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00c      	beq.n	8002f7a <I2C_Master_ADD10+0x48>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f78:	605a      	str	r2, [r3, #4]
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b091      	sub	sp, #68	; 0x44
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b22      	cmp	r3, #34	; 0x22
 8002fae:	f040 8169 	bne.w	8003284 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10f      	bne.n	8002fda <I2C_Master_ADDR+0x54>
 8002fba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002fbe:	2b40      	cmp	r3, #64	; 0x40
 8002fc0:	d10b      	bne.n	8002fda <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	e160      	b.n	800329c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d11d      	bne.n	800301e <I2C_Master_ADDR+0x98>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002fea:	d118      	bne.n	800301e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fec:	2300      	movs	r3, #0
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003000:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003010:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	651a      	str	r2, [r3, #80]	; 0x50
 800301c:	e13e      	b.n	800329c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d113      	bne.n	8003050 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003028:	2300      	movs	r3, #0
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	62bb      	str	r3, [r7, #40]	; 0x28
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	62bb      	str	r3, [r7, #40]	; 0x28
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	e115      	b.n	800327c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b01      	cmp	r3, #1
 8003058:	f040 808a 	bne.w	8003170 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800305c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003062:	d137      	bne.n	80030d4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003072:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800307e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003082:	d113      	bne.n	80030ac <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003092:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	e0e7      	b.n	800327c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ac:	2300      	movs	r3, #0
 80030ae:	623b      	str	r3, [r7, #32]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	623b      	str	r3, [r7, #32]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	623b      	str	r3, [r7, #32]
 80030c0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	e0d3      	b.n	800327c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80030d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d02e      	beq.n	8003138 <I2C_Master_ADDR+0x1b2>
 80030da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d02b      	beq.n	8003138 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80030e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e2:	2b12      	cmp	r3, #18
 80030e4:	d102      	bne.n	80030ec <I2C_Master_ADDR+0x166>
 80030e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d125      	bne.n	8003138 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80030ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d00e      	beq.n	8003110 <I2C_Master_ADDR+0x18a>
 80030f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d00b      	beq.n	8003110 <I2C_Master_ADDR+0x18a>
 80030f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d008      	beq.n	8003110 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	e007      	b.n	8003120 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800311e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	61fb      	str	r3, [r7, #28]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	e0a1      	b.n	800327c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003146:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	61bb      	str	r3, [r7, #24]
 800315c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	e085      	b.n	800327c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d14d      	bne.n	8003216 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800317a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317c:	2b04      	cmp	r3, #4
 800317e:	d016      	beq.n	80031ae <I2C_Master_ADDR+0x228>
 8003180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003182:	2b02      	cmp	r3, #2
 8003184:	d013      	beq.n	80031ae <I2C_Master_ADDR+0x228>
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	2b10      	cmp	r3, #16
 800318a:	d010      	beq.n	80031ae <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	e007      	b.n	80031be <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031bc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031cc:	d117      	bne.n	80031fe <I2C_Master_ADDR+0x278>
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031d4:	d00b      	beq.n	80031ee <I2C_Master_ADDR+0x268>
 80031d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d008      	beq.n	80031ee <I2C_Master_ADDR+0x268>
 80031dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d005      	beq.n	80031ee <I2C_Master_ADDR+0x268>
 80031e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e4:	2b10      	cmp	r3, #16
 80031e6:	d002      	beq.n	80031ee <I2C_Master_ADDR+0x268>
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d107      	bne.n	80031fe <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031fc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	e032      	b.n	800327c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003224:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003234:	d117      	bne.n	8003266 <I2C_Master_ADDR+0x2e0>
 8003236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003238:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800323c:	d00b      	beq.n	8003256 <I2C_Master_ADDR+0x2d0>
 800323e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003240:	2b01      	cmp	r3, #1
 8003242:	d008      	beq.n	8003256 <I2C_Master_ADDR+0x2d0>
 8003244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003246:	2b08      	cmp	r3, #8
 8003248:	d005      	beq.n	8003256 <I2C_Master_ADDR+0x2d0>
 800324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324c:	2b10      	cmp	r3, #16
 800324e:	d002      	beq.n	8003256 <I2C_Master_ADDR+0x2d0>
 8003250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003252:	2b20      	cmp	r3, #32
 8003254:	d107      	bne.n	8003266 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003264:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003282:	e00b      	b.n	800329c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
}
 800329a:	e7ff      	b.n	800329c <I2C_Master_ADDR+0x316>
 800329c:	bf00      	nop
 800329e:	3744      	adds	r7, #68	; 0x44
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d02b      	beq.n	800331a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	781a      	ldrb	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d114      	bne.n	800331a <I2C_SlaveTransmit_TXE+0x72>
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	2b29      	cmp	r3, #41	; 0x29
 80032f4:	d111      	bne.n	800331a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003304:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2221      	movs	r2, #33	; 0x21
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2228      	movs	r2, #40	; 0x28
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff f9e7 	bl	80026e8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d011      	beq.n	8003358 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	781a      	ldrb	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003372:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d02c      	beq.n	80033d8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d114      	bne.n	80033d8 <I2C_SlaveReceive_RXNE+0x74>
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	2b2a      	cmp	r3, #42	; 0x2a
 80033b2:	d111      	bne.n	80033d8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2222      	movs	r2, #34	; 0x22
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2228      	movs	r2, #40	; 0x28
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff f992 	bl	80026fc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d012      	beq.n	8003418 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800343e:	2b28      	cmp	r3, #40	; 0x28
 8003440:	d127      	bne.n	8003492 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003450:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800345e:	2301      	movs	r3, #1
 8003460:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	09db      	lsrs	r3, r3, #7
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d103      	bne.n	8003476 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	81bb      	strh	r3, [r7, #12]
 8003474:	e002      	b.n	800347c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003484:	89ba      	ldrh	r2, [r7, #12]
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	4619      	mov	r1, r3
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff f940 	bl	8002710 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003490:	e00e      	b.n	80034b0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003492:	2300      	movs	r3, #0
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80034b0:	bf00      	nop
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034d6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80034d8:	2300      	movs	r3, #0
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	60bb      	str	r3, [r7, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003504:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003514:	d172      	bne.n	80035fc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	2b22      	cmp	r3, #34	; 0x22
 800351a:	d002      	beq.n	8003522 <I2C_Slave_STOPF+0x6a>
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	2b2a      	cmp	r3, #42	; 0x2a
 8003520:	d135      	bne.n	800358e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	b29a      	uxth	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f043 0204 	orr.w	r2, r3, #4
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003554:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe faba 	bl	8001ad4 <HAL_DMA_GetState>
 8003560:	4603      	mov	r3, r0
 8003562:	2b01      	cmp	r3, #1
 8003564:	d049      	beq.n	80035fa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	4a69      	ldr	r2, [pc, #420]	; (8003710 <I2C_Slave_STOPF+0x258>)
 800356c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe f902 	bl	800177c <HAL_DMA_Abort_IT>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d03d      	beq.n	80035fa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003588:	4610      	mov	r0, r2
 800358a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800358c:	e035      	b.n	80035fa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	b29a      	uxth	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f043 0204 	orr.w	r2, r3, #4
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe fa84 	bl	8001ad4 <HAL_DMA_GetState>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d014      	beq.n	80035fc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d6:	4a4e      	ldr	r2, [pc, #312]	; (8003710 <I2C_Slave_STOPF+0x258>)
 80035d8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe f8cc 	bl	800177c <HAL_DMA_Abort_IT>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035f4:	4610      	mov	r0, r2
 80035f6:	4798      	blx	r3
 80035f8:	e000      	b.n	80035fc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035fa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d03e      	beq.n	8003684 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b04      	cmp	r3, #4
 8003612:	d112      	bne.n	800363a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b40      	cmp	r3, #64	; 0x40
 8003646:	d112      	bne.n	800366e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f043 0204 	orr.w	r2, r3, #4
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f8b3 	bl	80037f8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003692:	e039      	b.n	8003708 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	2b2a      	cmp	r3, #42	; 0x2a
 8003698:	d109      	bne.n	80036ae <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2228      	movs	r2, #40	; 0x28
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7ff f827 	bl	80026fc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b28      	cmp	r3, #40	; 0x28
 80036b8:	d111      	bne.n	80036de <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a15      	ldr	r2, [pc, #84]	; (8003714 <I2C_Slave_STOPF+0x25c>)
 80036be:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff f828 	bl	800272c <HAL_I2C_ListenCpltCallback>
}
 80036dc:	e014      	b.n	8003708 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	2b22      	cmp	r3, #34	; 0x22
 80036e4:	d002      	beq.n	80036ec <I2C_Slave_STOPF+0x234>
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2b22      	cmp	r3, #34	; 0x22
 80036ea:	d10d      	bne.n	8003708 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fe fffa 	bl	80026fc <HAL_I2C_SlaveRxCpltCallback>
}
 8003708:	bf00      	nop
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	08003a5d 	.word	0x08003a5d
 8003714:	ffff0000 	.word	0xffff0000

08003718 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003726:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b08      	cmp	r3, #8
 8003732:	d002      	beq.n	800373a <I2C_Slave_AF+0x22>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b20      	cmp	r3, #32
 8003738:	d129      	bne.n	800378e <I2C_Slave_AF+0x76>
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	2b28      	cmp	r3, #40	; 0x28
 800373e:	d126      	bne.n	800378e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a2c      	ldr	r2, [pc, #176]	; (80037f4 <I2C_Slave_AF+0xdc>)
 8003744:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003754:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800375e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fe ffd0 	bl	800272c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800378c:	e02e      	b.n	80037ec <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	2b21      	cmp	r3, #33	; 0x21
 8003792:	d126      	bne.n	80037e2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a17      	ldr	r2, [pc, #92]	; (80037f4 <I2C_Slave_AF+0xdc>)
 8003798:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2221      	movs	r2, #33	; 0x21
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037be:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037c8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fe ff84 	bl	80026e8 <HAL_I2C_SlaveTxCpltCallback>
}
 80037e0:	e004      	b.n	80037ec <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037ea:	615a      	str	r2, [r3, #20]
}
 80037ec:	bf00      	nop
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	ffff0000 	.word	0xffff0000

080037f8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003806:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800380e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003810:	7bbb      	ldrb	r3, [r7, #14]
 8003812:	2b10      	cmp	r3, #16
 8003814:	d002      	beq.n	800381c <I2C_ITError+0x24>
 8003816:	7bbb      	ldrb	r3, [r7, #14]
 8003818:	2b40      	cmp	r3, #64	; 0x40
 800381a:	d10a      	bne.n	8003832 <I2C_ITError+0x3a>
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2b22      	cmp	r3, #34	; 0x22
 8003820:	d107      	bne.n	8003832 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003830:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003838:	2b28      	cmp	r3, #40	; 0x28
 800383a:	d107      	bne.n	800384c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2228      	movs	r2, #40	; 0x28
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800384a:	e015      	b.n	8003878 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800385a:	d00a      	beq.n	8003872 <I2C_ITError+0x7a>
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2b60      	cmp	r3, #96	; 0x60
 8003860:	d007      	beq.n	8003872 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003886:	d162      	bne.n	800394e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003896:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d020      	beq.n	80038e8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038aa:	4a6a      	ldr	r2, [pc, #424]	; (8003a54 <I2C_ITError+0x25c>)
 80038ac:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd ff62 	bl	800177c <HAL_DMA_Abort_IT>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 8089 	beq.w	80039d2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0201 	bic.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038e2:	4610      	mov	r0, r2
 80038e4:	4798      	blx	r3
 80038e6:	e074      	b.n	80039d2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	4a59      	ldr	r2, [pc, #356]	; (8003a54 <I2C_ITError+0x25c>)
 80038ee:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fd ff41 	bl	800177c <HAL_DMA_Abort_IT>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d068      	beq.n	80039d2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b40      	cmp	r3, #64	; 0x40
 800390c:	d10b      	bne.n	8003926 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003948:	4610      	mov	r0, r2
 800394a:	4798      	blx	r3
 800394c:	e041      	b.n	80039d2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b60      	cmp	r3, #96	; 0x60
 8003958:	d125      	bne.n	80039a6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	d10b      	bne.n	800398e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0201 	bic.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fe feec 	bl	800277c <HAL_I2C_AbortCpltCallback>
 80039a4:	e015      	b.n	80039d2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b40      	cmp	r3, #64	; 0x40
 80039b2:	d10b      	bne.n	80039cc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7fe fecb 	bl	8002768 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10e      	bne.n	8003a00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d109      	bne.n	8003a00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d104      	bne.n	8003a00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d007      	beq.n	8003a10 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a0e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a16:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d113      	bne.n	8003a4c <I2C_ITError+0x254>
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	2b28      	cmp	r3, #40	; 0x28
 8003a28:	d110      	bne.n	8003a4c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a0a      	ldr	r2, [pc, #40]	; (8003a58 <I2C_ITError+0x260>)
 8003a2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fe fe70 	bl	800272c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	08003a5d 	.word	0x08003a5d
 8003a58:	ffff0000 	.word	0xffff0000

08003a5c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a76:	4b4b      	ldr	r3, [pc, #300]	; (8003ba4 <I2C_DMAAbort+0x148>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	08db      	lsrs	r3, r3, #3
 8003a7c:	4a4a      	ldr	r2, [pc, #296]	; (8003ba8 <I2C_DMAAbort+0x14c>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	0a1a      	lsrs	r2, r3, #8
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	00da      	lsls	r2, r3, #3
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f043 0220 	orr.w	r2, r3, #32
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003aa2:	e00a      	b.n	8003aba <I2C_DMAAbort+0x5e>
    }
    count--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ab8:	d0ea      	beq.n	8003a90 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2200      	movs	r2, #0
 8003aee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afc:	2200      	movs	r2, #0
 8003afe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b60      	cmp	r3, #96	; 0x60
 8003b2a:	d10e      	bne.n	8003b4a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b42:	6978      	ldr	r0, [r7, #20]
 8003b44:	f7fe fe1a 	bl	800277c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b48:	e027      	b.n	8003b9a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b4a:	7cfb      	ldrb	r3, [r7, #19]
 8003b4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b50:	2b28      	cmp	r3, #40	; 0x28
 8003b52:	d117      	bne.n	8003b84 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b72:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2200      	movs	r2, #0
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2228      	movs	r2, #40	; 0x28
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b82:	e007      	b.n	8003b94 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003b94:	6978      	ldr	r0, [r7, #20]
 8003b96:	f7fe fde7 	bl	8002768 <HAL_I2C_ErrorCallback>
}
 8003b9a:	bf00      	nop
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000000 	.word	0x20000000
 8003ba8:	14f8b589 	.word	0x14f8b589

08003bac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bb8:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	08db      	lsrs	r3, r3, #3
 8003bbe:	4a13      	ldr	r2, [pc, #76]	; (8003c0c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc4:	0a1a      	lsrs	r2, r3, #8
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d107      	bne.n	8003bea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f043 0220 	orr.w	r2, r3, #32
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e008      	b.n	8003bfc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf8:	d0e9      	beq.n	8003bce <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	14f8b589 	.word	0x14f8b589

08003c10 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c20:	d103      	bne.n	8003c2a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c28:	e007      	b.n	8003c3a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c32:	d102      	bne.n	8003c3a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2208      	movs	r2, #8
 8003c38:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c48:	b08f      	sub	sp, #60	; 0x3c
 8003c4a:	af0a      	add	r7, sp, #40	; 0x28
 8003c4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e10f      	b.n	8003e78 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f008 f80e 	bl	800bc94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f004 fb61 	bl	800835e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	603b      	str	r3, [r7, #0]
 8003ca2:	687e      	ldr	r6, [r7, #4]
 8003ca4:	466d      	mov	r5, sp
 8003ca6:	f106 0410 	add.w	r4, r6, #16
 8003caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cba:	1d33      	adds	r3, r6, #4
 8003cbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cbe:	6838      	ldr	r0, [r7, #0]
 8003cc0:	f004 fa38 	bl	8008134 <USB_CoreInit>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e0d0      	b.n	8003e78 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f004 fb4f 	bl	8008380 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	73fb      	strb	r3, [r7, #15]
 8003ce6:	e04a      	b.n	8003d7e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ce8:	7bfa      	ldrb	r2, [r7, #15]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	333d      	adds	r3, #61	; 0x3d
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	333c      	adds	r3, #60	; 0x3c
 8003d0c:	7bfa      	ldrb	r2, [r7, #15]
 8003d0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d10:	7bfa      	ldrb	r2, [r7, #15]
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	b298      	uxth	r0, r3
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	3344      	adds	r3, #68	; 0x44
 8003d24:	4602      	mov	r2, r0
 8003d26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d28:	7bfa      	ldrb	r2, [r7, #15]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	3340      	adds	r3, #64	; 0x40
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d3c:	7bfa      	ldrb	r2, [r7, #15]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	3348      	adds	r3, #72	; 0x48
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d50:	7bfa      	ldrb	r2, [r7, #15]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	334c      	adds	r3, #76	; 0x4c
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d64:	7bfa      	ldrb	r2, [r7, #15]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	3354      	adds	r3, #84	; 0x54
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	73fb      	strb	r3, [r7, #15]
 8003d7e:	7bfa      	ldrb	r2, [r7, #15]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d3af      	bcc.n	8003ce8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d88:	2300      	movs	r3, #0
 8003d8a:	73fb      	strb	r3, [r7, #15]
 8003d8c:	e044      	b.n	8003e18 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d8e:	7bfa      	ldrb	r2, [r7, #15]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003da0:	2200      	movs	r2, #0
 8003da2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003da4:	7bfa      	ldrb	r2, [r7, #15]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003db6:	7bfa      	ldrb	r2, [r7, #15]
 8003db8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003dba:	7bfa      	ldrb	r2, [r7, #15]
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dd0:	7bfa      	ldrb	r2, [r7, #15]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003de6:	7bfa      	ldrb	r2, [r7, #15]
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003dfc:	7bfa      	ldrb	r2, [r7, #15]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	3301      	adds	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
 8003e18:	7bfa      	ldrb	r2, [r7, #15]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d3b5      	bcc.n	8003d8e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	687e      	ldr	r6, [r7, #4]
 8003e2a:	466d      	mov	r5, sp
 8003e2c:	f106 0410 	add.w	r4, r6, #16
 8003e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e40:	1d33      	adds	r3, r6, #4
 8003e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e44:	6838      	ldr	r0, [r7, #0]
 8003e46:	f004 fae7 	bl	8008418 <USB_DevInit>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e00d      	b.n	8003e78 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f005 fc36 	bl	80096e2 <USB_DevDisconnect>

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e80 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_PCD_Start+0x1c>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e020      	b.n	8003ede <HAL_PCD_Start+0x5e>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d109      	bne.n	8003ec0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d005      	beq.n	8003ec0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f004 fa39 	bl	800833c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f005 fbe6 	bl	80096a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ee6:	b590      	push	{r4, r7, lr}
 8003ee8:	b08d      	sub	sp, #52	; 0x34
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f005 fca4 	bl	800984a <USB_GetMode>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f040 848a 	bne.w	800481e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f005 fc08 	bl	8009724 <USB_ReadInterrupts>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 8480 	beq.w	800481c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	0a1b      	lsrs	r3, r3, #8
 8003f26:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f005 fbf5 	bl	8009724 <USB_ReadInterrupts>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d107      	bne.n	8003f54 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f002 0202 	and.w	r2, r2, #2
 8003f52:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f005 fbe3 	bl	8009724 <USB_ReadInterrupts>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d161      	bne.n	800402c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699a      	ldr	r2, [r3, #24]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0210 	bic.w	r2, r2, #16
 8003f76:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	f003 020f 	and.w	r2, r3, #15
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4413      	add	r3, r2
 8003f94:	3304      	adds	r3, #4
 8003f96:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	0c5b      	lsrs	r3, r3, #17
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d124      	bne.n	8003fee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d035      	beq.n	800401c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	6a38      	ldr	r0, [r7, #32]
 8003fc4:	f005 fa1a 	bl	80093fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	091b      	lsrs	r3, r3, #4
 8003fd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fd4:	441a      	add	r2, r3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	6a1a      	ldr	r2, [r3, #32]
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fe6:	441a      	add	r2, r3
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	621a      	str	r2, [r3, #32]
 8003fec:	e016      	b.n	800401c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	0c5b      	lsrs	r3, r3, #17
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	2b06      	cmp	r3, #6
 8003ff8:	d110      	bne.n	800401c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004000:	2208      	movs	r2, #8
 8004002:	4619      	mov	r1, r3
 8004004:	6a38      	ldr	r0, [r7, #32]
 8004006:	f005 f9f9 	bl	80093fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	6a1a      	ldr	r2, [r3, #32]
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004016:	441a      	add	r2, r3
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0210 	orr.w	r2, r2, #16
 800402a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f005 fb77 	bl	8009724 <USB_ReadInterrupts>
 8004036:	4603      	mov	r3, r0
 8004038:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800403c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004040:	f040 80a7 	bne.w	8004192 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f005 fb7c 	bl	800974a <USB_ReadDevAllOutEpInterrupt>
 8004052:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004054:	e099      	b.n	800418a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 808e 	beq.w	800417e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	4611      	mov	r1, r2
 800406c:	4618      	mov	r0, r3
 800406e:	f005 fba0 	bl	80097b2 <USB_ReadDevOutEPInterrupt>
 8004072:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00c      	beq.n	8004098 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408a:	461a      	mov	r2, r3
 800408c:	2301      	movs	r3, #1
 800408e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fec2 	bl	8004e1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00c      	beq.n	80040bc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ae:	461a      	mov	r2, r3
 80040b0:	2308      	movs	r3, #8
 80040b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80040b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 ff98 	bl	8004fec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f003 0310 	and.w	r3, r3, #16
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d2:	461a      	mov	r2, r3
 80040d4:	2310      	movs	r3, #16
 80040d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d030      	beq.n	8004144 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b80      	cmp	r3, #128	; 0x80
 80040ec:	d109      	bne.n	8004102 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	69fa      	ldr	r2, [r7, #28]
 80040f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004100:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	4413      	add	r3, r2
 8004114:	3304      	adds	r3, #4
 8004116:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	78db      	ldrb	r3, [r3, #3]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d108      	bne.n	8004132 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2200      	movs	r2, #0
 8004124:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	b2db      	uxtb	r3, r3
 800412a:	4619      	mov	r1, r3
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f007 feb7 	bl	800bea0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413e:	461a      	mov	r2, r3
 8004140:	2302      	movs	r3, #2
 8004142:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d008      	beq.n	8004160 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	4413      	add	r3, r2
 8004156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415a:	461a      	mov	r2, r3
 800415c:	2320      	movs	r3, #32
 800415e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d009      	beq.n	800417e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004176:	461a      	mov	r2, r3
 8004178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800417c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	3301      	adds	r3, #1
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	2b00      	cmp	r3, #0
 800418e:	f47f af62 	bne.w	8004056 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f005 fac4 	bl	8009724 <USB_ReadInterrupts>
 800419c:	4603      	mov	r3, r0
 800419e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041a6:	f040 80db 	bne.w	8004360 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f005 fae5 	bl	800977e <USB_ReadDevAllInEpInterrupt>
 80041b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80041ba:	e0cd      	b.n	8004358 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80041bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 80c2 	beq.w	800434c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	4611      	mov	r1, r2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f005 fb0b 	bl	80097ee <USB_ReadDevInEPInterrupt>
 80041d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d057      	beq.n	8004294 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	2201      	movs	r2, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	69f9      	ldr	r1, [r7, #28]
 8004200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004204:	4013      	ands	r3, r2
 8004206:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004214:	461a      	mov	r2, r3
 8004216:	2301      	movs	r3, #1
 8004218:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d132      	bne.n	8004288 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004226:	4613      	mov	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	440b      	add	r3, r1
 8004230:	334c      	adds	r3, #76	; 0x4c
 8004232:	6819      	ldr	r1, [r3, #0]
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004238:	4613      	mov	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4403      	add	r3, r0
 8004242:	3348      	adds	r3, #72	; 0x48
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4419      	add	r1, r3
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424c:	4613      	mov	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4403      	add	r3, r0
 8004256:	334c      	adds	r3, #76	; 0x4c
 8004258:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	2b00      	cmp	r3, #0
 800425e:	d113      	bne.n	8004288 <HAL_PCD_IRQHandler+0x3a2>
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	3354      	adds	r3, #84	; 0x54
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d108      	bne.n	8004288 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004280:	461a      	mov	r2, r3
 8004282:	2101      	movs	r1, #1
 8004284:	f005 fb12 	bl	80098ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	b2db      	uxtb	r3, r3
 800428c:	4619      	mov	r1, r3
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f007 fd81 	bl	800bd96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042aa:	461a      	mov	r2, r3
 80042ac:	2308      	movs	r3, #8
 80042ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d008      	beq.n	80042cc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c6:	461a      	mov	r2, r3
 80042c8:	2310      	movs	r3, #16
 80042ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e2:	461a      	mov	r2, r3
 80042e4:	2340      	movs	r3, #64	; 0x40
 80042e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d023      	beq.n	800433a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80042f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042f4:	6a38      	ldr	r0, [r7, #32]
 80042f6:	f004 f9f3 	bl	80086e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80042fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fc:	4613      	mov	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	3338      	adds	r3, #56	; 0x38
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	4413      	add	r3, r2
 800430a:	3304      	adds	r3, #4
 800430c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	78db      	ldrb	r3, [r3, #3]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d108      	bne.n	8004328 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2200      	movs	r2, #0
 800431a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	b2db      	uxtb	r3, r3
 8004320:	4619      	mov	r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f007 fdce 	bl	800bec4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004334:	461a      	mov	r2, r3
 8004336:	2302      	movs	r3, #2
 8004338:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004344:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fcdb 	bl	8004d02 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	3301      	adds	r3, #1
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	2b00      	cmp	r3, #0
 800435c:	f47f af2e 	bne.w	80041bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f005 f9dd 	bl	8009724 <USB_ReadInterrupts>
 800436a:	4603      	mov	r3, r0
 800436c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004374:	d122      	bne.n	80043bc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	69fa      	ldr	r2, [r7, #28]
 8004380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004390:	2b01      	cmp	r3, #1
 8004392:	d108      	bne.n	80043a6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800439c:	2100      	movs	r1, #0
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fec2 	bl	8005128 <HAL_PCDEx_LPM_Callback>
 80043a4:	e002      	b.n	80043ac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f007 fd6c 	bl	800be84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80043ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f005 f9af 	bl	8009724 <USB_ReadInterrupts>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d0:	d112      	bne.n	80043f8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d102      	bne.n	80043e8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f007 fd28 	bl	800be38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80043f6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f005 f991 	bl	8009724 <USB_ReadInterrupts>
 8004402:	4603      	mov	r3, r0
 8004404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440c:	f040 80b7 	bne.w	800457e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	69fa      	ldr	r2, [r7, #28]
 800441a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2110      	movs	r1, #16
 800442a:	4618      	mov	r0, r3
 800442c:	f004 f958 	bl	80086e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004430:	2300      	movs	r3, #0
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004434:	e046      	b.n	80044c4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004442:	461a      	mov	r2, r3
 8004444:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004448:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800444a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800445a:	0151      	lsls	r1, r2, #5
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	440a      	add	r2, r1
 8004460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004464:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004468:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004476:	461a      	mov	r2, r3
 8004478:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800447c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800448e:	0151      	lsls	r1, r2, #5
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	440a      	add	r2, r1
 8004494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004498:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800449c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800449e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ae:	0151      	lsls	r1, r2, #5
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	440a      	add	r2, r1
 80044b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c0:	3301      	adds	r3, #1
 80044c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d3b3      	bcc.n	8004436 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	69fa      	ldr	r2, [r7, #28]
 80044d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80044e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d016      	beq.n	8004518 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044fa:	f043 030b 	orr.w	r3, r3, #11
 80044fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004510:	f043 030b 	orr.w	r3, r3, #11
 8004514:	6453      	str	r3, [r2, #68]	; 0x44
 8004516:	e015      	b.n	8004544 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004526:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800452a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800452e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800453e:	f043 030b 	orr.w	r3, r3, #11
 8004542:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004552:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004556:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6818      	ldr	r0, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004568:	461a      	mov	r2, r3
 800456a:	f005 f99f 	bl	80098ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800457c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f005 f8ce 	bl	8009724 <USB_ReadInterrupts>
 8004588:	4603      	mov	r3, r0
 800458a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800458e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004592:	d124      	bne.n	80045de <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f005 f964 	bl	8009866 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f004 f919 	bl	80087da <USB_GetDevSpeed>
 80045a8:	4603      	mov	r3, r0
 80045aa:	461a      	mov	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681c      	ldr	r4, [r3, #0]
 80045b4:	f001 fa28 	bl	8005a08 <HAL_RCC_GetHCLKFreq>
 80045b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	4620      	mov	r0, r4
 80045c4:	f003 fe18 	bl	80081f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f007 fc0c 	bl	800bde6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695a      	ldr	r2, [r3, #20]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80045dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f005 f89e 	bl	8009724 <USB_ReadInterrupts>
 80045e8:	4603      	mov	r3, r0
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d10a      	bne.n	8004608 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f007 fbe9 	bl	800bdca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695a      	ldr	r2, [r3, #20]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f002 0208 	and.w	r2, r2, #8
 8004606:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f005 f889 	bl	8009724 <USB_ReadInterrupts>
 8004612:	4603      	mov	r3, r0
 8004614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004618:	2b80      	cmp	r3, #128	; 0x80
 800461a:	d122      	bne.n	8004662 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004628:	2301      	movs	r3, #1
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
 800462c:	e014      	b.n	8004658 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004632:	4613      	mov	r3, r2
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d105      	bne.n	8004652 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	b2db      	uxtb	r3, r3
 800464a:	4619      	mov	r1, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fb27 	bl	8004ca0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	3301      	adds	r3, #1
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465e:	429a      	cmp	r2, r3
 8004660:	d3e5      	bcc.n	800462e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f005 f85c 	bl	8009724 <USB_ReadInterrupts>
 800466c:	4603      	mov	r3, r0
 800466e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004676:	d13b      	bne.n	80046f0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004678:	2301      	movs	r3, #1
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
 800467c:	e02b      	b.n	80046d6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004692:	4613      	mov	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	3340      	adds	r3, #64	; 0x40
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d115      	bne.n	80046d0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80046a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	da12      	bge.n	80046d0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ae:	4613      	mov	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	333f      	adds	r3, #63	; 0x3f
 80046ba:	2201      	movs	r2, #1
 80046bc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	4619      	mov	r1, r3
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fae8 	bl	8004ca0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	3301      	adds	r3, #1
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046dc:	429a      	cmp	r2, r3
 80046de:	d3ce      	bcc.n	800467e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80046ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f005 f815 	bl	8009724 <USB_ReadInterrupts>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004700:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004704:	d155      	bne.n	80047b2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004706:	2301      	movs	r3, #1
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
 800470a:	e045      	b.n	8004798 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004720:	4613      	mov	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d12e      	bne.n	8004792 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004734:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004736:	2b00      	cmp	r3, #0
 8004738:	da2b      	bge.n	8004792 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004746:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800474a:	429a      	cmp	r2, r3
 800474c:	d121      	bne.n	8004792 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004752:	4613      	mov	r3, r2
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004760:	2201      	movs	r2, #1
 8004762:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800478a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800478e:	6053      	str	r3, [r2, #4]
            break;
 8004790:	e007      	b.n	80047a2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	3301      	adds	r3, #1
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479e:	429a      	cmp	r2, r3
 80047a0:	d3b4      	bcc.n	800470c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695a      	ldr	r2, [r3, #20]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80047b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f004 ffb4 	bl	8009724 <USB_ReadInterrupts>
 80047bc:	4603      	mov	r3, r0
 80047be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c6:	d10a      	bne.n	80047de <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f007 fb8d 	bl	800bee8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695a      	ldr	r2, [r3, #20]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80047dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f004 ff9e 	bl	8009724 <USB_ReadInterrupts>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d115      	bne.n	800481e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f007 fb7d 	bl	800bf04 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6859      	ldr	r1, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	e000      	b.n	800481e <HAL_PCD_IRQHandler+0x938>
      return;
 800481c:	bf00      	nop
    }
  }
}
 800481e:	3734      	adds	r7, #52	; 0x34
 8004820:	46bd      	mov	sp, r7
 8004822:	bd90      	pop	{r4, r7, pc}

08004824 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_PCD_SetAddress+0x1a>
 800483a:	2302      	movs	r3, #2
 800483c:	e013      	b.n	8004866 <HAL_PCD_SetAddress+0x42>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	78fa      	ldrb	r2, [r7, #3]
 8004854:	4611      	mov	r1, r2
 8004856:	4618      	mov	r0, r3
 8004858:	f004 fefc 	bl	8009654 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	4608      	mov	r0, r1
 8004878:	4611      	mov	r1, r2
 800487a:	461a      	mov	r2, r3
 800487c:	4603      	mov	r3, r0
 800487e:	70fb      	strb	r3, [r7, #3]
 8004880:	460b      	mov	r3, r1
 8004882:	803b      	strh	r3, [r7, #0]
 8004884:	4613      	mov	r3, r2
 8004886:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800488c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004890:	2b00      	cmp	r3, #0
 8004892:	da0f      	bge.n	80048b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	f003 020f 	and.w	r2, r3, #15
 800489a:	4613      	mov	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4413      	add	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	3338      	adds	r3, #56	; 0x38
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	4413      	add	r3, r2
 80048a8:	3304      	adds	r3, #4
 80048aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	705a      	strb	r2, [r3, #1]
 80048b2:	e00f      	b.n	80048d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	f003 020f 	and.w	r2, r3, #15
 80048ba:	4613      	mov	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	4413      	add	r3, r2
 80048ca:	3304      	adds	r3, #4
 80048cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80048e0:	883a      	ldrh	r2, [r7, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	78ba      	ldrb	r2, [r7, #2]
 80048ea:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	785b      	ldrb	r3, [r3, #1]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80048fe:	78bb      	ldrb	r3, [r7, #2]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d102      	bne.n	800490a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_PCD_EP_Open+0xaa>
 8004914:	2302      	movs	r3, #2
 8004916:	e00e      	b.n	8004936 <HAL_PCD_EP_Open+0xc8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68f9      	ldr	r1, [r7, #12]
 8004926:	4618      	mov	r0, r3
 8004928:	f003 ff7c 	bl	8008824 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004934:	7afb      	ldrb	r3, [r7, #11]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	460b      	mov	r3, r1
 8004948:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800494a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800494e:	2b00      	cmp	r3, #0
 8004950:	da0f      	bge.n	8004972 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	f003 020f 	and.w	r2, r3, #15
 8004958:	4613      	mov	r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	4413      	add	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	3338      	adds	r3, #56	; 0x38
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	4413      	add	r3, r2
 8004966:	3304      	adds	r3, #4
 8004968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	705a      	strb	r2, [r3, #1]
 8004970:	e00f      	b.n	8004992 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	f003 020f 	and.w	r2, r3, #15
 8004978:	4613      	mov	r3, r2
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4413      	add	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	4413      	add	r3, r2
 8004988:	3304      	adds	r3, #4
 800498a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004992:	78fb      	ldrb	r3, [r7, #3]
 8004994:	f003 030f 	and.w	r3, r3, #15
 8004998:	b2da      	uxtb	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_PCD_EP_Close+0x6e>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e00e      	b.n	80049ca <HAL_PCD_EP_Close+0x8c>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68f9      	ldr	r1, [r7, #12]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f003 ffba 	bl	8008934 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b086      	sub	sp, #24
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	603b      	str	r3, [r7, #0]
 80049de:	460b      	mov	r3, r1
 80049e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049e2:	7afb      	ldrb	r3, [r7, #11]
 80049e4:	f003 020f 	and.w	r2, r3, #15
 80049e8:	4613      	mov	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	4413      	add	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	3304      	adds	r3, #4
 80049fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2200      	movs	r2, #0
 8004a12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a14:	7afb      	ldrb	r3, [r7, #11]
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d102      	bne.n	8004a2e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a2e:	7afb      	ldrb	r3, [r7, #11]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d109      	bne.n	8004a4c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	6979      	ldr	r1, [r7, #20]
 8004a46:	f004 fa99 	bl	8008f7c <USB_EP0StartXfer>
 8004a4a:	e008      	b.n	8004a5e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	6979      	ldr	r1, [r7, #20]
 8004a5a:	f004 f847 	bl	8008aec <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	f003 020f 	and.w	r2, r3, #15
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004a8a:	681b      	ldr	r3, [r3, #0]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	607a      	str	r2, [r7, #4]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aa8:	7afb      	ldrb	r3, [r7, #11]
 8004aaa:	f003 020f 	and.w	r2, r3, #15
 8004aae:	4613      	mov	r3, r2
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	3338      	adds	r3, #56	; 0x38
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	3304      	adds	r3, #4
 8004abe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ad8:	7afb      	ldrb	r3, [r7, #11]
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d102      	bne.n	8004af2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004af2:	7afb      	ldrb	r3, [r7, #11]
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d109      	bne.n	8004b10 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6818      	ldr	r0, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	461a      	mov	r2, r3
 8004b08:	6979      	ldr	r1, [r7, #20]
 8004b0a:	f004 fa37 	bl	8008f7c <USB_EP0StartXfer>
 8004b0e:	e008      	b.n	8004b22 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6818      	ldr	r0, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	6979      	ldr	r1, [r7, #20]
 8004b1e:	f003 ffe5 	bl	8008aec <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	f003 020f 	and.w	r2, r3, #15
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d901      	bls.n	8004b4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e050      	b.n	8004bec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	da0f      	bge.n	8004b72 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	f003 020f 	and.w	r2, r3, #15
 8004b58:	4613      	mov	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	3338      	adds	r3, #56	; 0x38
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	4413      	add	r3, r2
 8004b66:	3304      	adds	r3, #4
 8004b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	705a      	strb	r2, [r3, #1]
 8004b70:	e00d      	b.n	8004b8e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b72:	78fa      	ldrb	r2, [r7, #3]
 8004b74:	4613      	mov	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	4413      	add	r3, r2
 8004b84:	3304      	adds	r3, #4
 8004b86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_PCD_EP_SetStall+0x82>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e01e      	b.n	8004bec <HAL_PCD_EP_SetStall+0xc0>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68f9      	ldr	r1, [r7, #12]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f004 fc75 	bl	80094ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	f003 030f 	and.w	r3, r3, #15
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6818      	ldr	r0, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	b2d9      	uxtb	r1, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f004 fe65 	bl	80098ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	f003 020f 	and.w	r2, r3, #15
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d901      	bls.n	8004c12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e042      	b.n	8004c98 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	da0f      	bge.n	8004c3a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	f003 020f 	and.w	r2, r3, #15
 8004c20:	4613      	mov	r3, r2
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	3338      	adds	r3, #56	; 0x38
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3304      	adds	r3, #4
 8004c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	705a      	strb	r2, [r3, #1]
 8004c38:	e00f      	b.n	8004c5a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	f003 020f 	and.w	r2, r3, #15
 8004c40:	4613      	mov	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	4413      	add	r3, r2
 8004c50:	3304      	adds	r3, #4
 8004c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_PCD_EP_ClrStall+0x86>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e00e      	b.n	8004c98 <HAL_PCD_EP_ClrStall+0xa4>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68f9      	ldr	r1, [r7, #12]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f004 fc7d 	bl	8009588 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	da0c      	bge.n	8004cce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	f003 020f 	and.w	r2, r3, #15
 8004cba:	4613      	mov	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	3338      	adds	r3, #56	; 0x38
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	3304      	adds	r3, #4
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	e00c      	b.n	8004ce8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cce:	78fb      	ldrb	r3, [r7, #3]
 8004cd0:	f003 020f 	and.w	r2, r3, #15
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68f9      	ldr	r1, [r7, #12]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f004 fa9c 	bl	800922c <USB_EPStopXfer>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004cf8:	7afb      	ldrb	r3, [r7, #11]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b08a      	sub	sp, #40	; 0x28
 8004d06:	af02      	add	r7, sp, #8
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	3338      	adds	r3, #56	; 0x38
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	4413      	add	r3, r2
 8004d26:	3304      	adds	r3, #4
 8004d28:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a1a      	ldr	r2, [r3, #32]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d901      	bls.n	8004d3a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e06c      	b.n	8004e14 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d902      	bls.n	8004d56 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	3303      	adds	r3, #3
 8004d5a:	089b      	lsrs	r3, r3, #2
 8004d5c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d5e:	e02b      	b.n	8004db8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	699a      	ldr	r2, [r3, #24]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d902      	bls.n	8004d7c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	3303      	adds	r3, #3
 8004d80:	089b      	lsrs	r3, r3, #2
 8004d82:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6919      	ldr	r1, [r3, #16]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	4603      	mov	r3, r0
 8004d9a:	6978      	ldr	r0, [r7, #20]
 8004d9c:	f004 faf0 	bl	8009380 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	441a      	add	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a1a      	ldr	r2, [r3, #32]
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	441a      	add	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d809      	bhi.n	8004de2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a1a      	ldr	r2, [r3, #32]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d203      	bcs.n	8004de2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1be      	bne.n	8004d60 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d811      	bhi.n	8004e12 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	f003 030f 	and.w	r3, r3, #15
 8004df4:	2201      	movs	r2, #1
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	43db      	mvns	r3, r3
 8004e08:	6939      	ldr	r1, [r7, #16]
 8004e0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e0e:	4013      	ands	r3, r2
 8004e10:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3720      	adds	r7, #32
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	333c      	adds	r3, #60	; 0x3c
 8004e34:	3304      	adds	r3, #4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d17b      	bne.n	8004f4a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d015      	beq.n	8004e88 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	4a61      	ldr	r2, [pc, #388]	; (8004fe4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	f240 80b9 	bls.w	8004fd8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 80b3 	beq.w	8004fd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e84:	6093      	str	r3, [r2, #8]
 8004e86:	e0a7      	b.n	8004fd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	2320      	movs	r3, #32
 8004ea2:	6093      	str	r3, [r2, #8]
 8004ea4:	e098      	b.n	8004fd8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f040 8093 	bne.w	8004fd8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	4a4b      	ldr	r2, [pc, #300]	; (8004fe4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d90f      	bls.n	8004eda <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ed6:	6093      	str	r3, [r2, #8]
 8004ed8:	e07e      	b.n	8004fd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	4613      	mov	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	4413      	add	r3, r2
 8004eec:	3304      	adds	r3, #4
 8004eee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	0159      	lsls	r1, r3, #5
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	440b      	add	r3, r1
 8004efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f06:	1ad2      	subs	r2, r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d114      	bne.n	8004f3c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d109      	bne.n	8004f2e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f24:	461a      	mov	r2, r3
 8004f26:	2101      	movs	r1, #1
 8004f28:	f004 fcc0 	bl	80098ac <USB_EP0_OutStart>
 8004f2c:	e006      	b.n	8004f3c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	441a      	add	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	4619      	mov	r1, r3
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f006 ff0c 	bl	800bd60 <HAL_PCD_DataOutStageCallback>
 8004f48:	e046      	b.n	8004fd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	4a26      	ldr	r2, [pc, #152]	; (8004fe8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d124      	bne.n	8004f9c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f68:	461a      	mov	r2, r3
 8004f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f6e:	6093      	str	r3, [r2, #8]
 8004f70:	e032      	b.n	8004fd8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f003 0320 	and.w	r3, r3, #32
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f88:	461a      	mov	r2, r3
 8004f8a:	2320      	movs	r3, #32
 8004f8c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	4619      	mov	r1, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f006 fee3 	bl	800bd60 <HAL_PCD_DataOutStageCallback>
 8004f9a:	e01d      	b.n	8004fd8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d114      	bne.n	8004fcc <PCD_EP_OutXfrComplete_int+0x1b0>
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
 8004fb0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d108      	bne.n	8004fcc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	f004 fc70 	bl	80098ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f006 fec4 	bl	800bd60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	4f54300a 	.word	0x4f54300a
 8004fe8:	4f54310a 	.word	0x4f54310a

08004fec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	333c      	adds	r3, #60	; 0x3c
 8005004:	3304      	adds	r3, #4
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4a15      	ldr	r2, [pc, #84]	; (8005074 <PCD_EP_OutSetupPacket_int+0x88>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d90e      	bls.n	8005040 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005028:	2b00      	cmp	r3, #0
 800502a:	d009      	beq.n	8005040 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005038:	461a      	mov	r2, r3
 800503a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800503e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f006 fe7b 	bl	800bd3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4a0a      	ldr	r2, [pc, #40]	; (8005074 <PCD_EP_OutSetupPacket_int+0x88>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d90c      	bls.n	8005068 <PCD_EP_OutSetupPacket_int+0x7c>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d108      	bne.n	8005068 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005060:	461a      	mov	r2, r3
 8005062:	2101      	movs	r1, #1
 8005064:	f004 fc22 	bl	80098ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	4f54300a 	.word	0x4f54300a

08005078 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	70fb      	strb	r3, [r7, #3]
 8005084:	4613      	mov	r3, r2
 8005086:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d107      	bne.n	80050a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005096:	883b      	ldrh	r3, [r7, #0]
 8005098:	0419      	lsls	r1, r3, #16
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	629a      	str	r2, [r3, #40]	; 0x28
 80050a4:	e028      	b.n	80050f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	0c1b      	lsrs	r3, r3, #16
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	4413      	add	r3, r2
 80050b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80050b4:	2300      	movs	r3, #0
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	e00d      	b.n	80050d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	7bfb      	ldrb	r3, [r7, #15]
 80050c0:	3340      	adds	r3, #64	; 0x40
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	0c1b      	lsrs	r3, r3, #16
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	4413      	add	r3, r2
 80050ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	3301      	adds	r3, #1
 80050d4:	73fb      	strb	r3, [r7, #15]
 80050d6:	7bfa      	ldrb	r2, [r7, #15]
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	3b01      	subs	r3, #1
 80050dc:	429a      	cmp	r2, r3
 80050de:	d3ec      	bcc.n	80050ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80050e0:	883b      	ldrh	r3, [r7, #0]
 80050e2:	0418      	lsls	r0, r3, #16
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6819      	ldr	r1, [r3, #0]
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	4302      	orrs	r2, r0
 80050f0:	3340      	adds	r3, #64	; 0x40
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	460b      	mov	r3, r1
 8005110:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	887a      	ldrh	r2, [r7, #2]
 8005118:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e267      	b.n	8005622 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d075      	beq.n	800524a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800515e:	4b88      	ldr	r3, [pc, #544]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 030c 	and.w	r3, r3, #12
 8005166:	2b04      	cmp	r3, #4
 8005168:	d00c      	beq.n	8005184 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800516a:	4b85      	ldr	r3, [pc, #532]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005172:	2b08      	cmp	r3, #8
 8005174:	d112      	bne.n	800519c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005176:	4b82      	ldr	r3, [pc, #520]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800517e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005182:	d10b      	bne.n	800519c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005184:	4b7e      	ldr	r3, [pc, #504]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d05b      	beq.n	8005248 <HAL_RCC_OscConfig+0x108>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d157      	bne.n	8005248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e242      	b.n	8005622 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a4:	d106      	bne.n	80051b4 <HAL_RCC_OscConfig+0x74>
 80051a6:	4b76      	ldr	r3, [pc, #472]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a75      	ldr	r2, [pc, #468]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 80051ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	e01d      	b.n	80051f0 <HAL_RCC_OscConfig+0xb0>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051bc:	d10c      	bne.n	80051d8 <HAL_RCC_OscConfig+0x98>
 80051be:	4b70      	ldr	r3, [pc, #448]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a6f      	ldr	r2, [pc, #444]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 80051c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	4b6d      	ldr	r3, [pc, #436]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a6c      	ldr	r2, [pc, #432]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 80051d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	e00b      	b.n	80051f0 <HAL_RCC_OscConfig+0xb0>
 80051d8:	4b69      	ldr	r3, [pc, #420]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a68      	ldr	r2, [pc, #416]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 80051de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	4b66      	ldr	r3, [pc, #408]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a65      	ldr	r2, [pc, #404]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 80051ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d013      	beq.n	8005220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f8:	f7fc f860 	bl	80012bc <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005200:	f7fc f85c 	bl	80012bc <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b64      	cmp	r3, #100	; 0x64
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e207      	b.n	8005622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005212:	4b5b      	ldr	r3, [pc, #364]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0xc0>
 800521e:	e014      	b.n	800524a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005220:	f7fc f84c 	bl	80012bc <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005228:	f7fc f848 	bl	80012bc <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b64      	cmp	r3, #100	; 0x64
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e1f3      	b.n	8005622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800523a:	4b51      	ldr	r3, [pc, #324]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f0      	bne.n	8005228 <HAL_RCC_OscConfig+0xe8>
 8005246:	e000      	b.n	800524a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d063      	beq.n	800531e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005256:	4b4a      	ldr	r3, [pc, #296]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 030c 	and.w	r3, r3, #12
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00b      	beq.n	800527a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005262:	4b47      	ldr	r3, [pc, #284]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800526a:	2b08      	cmp	r3, #8
 800526c:	d11c      	bne.n	80052a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800526e:	4b44      	ldr	r3, [pc, #272]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d116      	bne.n	80052a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800527a:	4b41      	ldr	r3, [pc, #260]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <HAL_RCC_OscConfig+0x152>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d001      	beq.n	8005292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e1c7      	b.n	8005622 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005292:	4b3b      	ldr	r3, [pc, #236]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	4937      	ldr	r1, [pc, #220]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052a6:	e03a      	b.n	800531e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d020      	beq.n	80052f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052b0:	4b34      	ldr	r3, [pc, #208]	; (8005384 <HAL_RCC_OscConfig+0x244>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b6:	f7fc f801 	bl	80012bc <HAL_GetTick>
 80052ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052be:	f7fb fffd 	bl	80012bc <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e1a8      	b.n	8005622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d0:	4b2b      	ldr	r3, [pc, #172]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0f0      	beq.n	80052be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052dc:	4b28      	ldr	r3, [pc, #160]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	4925      	ldr	r1, [pc, #148]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	600b      	str	r3, [r1, #0]
 80052f0:	e015      	b.n	800531e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052f2:	4b24      	ldr	r3, [pc, #144]	; (8005384 <HAL_RCC_OscConfig+0x244>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f8:	f7fb ffe0 	bl	80012bc <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005300:	f7fb ffdc 	bl	80012bc <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e187      	b.n	8005622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005312:	4b1b      	ldr	r3, [pc, #108]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d036      	beq.n	8005398 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d016      	beq.n	8005360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005332:	4b15      	ldr	r3, [pc, #84]	; (8005388 <HAL_RCC_OscConfig+0x248>)
 8005334:	2201      	movs	r2, #1
 8005336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005338:	f7fb ffc0 	bl	80012bc <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005340:	f7fb ffbc 	bl	80012bc <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e167      	b.n	8005622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005352:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <HAL_RCC_OscConfig+0x240>)
 8005354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f0      	beq.n	8005340 <HAL_RCC_OscConfig+0x200>
 800535e:	e01b      	b.n	8005398 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005360:	4b09      	ldr	r3, [pc, #36]	; (8005388 <HAL_RCC_OscConfig+0x248>)
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005366:	f7fb ffa9 	bl	80012bc <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800536c:	e00e      	b.n	800538c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800536e:	f7fb ffa5 	bl	80012bc <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d907      	bls.n	800538c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e150      	b.n	8005622 <HAL_RCC_OscConfig+0x4e2>
 8005380:	40023800 	.word	0x40023800
 8005384:	42470000 	.word	0x42470000
 8005388:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800538c:	4b88      	ldr	r3, [pc, #544]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 800538e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1ea      	bne.n	800536e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 8097 	beq.w	80054d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053a6:	2300      	movs	r3, #0
 80053a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053aa:	4b81      	ldr	r3, [pc, #516]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10f      	bne.n	80053d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053b6:	2300      	movs	r3, #0
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	4b7d      	ldr	r3, [pc, #500]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	4a7c      	ldr	r2, [pc, #496]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 80053c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c4:	6413      	str	r3, [r2, #64]	; 0x40
 80053c6:	4b7a      	ldr	r3, [pc, #488]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ce:	60bb      	str	r3, [r7, #8]
 80053d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053d2:	2301      	movs	r3, #1
 80053d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d6:	4b77      	ldr	r3, [pc, #476]	; (80055b4 <HAL_RCC_OscConfig+0x474>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d118      	bne.n	8005414 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053e2:	4b74      	ldr	r3, [pc, #464]	; (80055b4 <HAL_RCC_OscConfig+0x474>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a73      	ldr	r2, [pc, #460]	; (80055b4 <HAL_RCC_OscConfig+0x474>)
 80053e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ee:	f7fb ff65 	bl	80012bc <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053f6:	f7fb ff61 	bl	80012bc <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e10c      	b.n	8005622 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005408:	4b6a      	ldr	r3, [pc, #424]	; (80055b4 <HAL_RCC_OscConfig+0x474>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0f0      	beq.n	80053f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d106      	bne.n	800542a <HAL_RCC_OscConfig+0x2ea>
 800541c:	4b64      	ldr	r3, [pc, #400]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 800541e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005420:	4a63      	ldr	r2, [pc, #396]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 8005422:	f043 0301 	orr.w	r3, r3, #1
 8005426:	6713      	str	r3, [r2, #112]	; 0x70
 8005428:	e01c      	b.n	8005464 <HAL_RCC_OscConfig+0x324>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	2b05      	cmp	r3, #5
 8005430:	d10c      	bne.n	800544c <HAL_RCC_OscConfig+0x30c>
 8005432:	4b5f      	ldr	r3, [pc, #380]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 8005434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005436:	4a5e      	ldr	r2, [pc, #376]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 8005438:	f043 0304 	orr.w	r3, r3, #4
 800543c:	6713      	str	r3, [r2, #112]	; 0x70
 800543e:	4b5c      	ldr	r3, [pc, #368]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	4a5b      	ldr	r2, [pc, #364]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 8005444:	f043 0301 	orr.w	r3, r3, #1
 8005448:	6713      	str	r3, [r2, #112]	; 0x70
 800544a:	e00b      	b.n	8005464 <HAL_RCC_OscConfig+0x324>
 800544c:	4b58      	ldr	r3, [pc, #352]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 800544e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005450:	4a57      	ldr	r2, [pc, #348]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 8005452:	f023 0301 	bic.w	r3, r3, #1
 8005456:	6713      	str	r3, [r2, #112]	; 0x70
 8005458:	4b55      	ldr	r3, [pc, #340]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 800545a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545c:	4a54      	ldr	r2, [pc, #336]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 800545e:	f023 0304 	bic.w	r3, r3, #4
 8005462:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d015      	beq.n	8005498 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800546c:	f7fb ff26 	bl	80012bc <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005472:	e00a      	b.n	800548a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005474:	f7fb ff22 	bl	80012bc <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e0cb      	b.n	8005622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800548a:	4b49      	ldr	r3, [pc, #292]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 800548c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0ee      	beq.n	8005474 <HAL_RCC_OscConfig+0x334>
 8005496:	e014      	b.n	80054c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005498:	f7fb ff10 	bl	80012bc <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800549e:	e00a      	b.n	80054b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054a0:	f7fb ff0c 	bl	80012bc <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e0b5      	b.n	8005622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054b6:	4b3e      	ldr	r3, [pc, #248]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 80054b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1ee      	bne.n	80054a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d105      	bne.n	80054d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054c8:	4b39      	ldr	r3, [pc, #228]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	4a38      	ldr	r2, [pc, #224]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 80054ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 80a1 	beq.w	8005620 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054de:	4b34      	ldr	r3, [pc, #208]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 030c 	and.w	r3, r3, #12
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d05c      	beq.n	80055a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d141      	bne.n	8005576 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f2:	4b31      	ldr	r3, [pc, #196]	; (80055b8 <HAL_RCC_OscConfig+0x478>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f8:	f7fb fee0 	bl	80012bc <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005500:	f7fb fedc 	bl	80012bc <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e087      	b.n	8005622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005512:	4b27      	ldr	r3, [pc, #156]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f0      	bne.n	8005500 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69da      	ldr	r2, [r3, #28]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	019b      	lsls	r3, r3, #6
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	085b      	lsrs	r3, r3, #1
 8005536:	3b01      	subs	r3, #1
 8005538:	041b      	lsls	r3, r3, #16
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	061b      	lsls	r3, r3, #24
 8005542:	491b      	ldr	r1, [pc, #108]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 8005544:	4313      	orrs	r3, r2
 8005546:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005548:	4b1b      	ldr	r3, [pc, #108]	; (80055b8 <HAL_RCC_OscConfig+0x478>)
 800554a:	2201      	movs	r2, #1
 800554c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554e:	f7fb feb5 	bl	80012bc <HAL_GetTick>
 8005552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005554:	e008      	b.n	8005568 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005556:	f7fb feb1 	bl	80012bc <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e05c      	b.n	8005622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005568:	4b11      	ldr	r3, [pc, #68]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0f0      	beq.n	8005556 <HAL_RCC_OscConfig+0x416>
 8005574:	e054      	b.n	8005620 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005576:	4b10      	ldr	r3, [pc, #64]	; (80055b8 <HAL_RCC_OscConfig+0x478>)
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800557c:	f7fb fe9e 	bl	80012bc <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005584:	f7fb fe9a 	bl	80012bc <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e045      	b.n	8005622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005596:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <HAL_RCC_OscConfig+0x470>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f0      	bne.n	8005584 <HAL_RCC_OscConfig+0x444>
 80055a2:	e03d      	b.n	8005620 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d107      	bne.n	80055bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e038      	b.n	8005622 <HAL_RCC_OscConfig+0x4e2>
 80055b0:	40023800 	.word	0x40023800
 80055b4:	40007000 	.word	0x40007000
 80055b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055bc:	4b1b      	ldr	r3, [pc, #108]	; (800562c <HAL_RCC_OscConfig+0x4ec>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d028      	beq.n	800561c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d121      	bne.n	800561c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d11a      	bne.n	800561c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055ec:	4013      	ands	r3, r2
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d111      	bne.n	800561c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005602:	085b      	lsrs	r3, r3, #1
 8005604:	3b01      	subs	r3, #1
 8005606:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005608:	429a      	cmp	r2, r3
 800560a:	d107      	bne.n	800561c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005616:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005618:	429a      	cmp	r2, r3
 800561a:	d001      	beq.n	8005620 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	40023800 	.word	0x40023800

08005630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e0cc      	b.n	80057de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005644:	4b68      	ldr	r3, [pc, #416]	; (80057e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d90c      	bls.n	800566c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005652:	4b65      	ldr	r3, [pc, #404]	; (80057e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800565a:	4b63      	ldr	r3, [pc, #396]	; (80057e8 <HAL_RCC_ClockConfig+0x1b8>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d001      	beq.n	800566c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e0b8      	b.n	80057de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d020      	beq.n	80056ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d005      	beq.n	8005690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005684:	4b59      	ldr	r3, [pc, #356]	; (80057ec <HAL_RCC_ClockConfig+0x1bc>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	4a58      	ldr	r2, [pc, #352]	; (80057ec <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800568e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b00      	cmp	r3, #0
 800569a:	d005      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800569c:	4b53      	ldr	r3, [pc, #332]	; (80057ec <HAL_RCC_ClockConfig+0x1bc>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	4a52      	ldr	r2, [pc, #328]	; (80057ec <HAL_RCC_ClockConfig+0x1bc>)
 80056a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056a8:	4b50      	ldr	r3, [pc, #320]	; (80057ec <HAL_RCC_ClockConfig+0x1bc>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	494d      	ldr	r1, [pc, #308]	; (80057ec <HAL_RCC_ClockConfig+0x1bc>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d044      	beq.n	8005750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d107      	bne.n	80056de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ce:	4b47      	ldr	r3, [pc, #284]	; (80057ec <HAL_RCC_ClockConfig+0x1bc>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d119      	bne.n	800570e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e07f      	b.n	80057de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d003      	beq.n	80056ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d107      	bne.n	80056fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ee:	4b3f      	ldr	r3, [pc, #252]	; (80057ec <HAL_RCC_ClockConfig+0x1bc>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d109      	bne.n	800570e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e06f      	b.n	80057de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056fe:	4b3b      	ldr	r3, [pc, #236]	; (80057ec <HAL_RCC_ClockConfig+0x1bc>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e067      	b.n	80057de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800570e:	4b37      	ldr	r3, [pc, #220]	; (80057ec <HAL_RCC_ClockConfig+0x1bc>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f023 0203 	bic.w	r2, r3, #3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	4934      	ldr	r1, [pc, #208]	; (80057ec <HAL_RCC_ClockConfig+0x1bc>)
 800571c:	4313      	orrs	r3, r2
 800571e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005720:	f7fb fdcc 	bl	80012bc <HAL_GetTick>
 8005724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005726:	e00a      	b.n	800573e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005728:	f7fb fdc8 	bl	80012bc <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	f241 3288 	movw	r2, #5000	; 0x1388
 8005736:	4293      	cmp	r3, r2
 8005738:	d901      	bls.n	800573e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e04f      	b.n	80057de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800573e:	4b2b      	ldr	r3, [pc, #172]	; (80057ec <HAL_RCC_ClockConfig+0x1bc>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f003 020c 	and.w	r2, r3, #12
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	429a      	cmp	r2, r3
 800574e:	d1eb      	bne.n	8005728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005750:	4b25      	ldr	r3, [pc, #148]	; (80057e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	429a      	cmp	r2, r3
 800575c:	d20c      	bcs.n	8005778 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800575e:	4b22      	ldr	r3, [pc, #136]	; (80057e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005766:	4b20      	ldr	r3, [pc, #128]	; (80057e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d001      	beq.n	8005778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e032      	b.n	80057de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d008      	beq.n	8005796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005784:	4b19      	ldr	r3, [pc, #100]	; (80057ec <HAL_RCC_ClockConfig+0x1bc>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4916      	ldr	r1, [pc, #88]	; (80057ec <HAL_RCC_ClockConfig+0x1bc>)
 8005792:	4313      	orrs	r3, r2
 8005794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d009      	beq.n	80057b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057a2:	4b12      	ldr	r3, [pc, #72]	; (80057ec <HAL_RCC_ClockConfig+0x1bc>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	490e      	ldr	r1, [pc, #56]	; (80057ec <HAL_RCC_ClockConfig+0x1bc>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057b6:	f000 f821 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 80057ba:	4602      	mov	r2, r0
 80057bc:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <HAL_RCC_ClockConfig+0x1bc>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	091b      	lsrs	r3, r3, #4
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	490a      	ldr	r1, [pc, #40]	; (80057f0 <HAL_RCC_ClockConfig+0x1c0>)
 80057c8:	5ccb      	ldrb	r3, [r1, r3]
 80057ca:	fa22 f303 	lsr.w	r3, r2, r3
 80057ce:	4a09      	ldr	r2, [pc, #36]	; (80057f4 <HAL_RCC_ClockConfig+0x1c4>)
 80057d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057d2:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <HAL_RCC_ClockConfig+0x1c8>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fb fd2c 	bl	8001234 <HAL_InitTick>

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40023c00 	.word	0x40023c00
 80057ec:	40023800 	.word	0x40023800
 80057f0:	0800c374 	.word	0x0800c374
 80057f4:	20000000 	.word	0x20000000
 80057f8:	20000004 	.word	0x20000004

080057fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005800:	b094      	sub	sp, #80	; 0x50
 8005802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	647b      	str	r3, [r7, #68]	; 0x44
 8005808:	2300      	movs	r3, #0
 800580a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800580c:	2300      	movs	r3, #0
 800580e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005814:	4b79      	ldr	r3, [pc, #484]	; (80059fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 030c 	and.w	r3, r3, #12
 800581c:	2b08      	cmp	r3, #8
 800581e:	d00d      	beq.n	800583c <HAL_RCC_GetSysClockFreq+0x40>
 8005820:	2b08      	cmp	r3, #8
 8005822:	f200 80e1 	bhi.w	80059e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <HAL_RCC_GetSysClockFreq+0x34>
 800582a:	2b04      	cmp	r3, #4
 800582c:	d003      	beq.n	8005836 <HAL_RCC_GetSysClockFreq+0x3a>
 800582e:	e0db      	b.n	80059e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005830:	4b73      	ldr	r3, [pc, #460]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x204>)
 8005832:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005834:	e0db      	b.n	80059ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005836:	4b73      	ldr	r3, [pc, #460]	; (8005a04 <HAL_RCC_GetSysClockFreq+0x208>)
 8005838:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800583a:	e0d8      	b.n	80059ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800583c:	4b6f      	ldr	r3, [pc, #444]	; (80059fc <HAL_RCC_GetSysClockFreq+0x200>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005844:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005846:	4b6d      	ldr	r3, [pc, #436]	; (80059fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d063      	beq.n	800591a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005852:	4b6a      	ldr	r3, [pc, #424]	; (80059fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	099b      	lsrs	r3, r3, #6
 8005858:	2200      	movs	r2, #0
 800585a:	63bb      	str	r3, [r7, #56]	; 0x38
 800585c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005864:	633b      	str	r3, [r7, #48]	; 0x30
 8005866:	2300      	movs	r3, #0
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
 800586a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800586e:	4622      	mov	r2, r4
 8005870:	462b      	mov	r3, r5
 8005872:	f04f 0000 	mov.w	r0, #0
 8005876:	f04f 0100 	mov.w	r1, #0
 800587a:	0159      	lsls	r1, r3, #5
 800587c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005880:	0150      	lsls	r0, r2, #5
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	4621      	mov	r1, r4
 8005888:	1a51      	subs	r1, r2, r1
 800588a:	6139      	str	r1, [r7, #16]
 800588c:	4629      	mov	r1, r5
 800588e:	eb63 0301 	sbc.w	r3, r3, r1
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	f04f 0300 	mov.w	r3, #0
 800589c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058a0:	4659      	mov	r1, fp
 80058a2:	018b      	lsls	r3, r1, #6
 80058a4:	4651      	mov	r1, sl
 80058a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058aa:	4651      	mov	r1, sl
 80058ac:	018a      	lsls	r2, r1, #6
 80058ae:	4651      	mov	r1, sl
 80058b0:	ebb2 0801 	subs.w	r8, r2, r1
 80058b4:	4659      	mov	r1, fp
 80058b6:	eb63 0901 	sbc.w	r9, r3, r1
 80058ba:	f04f 0200 	mov.w	r2, #0
 80058be:	f04f 0300 	mov.w	r3, #0
 80058c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058ce:	4690      	mov	r8, r2
 80058d0:	4699      	mov	r9, r3
 80058d2:	4623      	mov	r3, r4
 80058d4:	eb18 0303 	adds.w	r3, r8, r3
 80058d8:	60bb      	str	r3, [r7, #8]
 80058da:	462b      	mov	r3, r5
 80058dc:	eb49 0303 	adc.w	r3, r9, r3
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	f04f 0200 	mov.w	r2, #0
 80058e6:	f04f 0300 	mov.w	r3, #0
 80058ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058ee:	4629      	mov	r1, r5
 80058f0:	024b      	lsls	r3, r1, #9
 80058f2:	4621      	mov	r1, r4
 80058f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058f8:	4621      	mov	r1, r4
 80058fa:	024a      	lsls	r2, r1, #9
 80058fc:	4610      	mov	r0, r2
 80058fe:	4619      	mov	r1, r3
 8005900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005902:	2200      	movs	r2, #0
 8005904:	62bb      	str	r3, [r7, #40]	; 0x28
 8005906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005908:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800590c:	f7fa fc5c 	bl	80001c8 <__aeabi_uldivmod>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4613      	mov	r3, r2
 8005916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005918:	e058      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800591a:	4b38      	ldr	r3, [pc, #224]	; (80059fc <HAL_RCC_GetSysClockFreq+0x200>)
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	099b      	lsrs	r3, r3, #6
 8005920:	2200      	movs	r2, #0
 8005922:	4618      	mov	r0, r3
 8005924:	4611      	mov	r1, r2
 8005926:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800592a:	623b      	str	r3, [r7, #32]
 800592c:	2300      	movs	r3, #0
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
 8005930:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005934:	4642      	mov	r2, r8
 8005936:	464b      	mov	r3, r9
 8005938:	f04f 0000 	mov.w	r0, #0
 800593c:	f04f 0100 	mov.w	r1, #0
 8005940:	0159      	lsls	r1, r3, #5
 8005942:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005946:	0150      	lsls	r0, r2, #5
 8005948:	4602      	mov	r2, r0
 800594a:	460b      	mov	r3, r1
 800594c:	4641      	mov	r1, r8
 800594e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005952:	4649      	mov	r1, r9
 8005954:	eb63 0b01 	sbc.w	fp, r3, r1
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005964:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005968:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800596c:	ebb2 040a 	subs.w	r4, r2, sl
 8005970:	eb63 050b 	sbc.w	r5, r3, fp
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	f04f 0300 	mov.w	r3, #0
 800597c:	00eb      	lsls	r3, r5, #3
 800597e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005982:	00e2      	lsls	r2, r4, #3
 8005984:	4614      	mov	r4, r2
 8005986:	461d      	mov	r5, r3
 8005988:	4643      	mov	r3, r8
 800598a:	18e3      	adds	r3, r4, r3
 800598c:	603b      	str	r3, [r7, #0]
 800598e:	464b      	mov	r3, r9
 8005990:	eb45 0303 	adc.w	r3, r5, r3
 8005994:	607b      	str	r3, [r7, #4]
 8005996:	f04f 0200 	mov.w	r2, #0
 800599a:	f04f 0300 	mov.w	r3, #0
 800599e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059a2:	4629      	mov	r1, r5
 80059a4:	028b      	lsls	r3, r1, #10
 80059a6:	4621      	mov	r1, r4
 80059a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059ac:	4621      	mov	r1, r4
 80059ae:	028a      	lsls	r2, r1, #10
 80059b0:	4610      	mov	r0, r2
 80059b2:	4619      	mov	r1, r3
 80059b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b6:	2200      	movs	r2, #0
 80059b8:	61bb      	str	r3, [r7, #24]
 80059ba:	61fa      	str	r2, [r7, #28]
 80059bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059c0:	f7fa fc02 	bl	80001c8 <__aeabi_uldivmod>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4613      	mov	r3, r2
 80059ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059cc:	4b0b      	ldr	r3, [pc, #44]	; (80059fc <HAL_RCC_GetSysClockFreq+0x200>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	0c1b      	lsrs	r3, r3, #16
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	3301      	adds	r3, #1
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80059dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059e6:	e002      	b.n	80059ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059e8:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x204>)
 80059ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3750      	adds	r7, #80	; 0x50
 80059f4:	46bd      	mov	sp, r7
 80059f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059fa:	bf00      	nop
 80059fc:	40023800 	.word	0x40023800
 8005a00:	00f42400 	.word	0x00f42400
 8005a04:	007a1200 	.word	0x007a1200

08005a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a0c:	4b03      	ldr	r3, [pc, #12]	; (8005a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	20000000 	.word	0x20000000

08005a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a24:	f7ff fff0 	bl	8005a08 <HAL_RCC_GetHCLKFreq>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	0a9b      	lsrs	r3, r3, #10
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	4903      	ldr	r1, [pc, #12]	; (8005a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a36:	5ccb      	ldrb	r3, [r1, r3]
 8005a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	40023800 	.word	0x40023800
 8005a44:	0800c384 	.word	0x0800c384

08005a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a4c:	f7ff ffdc 	bl	8005a08 <HAL_RCC_GetHCLKFreq>
 8005a50:	4602      	mov	r2, r0
 8005a52:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	0b5b      	lsrs	r3, r3, #13
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	4903      	ldr	r1, [pc, #12]	; (8005a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a5e:	5ccb      	ldrb	r3, [r1, r3]
 8005a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	0800c384 	.word	0x0800c384

08005a70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e07b      	b.n	8005b7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d108      	bne.n	8005a9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a92:	d009      	beq.n	8005aa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	61da      	str	r2, [r3, #28]
 8005a9a:	e005      	b.n	8005aa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fa ff88 	bl	80009d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ade:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	431a      	orrs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2c:	ea42 0103 	orr.w	r1, r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	0c1b      	lsrs	r3, r3, #16
 8005b46:	f003 0104 	and.w	r1, r3, #4
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	f003 0210 	and.w	r2, r3, #16
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b088      	sub	sp, #32
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	603b      	str	r3, [r7, #0]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_SPI_Transmit+0x22>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e126      	b.n	8005df2 <HAL_SPI_Transmit+0x270>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bac:	f7fb fb86 	bl	80012bc <HAL_GetTick>
 8005bb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d002      	beq.n	8005bc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bc6:	e10b      	b.n	8005de0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <HAL_SPI_Transmit+0x52>
 8005bce:	88fb      	ldrh	r3, [r7, #6]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d102      	bne.n	8005bda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bd8:	e102      	b.n	8005de0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2203      	movs	r2, #3
 8005bde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	88fa      	ldrh	r2, [r7, #6]
 8005bf2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	88fa      	ldrh	r2, [r7, #6]
 8005bf8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c20:	d10f      	bne.n	8005c42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4c:	2b40      	cmp	r3, #64	; 0x40
 8005c4e:	d007      	beq.n	8005c60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c68:	d14b      	bne.n	8005d02 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_SPI_Transmit+0xf6>
 8005c72:	8afb      	ldrh	r3, [r7, #22]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d13e      	bne.n	8005cf6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	881a      	ldrh	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c88:	1c9a      	adds	r2, r3, #2
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c9c:	e02b      	b.n	8005cf6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d112      	bne.n	8005cd2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	881a      	ldrh	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	1c9a      	adds	r2, r3, #2
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	86da      	strh	r2, [r3, #54]	; 0x36
 8005cd0:	e011      	b.n	8005cf6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cd2:	f7fb faf3 	bl	80012bc <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d803      	bhi.n	8005cea <HAL_SPI_Transmit+0x168>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce8:	d102      	bne.n	8005cf0 <HAL_SPI_Transmit+0x16e>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d102      	bne.n	8005cf6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cf4:	e074      	b.n	8005de0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1ce      	bne.n	8005c9e <HAL_SPI_Transmit+0x11c>
 8005d00:	e04c      	b.n	8005d9c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <HAL_SPI_Transmit+0x18e>
 8005d0a:	8afb      	ldrh	r3, [r7, #22]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d140      	bne.n	8005d92 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	7812      	ldrb	r2, [r2, #0]
 8005d1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d36:	e02c      	b.n	8005d92 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d113      	bne.n	8005d6e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	330c      	adds	r3, #12
 8005d50:	7812      	ldrb	r2, [r2, #0]
 8005d52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d6c:	e011      	b.n	8005d92 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d6e:	f7fb faa5 	bl	80012bc <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d803      	bhi.n	8005d86 <HAL_SPI_Transmit+0x204>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d84:	d102      	bne.n	8005d8c <HAL_SPI_Transmit+0x20a>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d102      	bne.n	8005d92 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d90:	e026      	b.n	8005de0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1cd      	bne.n	8005d38 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	6839      	ldr	r1, [r7, #0]
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 fce9 	bl	8006778 <SPI_EndRxTxTransaction>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2220      	movs	r2, #32
 8005db0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10a      	bne.n	8005dd0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dba:	2300      	movs	r3, #0
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	77fb      	strb	r3, [r7, #31]
 8005ddc:	e000      	b.n	8005de0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005dde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005df0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3720      	adds	r7, #32
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b088      	sub	sp, #32
 8005dfe:	af02      	add	r7, sp, #8
 8005e00:	60f8      	str	r0, [r7, #12]
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	603b      	str	r3, [r7, #0]
 8005e06:	4613      	mov	r3, r2
 8005e08:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e16:	d112      	bne.n	8005e3e <HAL_SPI_Receive+0x44>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10e      	bne.n	8005e3e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2204      	movs	r2, #4
 8005e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e28:	88fa      	ldrh	r2, [r7, #6]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 f8f1 	bl	800601c <HAL_SPI_TransmitReceive>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	e0ea      	b.n	8006014 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d101      	bne.n	8005e4c <HAL_SPI_Receive+0x52>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	e0e3      	b.n	8006014 <HAL_SPI_Receive+0x21a>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e54:	f7fb fa32 	bl	80012bc <HAL_GetTick>
 8005e58:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d002      	beq.n	8005e6c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005e66:	2302      	movs	r3, #2
 8005e68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e6a:	e0ca      	b.n	8006002 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <HAL_SPI_Receive+0x7e>
 8005e72:	88fb      	ldrh	r3, [r7, #6]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d102      	bne.n	8005e7e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e7c:	e0c1      	b.n	8006002 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2204      	movs	r2, #4
 8005e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	88fa      	ldrh	r2, [r7, #6]
 8005e96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	88fa      	ldrh	r2, [r7, #6]
 8005e9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec4:	d10f      	bne.n	8005ee6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ee4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef0:	2b40      	cmp	r3, #64	; 0x40
 8005ef2:	d007      	beq.n	8005f04 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f02:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d162      	bne.n	8005fd2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005f0c:	e02e      	b.n	8005f6c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d115      	bne.n	8005f48 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f103 020c 	add.w	r2, r3, #12
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f28:	7812      	ldrb	r2, [r2, #0]
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f46:	e011      	b.n	8005f6c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f48:	f7fb f9b8 	bl	80012bc <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d803      	bhi.n	8005f60 <HAL_SPI_Receive+0x166>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5e:	d102      	bne.n	8005f66 <HAL_SPI_Receive+0x16c>
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d102      	bne.n	8005f6c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f6a:	e04a      	b.n	8006002 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1cb      	bne.n	8005f0e <HAL_SPI_Receive+0x114>
 8005f76:	e031      	b.n	8005fdc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d113      	bne.n	8005fae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	b292      	uxth	r2, r2
 8005f92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	1c9a      	adds	r2, r3, #2
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fac:	e011      	b.n	8005fd2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fae:	f7fb f985 	bl	80012bc <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d803      	bhi.n	8005fc6 <HAL_SPI_Receive+0x1cc>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d102      	bne.n	8005fcc <HAL_SPI_Receive+0x1d2>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d102      	bne.n	8005fd2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005fd0:	e017      	b.n	8006002 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1cd      	bne.n	8005f78 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 fb63 	bl	80066ac <SPI_EndRxTransaction>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	75fb      	strb	r3, [r7, #23]
 8005ffe:	e000      	b.n	8006002 <HAL_SPI_Receive+0x208>
  }

error :
 8006000:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006012:	7dfb      	ldrb	r3, [r7, #23]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08c      	sub	sp, #48	; 0x30
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800602a:	2301      	movs	r3, #1
 800602c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800603a:	2b01      	cmp	r3, #1
 800603c:	d101      	bne.n	8006042 <HAL_SPI_TransmitReceive+0x26>
 800603e:	2302      	movs	r3, #2
 8006040:	e18a      	b.n	8006358 <HAL_SPI_TransmitReceive+0x33c>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800604a:	f7fb f937 	bl	80012bc <HAL_GetTick>
 800604e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006060:	887b      	ldrh	r3, [r7, #2]
 8006062:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006068:	2b01      	cmp	r3, #1
 800606a:	d00f      	beq.n	800608c <HAL_SPI_TransmitReceive+0x70>
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006072:	d107      	bne.n	8006084 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d103      	bne.n	8006084 <HAL_SPI_TransmitReceive+0x68>
 800607c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006080:	2b04      	cmp	r3, #4
 8006082:	d003      	beq.n	800608c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006084:	2302      	movs	r3, #2
 8006086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800608a:	e15b      	b.n	8006344 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <HAL_SPI_TransmitReceive+0x82>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <HAL_SPI_TransmitReceive+0x82>
 8006098:	887b      	ldrh	r3, [r7, #2]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d103      	bne.n	80060a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060a4:	e14e      	b.n	8006344 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d003      	beq.n	80060ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2205      	movs	r2, #5
 80060b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	887a      	ldrh	r2, [r7, #2]
 80060ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	887a      	ldrh	r2, [r7, #2]
 80060d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	887a      	ldrh	r2, [r7, #2]
 80060dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	887a      	ldrh	r2, [r7, #2]
 80060e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	2b40      	cmp	r3, #64	; 0x40
 80060fc:	d007      	beq.n	800610e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800610c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006116:	d178      	bne.n	800620a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <HAL_SPI_TransmitReceive+0x10a>
 8006120:	8b7b      	ldrh	r3, [r7, #26]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d166      	bne.n	80061f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612a:	881a      	ldrh	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	1c9a      	adds	r2, r3, #2
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800614a:	e053      	b.n	80061f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b02      	cmp	r3, #2
 8006158:	d11b      	bne.n	8006192 <HAL_SPI_TransmitReceive+0x176>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d016      	beq.n	8006192 <HAL_SPI_TransmitReceive+0x176>
 8006164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006166:	2b01      	cmp	r3, #1
 8006168:	d113      	bne.n	8006192 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616e:	881a      	ldrh	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617a:	1c9a      	adds	r2, r3, #2
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b01      	cmp	r3, #1
 800619e:	d119      	bne.n	80061d4 <HAL_SPI_TransmitReceive+0x1b8>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d014      	beq.n	80061d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68da      	ldr	r2, [r3, #12]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	b292      	uxth	r2, r2
 80061b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	1c9a      	adds	r2, r3, #2
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061d0:	2301      	movs	r3, #1
 80061d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061d4:	f7fb f872 	bl	80012bc <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d807      	bhi.n	80061f4 <HAL_SPI_TransmitReceive+0x1d8>
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ea:	d003      	beq.n	80061f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80061f2:	e0a7      	b.n	8006344 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1a6      	bne.n	800614c <HAL_SPI_TransmitReceive+0x130>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1a1      	bne.n	800614c <HAL_SPI_TransmitReceive+0x130>
 8006208:	e07c      	b.n	8006304 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <HAL_SPI_TransmitReceive+0x1fc>
 8006212:	8b7b      	ldrh	r3, [r7, #26]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d16b      	bne.n	80062f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	330c      	adds	r3, #12
 8006222:	7812      	ldrb	r2, [r2, #0]
 8006224:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006234:	b29b      	uxth	r3, r3
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800623e:	e057      	b.n	80062f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b02      	cmp	r3, #2
 800624c:	d11c      	bne.n	8006288 <HAL_SPI_TransmitReceive+0x26c>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006252:	b29b      	uxth	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d017      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x26c>
 8006258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d114      	bne.n	8006288 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	330c      	adds	r3, #12
 8006268:	7812      	ldrb	r2, [r2, #0]
 800626a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800627a:	b29b      	uxth	r3, r3
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b01      	cmp	r3, #1
 8006294:	d119      	bne.n	80062ca <HAL_SPI_TransmitReceive+0x2ae>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800629a:	b29b      	uxth	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d014      	beq.n	80062ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062bc:	b29b      	uxth	r3, r3
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062c6:	2301      	movs	r3, #1
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062ca:	f7fa fff7 	bl	80012bc <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d803      	bhi.n	80062e2 <HAL_SPI_TransmitReceive+0x2c6>
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e0:	d102      	bne.n	80062e8 <HAL_SPI_TransmitReceive+0x2cc>
 80062e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d103      	bne.n	80062f0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80062ee:	e029      	b.n	8006344 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1a2      	bne.n	8006240 <HAL_SPI_TransmitReceive+0x224>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d19d      	bne.n	8006240 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006306:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 fa35 	bl	8006778 <SPI_EndRxTxTransaction>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d006      	beq.n	8006322 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2220      	movs	r2, #32
 800631e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006320:	e010      	b.n	8006344 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800632a:	2300      	movs	r3, #0
 800632c:	617b      	str	r3, [r7, #20]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	e000      	b.n	8006344 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006342:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006354:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006358:	4618      	mov	r0, r3
 800635a:	3730      	adds	r7, #48	; 0x30
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b088      	sub	sp, #32
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	099b      	lsrs	r3, r3, #6
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10f      	bne.n	80063a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	099b      	lsrs	r3, r3, #6
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d004      	beq.n	80063a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	4798      	blx	r3
    return;
 80063a2:	e0d7      	b.n	8006554 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	085b      	lsrs	r3, r3, #1
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00a      	beq.n	80063c6 <HAL_SPI_IRQHandler+0x66>
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	09db      	lsrs	r3, r3, #7
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d004      	beq.n	80063c6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	4798      	blx	r3
    return;
 80063c4:	e0c6      	b.n	8006554 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	095b      	lsrs	r3, r3, #5
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10c      	bne.n	80063ec <HAL_SPI_IRQHandler+0x8c>
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	099b      	lsrs	r3, r3, #6
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d106      	bne.n	80063ec <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	0a1b      	lsrs	r3, r3, #8
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 80b4 	beq.w	8006554 <HAL_SPI_IRQHandler+0x1f4>
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	095b      	lsrs	r3, r3, #5
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 80ad 	beq.w	8006554 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	099b      	lsrs	r3, r3, #6
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d023      	beq.n	800644e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b03      	cmp	r3, #3
 8006410:	d011      	beq.n	8006436 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006416:	f043 0204 	orr.w	r2, r3, #4
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800641e:	2300      	movs	r3, #0
 8006420:	617b      	str	r3, [r7, #20]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	617b      	str	r3, [r7, #20]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	e00b      	b.n	800644e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006436:	2300      	movs	r3, #0
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	613b      	str	r3, [r7, #16]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	613b      	str	r3, [r7, #16]
 800644a:	693b      	ldr	r3, [r7, #16]
        return;
 800644c:	e082      	b.n	8006554 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	095b      	lsrs	r3, r3, #5
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d014      	beq.n	8006484 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645e:	f043 0201 	orr.w	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	0a1b      	lsrs	r3, r3, #8
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00c      	beq.n	80064aa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006494:	f043 0208 	orr.w	r2, r3, #8
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800649c:	2300      	movs	r3, #0
 800649e:	60bb      	str	r3, [r7, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	60bb      	str	r3, [r7, #8]
 80064a8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d04f      	beq.n	8006552 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064c0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d104      	bne.n	80064de <HAL_SPI_IRQHandler+0x17e>
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d034      	beq.n	8006548 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0203 	bic.w	r2, r2, #3
 80064ec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d011      	beq.n	800651a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064fa:	4a18      	ldr	r2, [pc, #96]	; (800655c <HAL_SPI_IRQHandler+0x1fc>)
 80064fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006502:	4618      	mov	r0, r3
 8006504:	f7fb f93a 	bl	800177c <HAL_DMA_Abort_IT>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d005      	beq.n	800651a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006512:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800651e:	2b00      	cmp	r3, #0
 8006520:	d016      	beq.n	8006550 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006526:	4a0d      	ldr	r2, [pc, #52]	; (800655c <HAL_SPI_IRQHandler+0x1fc>)
 8006528:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800652e:	4618      	mov	r0, r3
 8006530:	f7fb f924 	bl	800177c <HAL_DMA_Abort_IT>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006546:	e003      	b.n	8006550 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f809 	bl	8006560 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800654e:	e000      	b.n	8006552 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006550:	bf00      	nop
    return;
 8006552:	bf00      	nop
  }
}
 8006554:	3720      	adds	r7, #32
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	08006575 	.word	0x08006575

08006560 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f7ff ffe6 	bl	8006560 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006594:	bf00      	nop
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b088      	sub	sp, #32
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	603b      	str	r3, [r7, #0]
 80065a8:	4613      	mov	r3, r2
 80065aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065ac:	f7fa fe86 	bl	80012bc <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	1a9b      	subs	r3, r3, r2
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	4413      	add	r3, r2
 80065ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065bc:	f7fa fe7e 	bl	80012bc <HAL_GetTick>
 80065c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065c2:	4b39      	ldr	r3, [pc, #228]	; (80066a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	015b      	lsls	r3, r3, #5
 80065c8:	0d1b      	lsrs	r3, r3, #20
 80065ca:	69fa      	ldr	r2, [r7, #28]
 80065cc:	fb02 f303 	mul.w	r3, r2, r3
 80065d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065d2:	e054      	b.n	800667e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065da:	d050      	beq.n	800667e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065dc:	f7fa fe6e 	bl	80012bc <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d902      	bls.n	80065f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d13d      	bne.n	800666e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006600:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800660a:	d111      	bne.n	8006630 <SPI_WaitFlagStateUntilTimeout+0x94>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006614:	d004      	beq.n	8006620 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661e:	d107      	bne.n	8006630 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800662e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006638:	d10f      	bne.n	800665a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006658:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e017      	b.n	800669e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	3b01      	subs	r3, #1
 800667c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4013      	ands	r3, r2
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	429a      	cmp	r2, r3
 800668c:	bf0c      	ite	eq
 800668e:	2301      	moveq	r3, #1
 8006690:	2300      	movne	r3, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	461a      	mov	r2, r3
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	429a      	cmp	r2, r3
 800669a:	d19b      	bne.n	80065d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3720      	adds	r7, #32
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000000 	.word	0x20000000

080066ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066c0:	d111      	bne.n	80066e6 <SPI_EndRxTransaction+0x3a>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ca:	d004      	beq.n	80066d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d4:	d107      	bne.n	80066e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ee:	d12a      	bne.n	8006746 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f8:	d012      	beq.n	8006720 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2200      	movs	r2, #0
 8006702:	2180      	movs	r1, #128	; 0x80
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f7ff ff49 	bl	800659c <SPI_WaitFlagStateUntilTimeout>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d02d      	beq.n	800676c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006714:	f043 0220 	orr.w	r2, r3, #32
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e026      	b.n	800676e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2200      	movs	r2, #0
 8006728:	2101      	movs	r1, #1
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f7ff ff36 	bl	800659c <SPI_WaitFlagStateUntilTimeout>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01a      	beq.n	800676c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673a:	f043 0220 	orr.w	r2, r3, #32
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e013      	b.n	800676e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2200      	movs	r2, #0
 800674e:	2101      	movs	r1, #1
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f7ff ff23 	bl	800659c <SPI_WaitFlagStateUntilTimeout>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d007      	beq.n	800676c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006760:	f043 0220 	orr.w	r2, r3, #32
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e000      	b.n	800676e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b088      	sub	sp, #32
 800677c:	af02      	add	r7, sp, #8
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006784:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <SPI_EndRxTxTransaction+0x7c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a1b      	ldr	r2, [pc, #108]	; (80067f8 <SPI_EndRxTxTransaction+0x80>)
 800678a:	fba2 2303 	umull	r2, r3, r2, r3
 800678e:	0d5b      	lsrs	r3, r3, #21
 8006790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006794:	fb02 f303 	mul.w	r3, r2, r3
 8006798:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067a2:	d112      	bne.n	80067ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2200      	movs	r2, #0
 80067ac:	2180      	movs	r1, #128	; 0x80
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f7ff fef4 	bl	800659c <SPI_WaitFlagStateUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d016      	beq.n	80067e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067be:	f043 0220 	orr.w	r2, r3, #32
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e00f      	b.n	80067ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00a      	beq.n	80067e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e0:	2b80      	cmp	r3, #128	; 0x80
 80067e2:	d0f2      	beq.n	80067ca <SPI_EndRxTxTransaction+0x52>
 80067e4:	e000      	b.n	80067e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80067e6:	bf00      	nop
  }

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20000000 	.word	0x20000000
 80067f8:	165e9f81 	.word	0x165e9f81

080067fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e041      	b.n	8006892 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d106      	bne.n	8006828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7fa fbb2 	bl	8000f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3304      	adds	r3, #4
 8006838:	4619      	mov	r1, r3
 800683a:	4610      	mov	r0, r2
 800683c:	f000 f98a 	bl	8006b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e041      	b.n	8006930 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d106      	bne.n	80068c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f839 	bl	8006938 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2202      	movs	r2, #2
 80068ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3304      	adds	r3, #4
 80068d6:	4619      	mov	r1, r3
 80068d8:	4610      	mov	r0, r2
 80068da:	f000 f93b 	bl	8006b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006966:	2302      	movs	r3, #2
 8006968:	e0ae      	b.n	8006ac8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b0c      	cmp	r3, #12
 8006976:	f200 809f 	bhi.w	8006ab8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	080069b5 	.word	0x080069b5
 8006984:	08006ab9 	.word	0x08006ab9
 8006988:	08006ab9 	.word	0x08006ab9
 800698c:	08006ab9 	.word	0x08006ab9
 8006990:	080069f5 	.word	0x080069f5
 8006994:	08006ab9 	.word	0x08006ab9
 8006998:	08006ab9 	.word	0x08006ab9
 800699c:	08006ab9 	.word	0x08006ab9
 80069a0:	08006a37 	.word	0x08006a37
 80069a4:	08006ab9 	.word	0x08006ab9
 80069a8:	08006ab9 	.word	0x08006ab9
 80069ac:	08006ab9 	.word	0x08006ab9
 80069b0:	08006a77 	.word	0x08006a77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68b9      	ldr	r1, [r7, #8]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 f96a 	bl	8006c94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699a      	ldr	r2, [r3, #24]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0208 	orr.w	r2, r2, #8
 80069ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699a      	ldr	r2, [r3, #24]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0204 	bic.w	r2, r2, #4
 80069de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6999      	ldr	r1, [r3, #24]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	691a      	ldr	r2, [r3, #16]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	619a      	str	r2, [r3, #24]
      break;
 80069f2:	e064      	b.n	8006abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68b9      	ldr	r1, [r7, #8]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 f9ba 	bl	8006d74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699a      	ldr	r2, [r3, #24]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699a      	ldr	r2, [r3, #24]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6999      	ldr	r1, [r3, #24]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	021a      	lsls	r2, r3, #8
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	619a      	str	r2, [r3, #24]
      break;
 8006a34:	e043      	b.n	8006abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fa0f 	bl	8006e60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69da      	ldr	r2, [r3, #28]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f042 0208 	orr.w	r2, r2, #8
 8006a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69da      	ldr	r2, [r3, #28]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0204 	bic.w	r2, r2, #4
 8006a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	69d9      	ldr	r1, [r3, #28]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	691a      	ldr	r2, [r3, #16]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	61da      	str	r2, [r3, #28]
      break;
 8006a74:	e023      	b.n	8006abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 fa63 	bl	8006f48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69da      	ldr	r2, [r3, #28]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69da      	ldr	r2, [r3, #28]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69d9      	ldr	r1, [r3, #28]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	021a      	lsls	r2, r3, #8
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	61da      	str	r2, [r3, #28]
      break;
 8006ab6:	e002      	b.n	8006abe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	75fb      	strb	r3, [r7, #23]
      break;
 8006abc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d101      	bne.n	8006ae8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	e031      	b.n	8006b4c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2202      	movs	r2, #2
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fa7a 	bl	8006ff4 <TIM_SlaveTimer_SetConfig>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d009      	beq.n	8006b1a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e018      	b.n	8006b4c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68da      	ldr	r2, [r3, #12]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b28:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68da      	ldr	r2, [r3, #12]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b38:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a40      	ldr	r2, [pc, #256]	; (8006c68 <TIM_Base_SetConfig+0x114>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d013      	beq.n	8006b94 <TIM_Base_SetConfig+0x40>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b72:	d00f      	beq.n	8006b94 <TIM_Base_SetConfig+0x40>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a3d      	ldr	r2, [pc, #244]	; (8006c6c <TIM_Base_SetConfig+0x118>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d00b      	beq.n	8006b94 <TIM_Base_SetConfig+0x40>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a3c      	ldr	r2, [pc, #240]	; (8006c70 <TIM_Base_SetConfig+0x11c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d007      	beq.n	8006b94 <TIM_Base_SetConfig+0x40>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a3b      	ldr	r2, [pc, #236]	; (8006c74 <TIM_Base_SetConfig+0x120>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d003      	beq.n	8006b94 <TIM_Base_SetConfig+0x40>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a3a      	ldr	r2, [pc, #232]	; (8006c78 <TIM_Base_SetConfig+0x124>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d108      	bne.n	8006ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a2f      	ldr	r2, [pc, #188]	; (8006c68 <TIM_Base_SetConfig+0x114>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d02b      	beq.n	8006c06 <TIM_Base_SetConfig+0xb2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb4:	d027      	beq.n	8006c06 <TIM_Base_SetConfig+0xb2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a2c      	ldr	r2, [pc, #176]	; (8006c6c <TIM_Base_SetConfig+0x118>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d023      	beq.n	8006c06 <TIM_Base_SetConfig+0xb2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a2b      	ldr	r2, [pc, #172]	; (8006c70 <TIM_Base_SetConfig+0x11c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d01f      	beq.n	8006c06 <TIM_Base_SetConfig+0xb2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a2a      	ldr	r2, [pc, #168]	; (8006c74 <TIM_Base_SetConfig+0x120>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d01b      	beq.n	8006c06 <TIM_Base_SetConfig+0xb2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a29      	ldr	r2, [pc, #164]	; (8006c78 <TIM_Base_SetConfig+0x124>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d017      	beq.n	8006c06 <TIM_Base_SetConfig+0xb2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a28      	ldr	r2, [pc, #160]	; (8006c7c <TIM_Base_SetConfig+0x128>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d013      	beq.n	8006c06 <TIM_Base_SetConfig+0xb2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a27      	ldr	r2, [pc, #156]	; (8006c80 <TIM_Base_SetConfig+0x12c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00f      	beq.n	8006c06 <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a26      	ldr	r2, [pc, #152]	; (8006c84 <TIM_Base_SetConfig+0x130>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00b      	beq.n	8006c06 <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a25      	ldr	r2, [pc, #148]	; (8006c88 <TIM_Base_SetConfig+0x134>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d007      	beq.n	8006c06 <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a24      	ldr	r2, [pc, #144]	; (8006c8c <TIM_Base_SetConfig+0x138>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d003      	beq.n	8006c06 <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a23      	ldr	r2, [pc, #140]	; (8006c90 <TIM_Base_SetConfig+0x13c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d108      	bne.n	8006c18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a0a      	ldr	r2, [pc, #40]	; (8006c68 <TIM_Base_SetConfig+0x114>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d003      	beq.n	8006c4c <TIM_Base_SetConfig+0xf8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a0c      	ldr	r2, [pc, #48]	; (8006c78 <TIM_Base_SetConfig+0x124>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d103      	bne.n	8006c54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	691a      	ldr	r2, [r3, #16]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	615a      	str	r2, [r3, #20]
}
 8006c5a:	bf00      	nop
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	40010000 	.word	0x40010000
 8006c6c:	40000400 	.word	0x40000400
 8006c70:	40000800 	.word	0x40000800
 8006c74:	40000c00 	.word	0x40000c00
 8006c78:	40010400 	.word	0x40010400
 8006c7c:	40014000 	.word	0x40014000
 8006c80:	40014400 	.word	0x40014400
 8006c84:	40014800 	.word	0x40014800
 8006c88:	40001800 	.word	0x40001800
 8006c8c:	40001c00 	.word	0x40001c00
 8006c90:	40002000 	.word	0x40002000

08006c94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f023 0201 	bic.w	r2, r3, #1
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0303 	bic.w	r3, r3, #3
 8006cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f023 0302 	bic.w	r3, r3, #2
 8006cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a20      	ldr	r2, [pc, #128]	; (8006d6c <TIM_OC1_SetConfig+0xd8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d003      	beq.n	8006cf8 <TIM_OC1_SetConfig+0x64>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a1f      	ldr	r2, [pc, #124]	; (8006d70 <TIM_OC1_SetConfig+0xdc>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d10c      	bne.n	8006d12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f023 0308 	bic.w	r3, r3, #8
 8006cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f023 0304 	bic.w	r3, r3, #4
 8006d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a15      	ldr	r2, [pc, #84]	; (8006d6c <TIM_OC1_SetConfig+0xd8>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d003      	beq.n	8006d22 <TIM_OC1_SetConfig+0x8e>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a14      	ldr	r2, [pc, #80]	; (8006d70 <TIM_OC1_SetConfig+0xdc>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d111      	bne.n	8006d46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	621a      	str	r2, [r3, #32]
}
 8006d60:	bf00      	nop
 8006d62:	371c      	adds	r7, #28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	40010000 	.word	0x40010000
 8006d70:	40010400 	.word	0x40010400

08006d74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	f023 0210 	bic.w	r2, r3, #16
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	021b      	lsls	r3, r3, #8
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f023 0320 	bic.w	r3, r3, #32
 8006dbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	011b      	lsls	r3, r3, #4
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a22      	ldr	r2, [pc, #136]	; (8006e58 <TIM_OC2_SetConfig+0xe4>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d003      	beq.n	8006ddc <TIM_OC2_SetConfig+0x68>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a21      	ldr	r2, [pc, #132]	; (8006e5c <TIM_OC2_SetConfig+0xe8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d10d      	bne.n	8006df8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a17      	ldr	r2, [pc, #92]	; (8006e58 <TIM_OC2_SetConfig+0xe4>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d003      	beq.n	8006e08 <TIM_OC2_SetConfig+0x94>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a16      	ldr	r2, [pc, #88]	; (8006e5c <TIM_OC2_SetConfig+0xe8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d113      	bne.n	8006e30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	621a      	str	r2, [r3, #32]
}
 8006e4a:	bf00      	nop
 8006e4c:	371c      	adds	r7, #28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	40010000 	.word	0x40010000
 8006e5c:	40010400 	.word	0x40010400

08006e60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 0303 	bic.w	r3, r3, #3
 8006e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	021b      	lsls	r3, r3, #8
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a21      	ldr	r2, [pc, #132]	; (8006f40 <TIM_OC3_SetConfig+0xe0>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d003      	beq.n	8006ec6 <TIM_OC3_SetConfig+0x66>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a20      	ldr	r2, [pc, #128]	; (8006f44 <TIM_OC3_SetConfig+0xe4>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d10d      	bne.n	8006ee2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ecc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	021b      	lsls	r3, r3, #8
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a16      	ldr	r2, [pc, #88]	; (8006f40 <TIM_OC3_SetConfig+0xe0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d003      	beq.n	8006ef2 <TIM_OC3_SetConfig+0x92>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a15      	ldr	r2, [pc, #84]	; (8006f44 <TIM_OC3_SetConfig+0xe4>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d113      	bne.n	8006f1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	011b      	lsls	r3, r3, #4
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	621a      	str	r2, [r3, #32]
}
 8006f34:	bf00      	nop
 8006f36:	371c      	adds	r7, #28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	40010000 	.word	0x40010000
 8006f44:	40010400 	.word	0x40010400

08006f48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	021b      	lsls	r3, r3, #8
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	031b      	lsls	r3, r3, #12
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a12      	ldr	r2, [pc, #72]	; (8006fec <TIM_OC4_SetConfig+0xa4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d003      	beq.n	8006fb0 <TIM_OC4_SetConfig+0x68>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a11      	ldr	r2, [pc, #68]	; (8006ff0 <TIM_OC4_SetConfig+0xa8>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d109      	bne.n	8006fc4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	019b      	lsls	r3, r3, #6
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	621a      	str	r2, [r3, #32]
}
 8006fde:	bf00      	nop
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	40010000 	.word	0x40010000
 8006ff0:	40010400 	.word	0x40010400

08006ff4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007010:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	4313      	orrs	r3, r2
 800701a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f023 0307 	bic.w	r3, r3, #7
 8007022:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2b70      	cmp	r3, #112	; 0x70
 800703c:	d01a      	beq.n	8007074 <TIM_SlaveTimer_SetConfig+0x80>
 800703e:	2b70      	cmp	r3, #112	; 0x70
 8007040:	d860      	bhi.n	8007104 <TIM_SlaveTimer_SetConfig+0x110>
 8007042:	2b60      	cmp	r3, #96	; 0x60
 8007044:	d054      	beq.n	80070f0 <TIM_SlaveTimer_SetConfig+0xfc>
 8007046:	2b60      	cmp	r3, #96	; 0x60
 8007048:	d85c      	bhi.n	8007104 <TIM_SlaveTimer_SetConfig+0x110>
 800704a:	2b50      	cmp	r3, #80	; 0x50
 800704c:	d046      	beq.n	80070dc <TIM_SlaveTimer_SetConfig+0xe8>
 800704e:	2b50      	cmp	r3, #80	; 0x50
 8007050:	d858      	bhi.n	8007104 <TIM_SlaveTimer_SetConfig+0x110>
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d019      	beq.n	800708a <TIM_SlaveTimer_SetConfig+0x96>
 8007056:	2b40      	cmp	r3, #64	; 0x40
 8007058:	d854      	bhi.n	8007104 <TIM_SlaveTimer_SetConfig+0x110>
 800705a:	2b30      	cmp	r3, #48	; 0x30
 800705c:	d055      	beq.n	800710a <TIM_SlaveTimer_SetConfig+0x116>
 800705e:	2b30      	cmp	r3, #48	; 0x30
 8007060:	d850      	bhi.n	8007104 <TIM_SlaveTimer_SetConfig+0x110>
 8007062:	2b20      	cmp	r3, #32
 8007064:	d051      	beq.n	800710a <TIM_SlaveTimer_SetConfig+0x116>
 8007066:	2b20      	cmp	r3, #32
 8007068:	d84c      	bhi.n	8007104 <TIM_SlaveTimer_SetConfig+0x110>
 800706a:	2b00      	cmp	r3, #0
 800706c:	d04d      	beq.n	800710a <TIM_SlaveTimer_SetConfig+0x116>
 800706e:	2b10      	cmp	r3, #16
 8007070:	d04b      	beq.n	800710a <TIM_SlaveTimer_SetConfig+0x116>
 8007072:	e047      	b.n	8007104 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6818      	ldr	r0, [r3, #0]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	68d9      	ldr	r1, [r3, #12]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	689a      	ldr	r2, [r3, #8]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	f000 f8a6 	bl	80071d4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007088:	e040      	b.n	800710c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b05      	cmp	r3, #5
 8007090:	d101      	bne.n	8007096 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e03b      	b.n	800710e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6a1a      	ldr	r2, [r3, #32]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0201 	bic.w	r2, r2, #1
 80070ac:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070bc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	621a      	str	r2, [r3, #32]
      break;
 80070da:	e017      	b.n	800710c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6818      	ldr	r0, [r3, #0]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	6899      	ldr	r1, [r3, #8]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	461a      	mov	r2, r3
 80070ea:	f000 f814 	bl	8007116 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80070ee:	e00d      	b.n	800710c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	6899      	ldr	r1, [r3, #8]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	461a      	mov	r2, r3
 80070fe:	f000 f839 	bl	8007174 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007102:	e003      	b.n	800710c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	75fb      	strb	r3, [r7, #23]
      break;
 8007108:	e000      	b.n	800710c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800710a:	bf00      	nop
  }

  return status;
 800710c:	7dfb      	ldrb	r3, [r7, #23]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007116:	b480      	push	{r7}
 8007118:	b087      	sub	sp, #28
 800711a:	af00      	add	r7, sp, #0
 800711c:	60f8      	str	r0, [r7, #12]
 800711e:	60b9      	str	r1, [r7, #8]
 8007120:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	f023 0201 	bic.w	r2, r3, #1
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007140:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	4313      	orrs	r3, r2
 800714a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f023 030a 	bic.w	r3, r3, #10
 8007152:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	4313      	orrs	r3, r2
 800715a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	621a      	str	r2, [r3, #32]
}
 8007168:	bf00      	nop
 800716a:	371c      	adds	r7, #28
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	f023 0210 	bic.w	r2, r3, #16
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800719e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	031b      	lsls	r3, r3, #12
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	621a      	str	r2, [r3, #32]
}
 80071c8:	bf00      	nop
 80071ca:	371c      	adds	r7, #28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
 80071e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	021a      	lsls	r2, r3, #8
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	431a      	orrs	r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	4313      	orrs	r3, r2
 8007200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	609a      	str	r2, [r3, #8]
}
 8007208:	bf00      	nop
 800720a:	371c      	adds	r7, #28
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007228:	2302      	movs	r3, #2
 800722a:	e05a      	b.n	80072e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a21      	ldr	r2, [pc, #132]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d022      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007278:	d01d      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a1d      	ldr	r2, [pc, #116]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d018      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a1b      	ldr	r2, [pc, #108]	; (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a1a      	ldr	r2, [pc, #104]	; (80072fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00e      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a18      	ldr	r2, [pc, #96]	; (8007300 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d009      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a17      	ldr	r2, [pc, #92]	; (8007304 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d004      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a15      	ldr	r2, [pc, #84]	; (8007308 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d10c      	bne.n	80072d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	40010000 	.word	0x40010000
 80072f4:	40000400 	.word	0x40000400
 80072f8:	40000800 	.word	0x40000800
 80072fc:	40000c00 	.word	0x40000c00
 8007300:	40010400 	.word	0x40010400
 8007304:	40014000 	.word	0x40014000
 8007308:	40001800 	.word	0x40001800

0800730c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e03f      	b.n	800739e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d106      	bne.n	8007338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7f9 feb0 	bl	8001098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2224      	movs	r2, #36	; 0x24
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800734e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fc7b 	bl	8007c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695a      	ldr	r2, [r3, #20]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007374:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007384:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2220      	movs	r2, #32
 8007398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b0ba      	sub	sp, #232	; 0xe8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073de:	f003 030f 	and.w	r3, r3, #15
 80073e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80073e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10f      	bne.n	800740e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f2:	f003 0320 	and.w	r3, r3, #32
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d009      	beq.n	800740e <HAL_UART_IRQHandler+0x66>
 80073fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073fe:	f003 0320 	and.w	r3, r3, #32
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fb65 	bl	8007ad6 <UART_Receive_IT>
      return;
 800740c:	e256      	b.n	80078bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800740e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 80de 	beq.w	80075d4 <HAL_UART_IRQHandler+0x22c>
 8007418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d106      	bne.n	8007432 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007428:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 80d1 	beq.w	80075d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00b      	beq.n	8007456 <HAL_UART_IRQHandler+0xae>
 800743e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007446:	2b00      	cmp	r3, #0
 8007448:	d005      	beq.n	8007456 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f043 0201 	orr.w	r2, r3, #1
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800745a:	f003 0304 	and.w	r3, r3, #4
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00b      	beq.n	800747a <HAL_UART_IRQHandler+0xd2>
 8007462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d005      	beq.n	800747a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	f043 0202 	orr.w	r2, r3, #2
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800747a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00b      	beq.n	800749e <HAL_UART_IRQHandler+0xf6>
 8007486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d005      	beq.n	800749e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007496:	f043 0204 	orr.w	r2, r3, #4
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800749e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a2:	f003 0308 	and.w	r3, r3, #8
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d011      	beq.n	80074ce <HAL_UART_IRQHandler+0x126>
 80074aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d105      	bne.n	80074c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80074b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d005      	beq.n	80074ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	f043 0208 	orr.w	r2, r3, #8
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 81ed 	beq.w	80078b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074dc:	f003 0320 	and.w	r3, r3, #32
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d008      	beq.n	80074f6 <HAL_UART_IRQHandler+0x14e>
 80074e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074e8:	f003 0320 	and.w	r3, r3, #32
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 faf0 	bl	8007ad6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007500:	2b40      	cmp	r3, #64	; 0x40
 8007502:	bf0c      	ite	eq
 8007504:	2301      	moveq	r3, #1
 8007506:	2300      	movne	r3, #0
 8007508:	b2db      	uxtb	r3, r3
 800750a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f003 0308 	and.w	r3, r3, #8
 8007516:	2b00      	cmp	r3, #0
 8007518:	d103      	bne.n	8007522 <HAL_UART_IRQHandler+0x17a>
 800751a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800751e:	2b00      	cmp	r3, #0
 8007520:	d04f      	beq.n	80075c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f9f8 	bl	8007918 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007532:	2b40      	cmp	r3, #64	; 0x40
 8007534:	d141      	bne.n	80075ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3314      	adds	r3, #20
 800753c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007540:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800754c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3314      	adds	r3, #20
 800755e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007562:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007566:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800756e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800757a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1d9      	bne.n	8007536 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007586:	2b00      	cmp	r3, #0
 8007588:	d013      	beq.n	80075b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758e:	4a7d      	ldr	r2, [pc, #500]	; (8007784 <HAL_UART_IRQHandler+0x3dc>)
 8007590:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007596:	4618      	mov	r0, r3
 8007598:	f7fa f8f0 	bl	800177c <HAL_DMA_Abort_IT>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d016      	beq.n	80075d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075ac:	4610      	mov	r0, r2
 80075ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b0:	e00e      	b.n	80075d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f99a 	bl	80078ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b8:	e00a      	b.n	80075d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f996 	bl	80078ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c0:	e006      	b.n	80075d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f992 	bl	80078ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80075ce:	e170      	b.n	80078b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d0:	bf00      	nop
    return;
 80075d2:	e16e      	b.n	80078b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d8:	2b01      	cmp	r3, #1
 80075da:	f040 814a 	bne.w	8007872 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80075de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e2:	f003 0310 	and.w	r3, r3, #16
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f000 8143 	beq.w	8007872 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80075ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f0:	f003 0310 	and.w	r3, r3, #16
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 813c 	beq.w	8007872 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075fa:	2300      	movs	r3, #0
 80075fc:	60bb      	str	r3, [r7, #8]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60bb      	str	r3, [r7, #8]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	60bb      	str	r3, [r7, #8]
 800760e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761a:	2b40      	cmp	r3, #64	; 0x40
 800761c:	f040 80b4 	bne.w	8007788 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800762c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 8140 	beq.w	80078b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800763a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800763e:	429a      	cmp	r2, r3
 8007640:	f080 8139 	bcs.w	80078b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800764a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007656:	f000 8088 	beq.w	800776a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	330c      	adds	r3, #12
 8007660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007670:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	330c      	adds	r3, #12
 8007682:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007686:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800768a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007692:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800769e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1d9      	bne.n	800765a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3314      	adds	r3, #20
 80076ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80076b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076b8:	f023 0301 	bic.w	r3, r3, #1
 80076bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3314      	adds	r3, #20
 80076c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80076ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80076d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80076dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e1      	bne.n	80076a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3314      	adds	r3, #20
 80076e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	3314      	adds	r3, #20
 8007702:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007706:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007708:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800770c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e3      	bne.n	80076e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2220      	movs	r2, #32
 800771e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	330c      	adds	r3, #12
 800772e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007732:	e853 3f00 	ldrex	r3, [r3]
 8007736:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800773a:	f023 0310 	bic.w	r3, r3, #16
 800773e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	330c      	adds	r3, #12
 8007748:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800774c:	65ba      	str	r2, [r7, #88]	; 0x58
 800774e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007752:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800775a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e3      	bne.n	8007728 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007764:	4618      	mov	r0, r3
 8007766:	f7f9 ff99 	bl	800169c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007772:	b29b      	uxth	r3, r3
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	b29b      	uxth	r3, r3
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f8c0 	bl	8007900 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007780:	e099      	b.n	80078b6 <HAL_UART_IRQHandler+0x50e>
 8007782:	bf00      	nop
 8007784:	080079df 	.word	0x080079df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007790:	b29b      	uxth	r3, r3
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800779c:	b29b      	uxth	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 808b 	beq.w	80078ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80077a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 8086 	beq.w	80078ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	330c      	adds	r3, #12
 80077b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	330c      	adds	r3, #12
 80077ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80077d2:	647a      	str	r2, [r7, #68]	; 0x44
 80077d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e3      	bne.n	80077ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3314      	adds	r3, #20
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	623b      	str	r3, [r7, #32]
   return(result);
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	f023 0301 	bic.w	r3, r3, #1
 80077fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3314      	adds	r3, #20
 8007806:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800780a:	633a      	str	r2, [r7, #48]	; 0x30
 800780c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e3      	bne.n	80077e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	330c      	adds	r3, #12
 8007832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	e853 3f00 	ldrex	r3, [r3]
 800783a:	60fb      	str	r3, [r7, #12]
   return(result);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0310 	bic.w	r3, r3, #16
 8007842:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	330c      	adds	r3, #12
 800784c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007850:	61fa      	str	r2, [r7, #28]
 8007852:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	69b9      	ldr	r1, [r7, #24]
 8007856:	69fa      	ldr	r2, [r7, #28]
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	617b      	str	r3, [r7, #20]
   return(result);
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e3      	bne.n	800782c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007864:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007868:	4619      	mov	r1, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f848 	bl	8007900 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007870:	e023      	b.n	80078ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787a:	2b00      	cmp	r3, #0
 800787c:	d009      	beq.n	8007892 <HAL_UART_IRQHandler+0x4ea>
 800787e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f8bb 	bl	8007a06 <UART_Transmit_IT>
    return;
 8007890:	e014      	b.n	80078bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00e      	beq.n	80078bc <HAL_UART_IRQHandler+0x514>
 800789e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d008      	beq.n	80078bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f8fb 	bl	8007aa6 <UART_EndTransmit_IT>
    return;
 80078b0:	e004      	b.n	80078bc <HAL_UART_IRQHandler+0x514>
    return;
 80078b2:	bf00      	nop
 80078b4:	e002      	b.n	80078bc <HAL_UART_IRQHandler+0x514>
      return;
 80078b6:	bf00      	nop
 80078b8:	e000      	b.n	80078bc <HAL_UART_IRQHandler+0x514>
      return;
 80078ba:	bf00      	nop
  }
}
 80078bc:	37e8      	adds	r7, #232	; 0xe8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop

080078c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007918:	b480      	push	{r7}
 800791a:	b095      	sub	sp, #84	; 0x54
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	330c      	adds	r3, #12
 8007926:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007932:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	330c      	adds	r3, #12
 800793e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007940:	643a      	str	r2, [r7, #64]	; 0x40
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007946:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007948:	e841 2300 	strex	r3, r2, [r1]
 800794c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800794e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e5      	bne.n	8007920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	3314      	adds	r3, #20
 800795a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	e853 3f00 	ldrex	r3, [r3]
 8007962:	61fb      	str	r3, [r7, #28]
   return(result);
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	f023 0301 	bic.w	r3, r3, #1
 800796a:	64bb      	str	r3, [r7, #72]	; 0x48
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3314      	adds	r3, #20
 8007972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007974:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007976:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800797a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800797c:	e841 2300 	strex	r3, r2, [r1]
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e5      	bne.n	8007954 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	2b01      	cmp	r3, #1
 800798e:	d119      	bne.n	80079c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	330c      	adds	r3, #12
 8007996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	e853 3f00 	ldrex	r3, [r3]
 800799e:	60bb      	str	r3, [r7, #8]
   return(result);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f023 0310 	bic.w	r3, r3, #16
 80079a6:	647b      	str	r3, [r7, #68]	; 0x44
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	330c      	adds	r3, #12
 80079ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079b0:	61ba      	str	r2, [r7, #24]
 80079b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	6979      	ldr	r1, [r7, #20]
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	e841 2300 	strex	r3, r2, [r1]
 80079bc:	613b      	str	r3, [r7, #16]
   return(result);
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e5      	bne.n	8007990 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80079d2:	bf00      	nop
 80079d4:	3754      	adds	r7, #84	; 0x54
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f7ff ff77 	bl	80078ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079fe:	bf00      	nop
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b085      	sub	sp, #20
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b21      	cmp	r3, #33	; 0x21
 8007a18:	d13e      	bne.n	8007a98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a22:	d114      	bne.n	8007a4e <UART_Transmit_IT+0x48>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d110      	bne.n	8007a4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	1c9a      	adds	r2, r3, #2
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	621a      	str	r2, [r3, #32]
 8007a4c:	e008      	b.n	8007a60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	1c59      	adds	r1, r3, #1
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	6211      	str	r1, [r2, #32]
 8007a58:	781a      	ldrb	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	3b01      	subs	r3, #1
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10f      	bne.n	8007a94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	e000      	b.n	8007a9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a98:	2302      	movs	r3, #2
  }
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007abc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7ff fefc 	bl	80078c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b08c      	sub	sp, #48	; 0x30
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b22      	cmp	r3, #34	; 0x22
 8007ae8:	f040 80ab 	bne.w	8007c42 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af4:	d117      	bne.n	8007b26 <UART_Receive_IT+0x50>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d113      	bne.n	8007b26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b06:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1e:	1c9a      	adds	r2, r3, #2
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	629a      	str	r2, [r3, #40]	; 0x28
 8007b24:	e026      	b.n	8007b74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b38:	d007      	beq.n	8007b4a <UART_Receive_IT+0x74>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10a      	bne.n	8007b58 <UART_Receive_IT+0x82>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d106      	bne.n	8007b58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b54:	701a      	strb	r2, [r3, #0]
 8007b56:	e008      	b.n	8007b6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6e:	1c5a      	adds	r2, r3, #1
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	4619      	mov	r1, r3
 8007b82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d15a      	bne.n	8007c3e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68da      	ldr	r2, [r3, #12]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 0220 	bic.w	r2, r2, #32
 8007b96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ba6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695a      	ldr	r2, [r3, #20]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 0201 	bic.w	r2, r2, #1
 8007bb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d135      	bne.n	8007c34 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	330c      	adds	r3, #12
 8007bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f023 0310 	bic.w	r3, r3, #16
 8007be4:	627b      	str	r3, [r7, #36]	; 0x24
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	330c      	adds	r3, #12
 8007bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bee:	623a      	str	r2, [r7, #32]
 8007bf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	69f9      	ldr	r1, [r7, #28]
 8007bf4:	6a3a      	ldr	r2, [r7, #32]
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e5      	bne.n	8007bce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b10      	cmp	r3, #16
 8007c0e:	d10a      	bne.n	8007c26 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c10:	2300      	movs	r3, #0
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff fe67 	bl	8007900 <HAL_UARTEx_RxEventCallback>
 8007c32:	e002      	b.n	8007c3a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7ff fe4f 	bl	80078d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e002      	b.n	8007c44 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e000      	b.n	8007c44 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007c42:	2302      	movs	r3, #2
  }
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3730      	adds	r7, #48	; 0x30
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c50:	b0c0      	sub	sp, #256	; 0x100
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c68:	68d9      	ldr	r1, [r3, #12]
 8007c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	ea40 0301 	orr.w	r3, r0, r1
 8007c74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	431a      	orrs	r2, r3
 8007c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ca4:	f021 010c 	bic.w	r1, r1, #12
 8007ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007cb2:	430b      	orrs	r3, r1
 8007cb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc6:	6999      	ldr	r1, [r3, #24]
 8007cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	ea40 0301 	orr.w	r3, r0, r1
 8007cd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	4b8f      	ldr	r3, [pc, #572]	; (8007f18 <UART_SetConfig+0x2cc>)
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d005      	beq.n	8007cec <UART_SetConfig+0xa0>
 8007ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	4b8d      	ldr	r3, [pc, #564]	; (8007f1c <UART_SetConfig+0x2d0>)
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d104      	bne.n	8007cf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cec:	f7fd feac 	bl	8005a48 <HAL_RCC_GetPCLK2Freq>
 8007cf0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007cf4:	e003      	b.n	8007cfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cf6:	f7fd fe93 	bl	8005a20 <HAL_RCC_GetPCLK1Freq>
 8007cfa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d08:	f040 810c 	bne.w	8007f24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d10:	2200      	movs	r2, #0
 8007d12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007d1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007d1e:	4622      	mov	r2, r4
 8007d20:	462b      	mov	r3, r5
 8007d22:	1891      	adds	r1, r2, r2
 8007d24:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d26:	415b      	adcs	r3, r3
 8007d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d2e:	4621      	mov	r1, r4
 8007d30:	eb12 0801 	adds.w	r8, r2, r1
 8007d34:	4629      	mov	r1, r5
 8007d36:	eb43 0901 	adc.w	r9, r3, r1
 8007d3a:	f04f 0200 	mov.w	r2, #0
 8007d3e:	f04f 0300 	mov.w	r3, #0
 8007d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d4e:	4690      	mov	r8, r2
 8007d50:	4699      	mov	r9, r3
 8007d52:	4623      	mov	r3, r4
 8007d54:	eb18 0303 	adds.w	r3, r8, r3
 8007d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d5c:	462b      	mov	r3, r5
 8007d5e:	eb49 0303 	adc.w	r3, r9, r3
 8007d62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	18db      	adds	r3, r3, r3
 8007d7e:	653b      	str	r3, [r7, #80]	; 0x50
 8007d80:	4613      	mov	r3, r2
 8007d82:	eb42 0303 	adc.w	r3, r2, r3
 8007d86:	657b      	str	r3, [r7, #84]	; 0x54
 8007d88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d90:	f7f8 fa1a 	bl	80001c8 <__aeabi_uldivmod>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4b61      	ldr	r3, [pc, #388]	; (8007f20 <UART_SetConfig+0x2d4>)
 8007d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d9e:	095b      	lsrs	r3, r3, #5
 8007da0:	011c      	lsls	r4, r3, #4
 8007da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007da6:	2200      	movs	r2, #0
 8007da8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007dac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007db0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007db4:	4642      	mov	r2, r8
 8007db6:	464b      	mov	r3, r9
 8007db8:	1891      	adds	r1, r2, r2
 8007dba:	64b9      	str	r1, [r7, #72]	; 0x48
 8007dbc:	415b      	adcs	r3, r3
 8007dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007dc4:	4641      	mov	r1, r8
 8007dc6:	eb12 0a01 	adds.w	sl, r2, r1
 8007dca:	4649      	mov	r1, r9
 8007dcc:	eb43 0b01 	adc.w	fp, r3, r1
 8007dd0:	f04f 0200 	mov.w	r2, #0
 8007dd4:	f04f 0300 	mov.w	r3, #0
 8007dd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ddc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007de4:	4692      	mov	sl, r2
 8007de6:	469b      	mov	fp, r3
 8007de8:	4643      	mov	r3, r8
 8007dea:	eb1a 0303 	adds.w	r3, sl, r3
 8007dee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007df2:	464b      	mov	r3, r9
 8007df4:	eb4b 0303 	adc.w	r3, fp, r3
 8007df8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007e0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e10:	460b      	mov	r3, r1
 8007e12:	18db      	adds	r3, r3, r3
 8007e14:	643b      	str	r3, [r7, #64]	; 0x40
 8007e16:	4613      	mov	r3, r2
 8007e18:	eb42 0303 	adc.w	r3, r2, r3
 8007e1c:	647b      	str	r3, [r7, #68]	; 0x44
 8007e1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e26:	f7f8 f9cf 	bl	80001c8 <__aeabi_uldivmod>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4611      	mov	r1, r2
 8007e30:	4b3b      	ldr	r3, [pc, #236]	; (8007f20 <UART_SetConfig+0x2d4>)
 8007e32:	fba3 2301 	umull	r2, r3, r3, r1
 8007e36:	095b      	lsrs	r3, r3, #5
 8007e38:	2264      	movs	r2, #100	; 0x64
 8007e3a:	fb02 f303 	mul.w	r3, r2, r3
 8007e3e:	1acb      	subs	r3, r1, r3
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e46:	4b36      	ldr	r3, [pc, #216]	; (8007f20 <UART_SetConfig+0x2d4>)
 8007e48:	fba3 2302 	umull	r2, r3, r3, r2
 8007e4c:	095b      	lsrs	r3, r3, #5
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e54:	441c      	add	r4, r3
 8007e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007e64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e68:	4642      	mov	r2, r8
 8007e6a:	464b      	mov	r3, r9
 8007e6c:	1891      	adds	r1, r2, r2
 8007e6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e70:	415b      	adcs	r3, r3
 8007e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e78:	4641      	mov	r1, r8
 8007e7a:	1851      	adds	r1, r2, r1
 8007e7c:	6339      	str	r1, [r7, #48]	; 0x30
 8007e7e:	4649      	mov	r1, r9
 8007e80:	414b      	adcs	r3, r1
 8007e82:	637b      	str	r3, [r7, #52]	; 0x34
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	f04f 0300 	mov.w	r3, #0
 8007e8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007e90:	4659      	mov	r1, fp
 8007e92:	00cb      	lsls	r3, r1, #3
 8007e94:	4651      	mov	r1, sl
 8007e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e9a:	4651      	mov	r1, sl
 8007e9c:	00ca      	lsls	r2, r1, #3
 8007e9e:	4610      	mov	r0, r2
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	4642      	mov	r2, r8
 8007ea6:	189b      	adds	r3, r3, r2
 8007ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007eac:	464b      	mov	r3, r9
 8007eae:	460a      	mov	r2, r1
 8007eb0:	eb42 0303 	adc.w	r3, r2, r3
 8007eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ec4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ecc:	460b      	mov	r3, r1
 8007ece:	18db      	adds	r3, r3, r3
 8007ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	eb42 0303 	adc.w	r3, r2, r3
 8007ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ede:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007ee2:	f7f8 f971 	bl	80001c8 <__aeabi_uldivmod>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4b0d      	ldr	r3, [pc, #52]	; (8007f20 <UART_SetConfig+0x2d4>)
 8007eec:	fba3 1302 	umull	r1, r3, r3, r2
 8007ef0:	095b      	lsrs	r3, r3, #5
 8007ef2:	2164      	movs	r1, #100	; 0x64
 8007ef4:	fb01 f303 	mul.w	r3, r1, r3
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	3332      	adds	r3, #50	; 0x32
 8007efe:	4a08      	ldr	r2, [pc, #32]	; (8007f20 <UART_SetConfig+0x2d4>)
 8007f00:	fba2 2303 	umull	r2, r3, r2, r3
 8007f04:	095b      	lsrs	r3, r3, #5
 8007f06:	f003 0207 	and.w	r2, r3, #7
 8007f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4422      	add	r2, r4
 8007f12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f14:	e105      	b.n	8008122 <UART_SetConfig+0x4d6>
 8007f16:	bf00      	nop
 8007f18:	40011000 	.word	0x40011000
 8007f1c:	40011400 	.word	0x40011400
 8007f20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f36:	4642      	mov	r2, r8
 8007f38:	464b      	mov	r3, r9
 8007f3a:	1891      	adds	r1, r2, r2
 8007f3c:	6239      	str	r1, [r7, #32]
 8007f3e:	415b      	adcs	r3, r3
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
 8007f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f46:	4641      	mov	r1, r8
 8007f48:	1854      	adds	r4, r2, r1
 8007f4a:	4649      	mov	r1, r9
 8007f4c:	eb43 0501 	adc.w	r5, r3, r1
 8007f50:	f04f 0200 	mov.w	r2, #0
 8007f54:	f04f 0300 	mov.w	r3, #0
 8007f58:	00eb      	lsls	r3, r5, #3
 8007f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f5e:	00e2      	lsls	r2, r4, #3
 8007f60:	4614      	mov	r4, r2
 8007f62:	461d      	mov	r5, r3
 8007f64:	4643      	mov	r3, r8
 8007f66:	18e3      	adds	r3, r4, r3
 8007f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f6c:	464b      	mov	r3, r9
 8007f6e:	eb45 0303 	adc.w	r3, r5, r3
 8007f72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f86:	f04f 0200 	mov.w	r2, #0
 8007f8a:	f04f 0300 	mov.w	r3, #0
 8007f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f92:	4629      	mov	r1, r5
 8007f94:	008b      	lsls	r3, r1, #2
 8007f96:	4621      	mov	r1, r4
 8007f98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	008a      	lsls	r2, r1, #2
 8007fa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007fa4:	f7f8 f910 	bl	80001c8 <__aeabi_uldivmod>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4b60      	ldr	r3, [pc, #384]	; (8008130 <UART_SetConfig+0x4e4>)
 8007fae:	fba3 2302 	umull	r2, r3, r3, r2
 8007fb2:	095b      	lsrs	r3, r3, #5
 8007fb4:	011c      	lsls	r4, r3, #4
 8007fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007fc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007fc8:	4642      	mov	r2, r8
 8007fca:	464b      	mov	r3, r9
 8007fcc:	1891      	adds	r1, r2, r2
 8007fce:	61b9      	str	r1, [r7, #24]
 8007fd0:	415b      	adcs	r3, r3
 8007fd2:	61fb      	str	r3, [r7, #28]
 8007fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fd8:	4641      	mov	r1, r8
 8007fda:	1851      	adds	r1, r2, r1
 8007fdc:	6139      	str	r1, [r7, #16]
 8007fde:	4649      	mov	r1, r9
 8007fe0:	414b      	adcs	r3, r1
 8007fe2:	617b      	str	r3, [r7, #20]
 8007fe4:	f04f 0200 	mov.w	r2, #0
 8007fe8:	f04f 0300 	mov.w	r3, #0
 8007fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ff0:	4659      	mov	r1, fp
 8007ff2:	00cb      	lsls	r3, r1, #3
 8007ff4:	4651      	mov	r1, sl
 8007ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ffa:	4651      	mov	r1, sl
 8007ffc:	00ca      	lsls	r2, r1, #3
 8007ffe:	4610      	mov	r0, r2
 8008000:	4619      	mov	r1, r3
 8008002:	4603      	mov	r3, r0
 8008004:	4642      	mov	r2, r8
 8008006:	189b      	adds	r3, r3, r2
 8008008:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800800c:	464b      	mov	r3, r9
 800800e:	460a      	mov	r2, r1
 8008010:	eb42 0303 	adc.w	r3, r2, r3
 8008014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	67bb      	str	r3, [r7, #120]	; 0x78
 8008022:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008024:	f04f 0200 	mov.w	r2, #0
 8008028:	f04f 0300 	mov.w	r3, #0
 800802c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008030:	4649      	mov	r1, r9
 8008032:	008b      	lsls	r3, r1, #2
 8008034:	4641      	mov	r1, r8
 8008036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800803a:	4641      	mov	r1, r8
 800803c:	008a      	lsls	r2, r1, #2
 800803e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008042:	f7f8 f8c1 	bl	80001c8 <__aeabi_uldivmod>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4b39      	ldr	r3, [pc, #228]	; (8008130 <UART_SetConfig+0x4e4>)
 800804c:	fba3 1302 	umull	r1, r3, r3, r2
 8008050:	095b      	lsrs	r3, r3, #5
 8008052:	2164      	movs	r1, #100	; 0x64
 8008054:	fb01 f303 	mul.w	r3, r1, r3
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	011b      	lsls	r3, r3, #4
 800805c:	3332      	adds	r3, #50	; 0x32
 800805e:	4a34      	ldr	r2, [pc, #208]	; (8008130 <UART_SetConfig+0x4e4>)
 8008060:	fba2 2303 	umull	r2, r3, r2, r3
 8008064:	095b      	lsrs	r3, r3, #5
 8008066:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800806a:	441c      	add	r4, r3
 800806c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008070:	2200      	movs	r2, #0
 8008072:	673b      	str	r3, [r7, #112]	; 0x70
 8008074:	677a      	str	r2, [r7, #116]	; 0x74
 8008076:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800807a:	4642      	mov	r2, r8
 800807c:	464b      	mov	r3, r9
 800807e:	1891      	adds	r1, r2, r2
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	415b      	adcs	r3, r3
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800808a:	4641      	mov	r1, r8
 800808c:	1851      	adds	r1, r2, r1
 800808e:	6039      	str	r1, [r7, #0]
 8008090:	4649      	mov	r1, r9
 8008092:	414b      	adcs	r3, r1
 8008094:	607b      	str	r3, [r7, #4]
 8008096:	f04f 0200 	mov.w	r2, #0
 800809a:	f04f 0300 	mov.w	r3, #0
 800809e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80080a2:	4659      	mov	r1, fp
 80080a4:	00cb      	lsls	r3, r1, #3
 80080a6:	4651      	mov	r1, sl
 80080a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080ac:	4651      	mov	r1, sl
 80080ae:	00ca      	lsls	r2, r1, #3
 80080b0:	4610      	mov	r0, r2
 80080b2:	4619      	mov	r1, r3
 80080b4:	4603      	mov	r3, r0
 80080b6:	4642      	mov	r2, r8
 80080b8:	189b      	adds	r3, r3, r2
 80080ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80080bc:	464b      	mov	r3, r9
 80080be:	460a      	mov	r2, r1
 80080c0:	eb42 0303 	adc.w	r3, r2, r3
 80080c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	663b      	str	r3, [r7, #96]	; 0x60
 80080d0:	667a      	str	r2, [r7, #100]	; 0x64
 80080d2:	f04f 0200 	mov.w	r2, #0
 80080d6:	f04f 0300 	mov.w	r3, #0
 80080da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80080de:	4649      	mov	r1, r9
 80080e0:	008b      	lsls	r3, r1, #2
 80080e2:	4641      	mov	r1, r8
 80080e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080e8:	4641      	mov	r1, r8
 80080ea:	008a      	lsls	r2, r1, #2
 80080ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80080f0:	f7f8 f86a 	bl	80001c8 <__aeabi_uldivmod>
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	4b0d      	ldr	r3, [pc, #52]	; (8008130 <UART_SetConfig+0x4e4>)
 80080fa:	fba3 1302 	umull	r1, r3, r3, r2
 80080fe:	095b      	lsrs	r3, r3, #5
 8008100:	2164      	movs	r1, #100	; 0x64
 8008102:	fb01 f303 	mul.w	r3, r1, r3
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	011b      	lsls	r3, r3, #4
 800810a:	3332      	adds	r3, #50	; 0x32
 800810c:	4a08      	ldr	r2, [pc, #32]	; (8008130 <UART_SetConfig+0x4e4>)
 800810e:	fba2 2303 	umull	r2, r3, r2, r3
 8008112:	095b      	lsrs	r3, r3, #5
 8008114:	f003 020f 	and.w	r2, r3, #15
 8008118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4422      	add	r2, r4
 8008120:	609a      	str	r2, [r3, #8]
}
 8008122:	bf00      	nop
 8008124:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008128:	46bd      	mov	sp, r7
 800812a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800812e:	bf00      	nop
 8008130:	51eb851f 	.word	0x51eb851f

08008134 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008134:	b084      	sub	sp, #16
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	f107 001c 	add.w	r0, r7, #28
 8008142:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008148:	2b01      	cmp	r3, #1
 800814a:	d122      	bne.n	8008192 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008150:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008176:	2b01      	cmp	r3, #1
 8008178:	d105      	bne.n	8008186 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f001 fbee 	bl	8009968 <USB_CoreReset>
 800818c:	4603      	mov	r3, r0
 800818e:	73fb      	strb	r3, [r7, #15]
 8008190:	e01a      	b.n	80081c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f001 fbe2 	bl	8009968 <USB_CoreReset>
 80081a4:	4603      	mov	r3, r0
 80081a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80081a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d106      	bne.n	80081bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	639a      	str	r2, [r3, #56]	; 0x38
 80081ba:	e005      	b.n	80081c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d10b      	bne.n	80081e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f043 0206 	orr.w	r2, r3, #6
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f043 0220 	orr.w	r2, r3, #32
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081f2:	b004      	add	sp, #16
 80081f4:	4770      	bx	lr
	...

080081f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	4613      	mov	r3, r2
 8008204:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008206:	79fb      	ldrb	r3, [r7, #7]
 8008208:	2b02      	cmp	r3, #2
 800820a:	d165      	bne.n	80082d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	4a41      	ldr	r2, [pc, #260]	; (8008314 <USB_SetTurnaroundTime+0x11c>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d906      	bls.n	8008222 <USB_SetTurnaroundTime+0x2a>
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	4a40      	ldr	r2, [pc, #256]	; (8008318 <USB_SetTurnaroundTime+0x120>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d202      	bcs.n	8008222 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800821c:	230f      	movs	r3, #15
 800821e:	617b      	str	r3, [r7, #20]
 8008220:	e062      	b.n	80082e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	4a3c      	ldr	r2, [pc, #240]	; (8008318 <USB_SetTurnaroundTime+0x120>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d306      	bcc.n	8008238 <USB_SetTurnaroundTime+0x40>
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	4a3b      	ldr	r2, [pc, #236]	; (800831c <USB_SetTurnaroundTime+0x124>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d202      	bcs.n	8008238 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008232:	230e      	movs	r3, #14
 8008234:	617b      	str	r3, [r7, #20]
 8008236:	e057      	b.n	80082e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	4a38      	ldr	r2, [pc, #224]	; (800831c <USB_SetTurnaroundTime+0x124>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d306      	bcc.n	800824e <USB_SetTurnaroundTime+0x56>
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	4a37      	ldr	r2, [pc, #220]	; (8008320 <USB_SetTurnaroundTime+0x128>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d202      	bcs.n	800824e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008248:	230d      	movs	r3, #13
 800824a:	617b      	str	r3, [r7, #20]
 800824c:	e04c      	b.n	80082e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	4a33      	ldr	r2, [pc, #204]	; (8008320 <USB_SetTurnaroundTime+0x128>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d306      	bcc.n	8008264 <USB_SetTurnaroundTime+0x6c>
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	4a32      	ldr	r2, [pc, #200]	; (8008324 <USB_SetTurnaroundTime+0x12c>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d802      	bhi.n	8008264 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800825e:	230c      	movs	r3, #12
 8008260:	617b      	str	r3, [r7, #20]
 8008262:	e041      	b.n	80082e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	4a2f      	ldr	r2, [pc, #188]	; (8008324 <USB_SetTurnaroundTime+0x12c>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d906      	bls.n	800827a <USB_SetTurnaroundTime+0x82>
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	4a2e      	ldr	r2, [pc, #184]	; (8008328 <USB_SetTurnaroundTime+0x130>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d802      	bhi.n	800827a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008274:	230b      	movs	r3, #11
 8008276:	617b      	str	r3, [r7, #20]
 8008278:	e036      	b.n	80082e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	4a2a      	ldr	r2, [pc, #168]	; (8008328 <USB_SetTurnaroundTime+0x130>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d906      	bls.n	8008290 <USB_SetTurnaroundTime+0x98>
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	4a29      	ldr	r2, [pc, #164]	; (800832c <USB_SetTurnaroundTime+0x134>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d802      	bhi.n	8008290 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800828a:	230a      	movs	r3, #10
 800828c:	617b      	str	r3, [r7, #20]
 800828e:	e02b      	b.n	80082e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	4a26      	ldr	r2, [pc, #152]	; (800832c <USB_SetTurnaroundTime+0x134>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d906      	bls.n	80082a6 <USB_SetTurnaroundTime+0xae>
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	4a25      	ldr	r2, [pc, #148]	; (8008330 <USB_SetTurnaroundTime+0x138>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d202      	bcs.n	80082a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80082a0:	2309      	movs	r3, #9
 80082a2:	617b      	str	r3, [r7, #20]
 80082a4:	e020      	b.n	80082e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	4a21      	ldr	r2, [pc, #132]	; (8008330 <USB_SetTurnaroundTime+0x138>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d306      	bcc.n	80082bc <USB_SetTurnaroundTime+0xc4>
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	4a20      	ldr	r2, [pc, #128]	; (8008334 <USB_SetTurnaroundTime+0x13c>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d802      	bhi.n	80082bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80082b6:	2308      	movs	r3, #8
 80082b8:	617b      	str	r3, [r7, #20]
 80082ba:	e015      	b.n	80082e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	4a1d      	ldr	r2, [pc, #116]	; (8008334 <USB_SetTurnaroundTime+0x13c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d906      	bls.n	80082d2 <USB_SetTurnaroundTime+0xda>
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	4a1c      	ldr	r2, [pc, #112]	; (8008338 <USB_SetTurnaroundTime+0x140>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d202      	bcs.n	80082d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80082cc:	2307      	movs	r3, #7
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	e00a      	b.n	80082e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80082d2:	2306      	movs	r3, #6
 80082d4:	617b      	str	r3, [r7, #20]
 80082d6:	e007      	b.n	80082e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80082d8:	79fb      	ldrb	r3, [r7, #7]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d102      	bne.n	80082e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80082de:	2309      	movs	r3, #9
 80082e0:	617b      	str	r3, [r7, #20]
 80082e2:	e001      	b.n	80082e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80082e4:	2309      	movs	r3, #9
 80082e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	68da      	ldr	r2, [r3, #12]
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	029b      	lsls	r3, r3, #10
 80082fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008300:	431a      	orrs	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	371c      	adds	r7, #28
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	00d8acbf 	.word	0x00d8acbf
 8008318:	00e4e1c0 	.word	0x00e4e1c0
 800831c:	00f42400 	.word	0x00f42400
 8008320:	01067380 	.word	0x01067380
 8008324:	011a499f 	.word	0x011a499f
 8008328:	01312cff 	.word	0x01312cff
 800832c:	014ca43f 	.word	0x014ca43f
 8008330:	016e3600 	.word	0x016e3600
 8008334:	01a6ab1f 	.word	0x01a6ab1f
 8008338:	01e84800 	.word	0x01e84800

0800833c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f043 0201 	orr.w	r2, r3, #1
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800835e:	b480      	push	{r7}
 8008360:	b083      	sub	sp, #12
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f023 0201 	bic.w	r2, r3, #1
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800838c:	2300      	movs	r3, #0
 800838e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800839c:	78fb      	ldrb	r3, [r7, #3]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d115      	bne.n	80083ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80083ae:	2001      	movs	r0, #1
 80083b0:	f7f8 ff90 	bl	80012d4 <HAL_Delay>
      ms++;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3301      	adds	r3, #1
 80083b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f001 fa45 	bl	800984a <USB_GetMode>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d01e      	beq.n	8008404 <USB_SetCurrentMode+0x84>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2b31      	cmp	r3, #49	; 0x31
 80083ca:	d9f0      	bls.n	80083ae <USB_SetCurrentMode+0x2e>
 80083cc:	e01a      	b.n	8008404 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80083ce:	78fb      	ldrb	r3, [r7, #3]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d115      	bne.n	8008400 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80083e0:	2001      	movs	r0, #1
 80083e2:	f7f8 ff77 	bl	80012d4 <HAL_Delay>
      ms++;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3301      	adds	r3, #1
 80083ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 fa2c 	bl	800984a <USB_GetMode>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d005      	beq.n	8008404 <USB_SetCurrentMode+0x84>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b31      	cmp	r3, #49	; 0x31
 80083fc:	d9f0      	bls.n	80083e0 <USB_SetCurrentMode+0x60>
 80083fe:	e001      	b.n	8008404 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e005      	b.n	8008410 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b32      	cmp	r3, #50	; 0x32
 8008408:	d101      	bne.n	800840e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e000      	b.n	8008410 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008418:	b084      	sub	sp, #16
 800841a:	b580      	push	{r7, lr}
 800841c:	b086      	sub	sp, #24
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008432:	2300      	movs	r3, #0
 8008434:	613b      	str	r3, [r7, #16]
 8008436:	e009      	b.n	800844c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	3340      	adds	r3, #64	; 0x40
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	2200      	movs	r2, #0
 8008444:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	3301      	adds	r3, #1
 800844a:	613b      	str	r3, [r7, #16]
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	2b0e      	cmp	r3, #14
 8008450:	d9f2      	bls.n	8008438 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008454:	2b00      	cmp	r3, #0
 8008456:	d11c      	bne.n	8008492 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008466:	f043 0302 	orr.w	r3, r3, #2
 800846a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008470:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008488:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	639a      	str	r2, [r3, #56]	; 0x38
 8008490:	e00b      	b.n	80084aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008496:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084b0:	461a      	mov	r2, r3
 80084b2:	2300      	movs	r3, #0
 80084b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084bc:	4619      	mov	r1, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084c4:	461a      	mov	r2, r3
 80084c6:	680b      	ldr	r3, [r1, #0]
 80084c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d10c      	bne.n	80084ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80084d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d104      	bne.n	80084e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80084d6:	2100      	movs	r1, #0
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f965 	bl	80087a8 <USB_SetDevSpeed>
 80084de:	e008      	b.n	80084f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80084e0:	2101      	movs	r1, #1
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f960 	bl	80087a8 <USB_SetDevSpeed>
 80084e8:	e003      	b.n	80084f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80084ea:	2103      	movs	r1, #3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f95b 	bl	80087a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80084f2:	2110      	movs	r1, #16
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f8f3 	bl	80086e0 <USB_FlushTxFifo>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f91f 	bl	8008748 <USB_FlushRxFifo>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800851a:	461a      	mov	r2, r3
 800851c:	2300      	movs	r3, #0
 800851e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008526:	461a      	mov	r2, r3
 8008528:	2300      	movs	r3, #0
 800852a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008532:	461a      	mov	r2, r3
 8008534:	2300      	movs	r3, #0
 8008536:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008538:	2300      	movs	r3, #0
 800853a:	613b      	str	r3, [r7, #16]
 800853c:	e043      	b.n	80085c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4413      	add	r3, r2
 8008546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008554:	d118      	bne.n	8008588 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10a      	bne.n	8008572 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008568:	461a      	mov	r2, r3
 800856a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800856e:	6013      	str	r3, [r2, #0]
 8008570:	e013      	b.n	800859a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	4413      	add	r3, r2
 800857a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800857e:	461a      	mov	r2, r3
 8008580:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008584:	6013      	str	r3, [r2, #0]
 8008586:	e008      	b.n	800859a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008594:	461a      	mov	r2, r3
 8008596:	2300      	movs	r3, #0
 8008598:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	015a      	lsls	r2, r3, #5
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	4413      	add	r3, r2
 80085a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a6:	461a      	mov	r2, r3
 80085a8:	2300      	movs	r3, #0
 80085aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b8:	461a      	mov	r2, r3
 80085ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	3301      	adds	r3, #1
 80085c4:	613b      	str	r3, [r7, #16]
 80085c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d3b7      	bcc.n	800853e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085ce:	2300      	movs	r3, #0
 80085d0:	613b      	str	r3, [r7, #16]
 80085d2:	e043      	b.n	800865c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085ea:	d118      	bne.n	800861e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10a      	bne.n	8008608 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	015a      	lsls	r2, r3, #5
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	4413      	add	r3, r2
 80085fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085fe:	461a      	mov	r2, r3
 8008600:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	e013      	b.n	8008630 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	015a      	lsls	r2, r3, #5
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4413      	add	r3, r2
 8008610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008614:	461a      	mov	r2, r3
 8008616:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800861a:	6013      	str	r3, [r2, #0]
 800861c:	e008      	b.n	8008630 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	4413      	add	r3, r2
 8008626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862a:	461a      	mov	r2, r3
 800862c:	2300      	movs	r3, #0
 800862e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	4413      	add	r3, r2
 8008638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800863c:	461a      	mov	r2, r3
 800863e:	2300      	movs	r3, #0
 8008640:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	015a      	lsls	r2, r3, #5
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	4413      	add	r3, r2
 800864a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800864e:	461a      	mov	r2, r3
 8008650:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008654:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	3301      	adds	r3, #1
 800865a:	613b      	str	r3, [r7, #16]
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	429a      	cmp	r2, r3
 8008662:	d3b7      	bcc.n	80085d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008672:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008676:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008684:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008688:	2b00      	cmp	r3, #0
 800868a:	d105      	bne.n	8008698 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	f043 0210 	orr.w	r2, r3, #16
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	699a      	ldr	r2, [r3, #24]
 800869c:	4b0f      	ldr	r3, [pc, #60]	; (80086dc <USB_DevInit+0x2c4>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80086a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d005      	beq.n	80086b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	f043 0208 	orr.w	r2, r3, #8
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80086b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d107      	bne.n	80086cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086c4:	f043 0304 	orr.w	r3, r3, #4
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3718      	adds	r7, #24
 80086d2:	46bd      	mov	sp, r7
 80086d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086d8:	b004      	add	sp, #16
 80086da:	4770      	bx	lr
 80086dc:	803c3800 	.word	0x803c3800

080086e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3301      	adds	r3, #1
 80086f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4a13      	ldr	r2, [pc, #76]	; (8008744 <USB_FlushTxFifo+0x64>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d901      	bls.n	8008700 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e01b      	b.n	8008738 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	daf2      	bge.n	80086ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	019b      	lsls	r3, r3, #6
 8008710:	f043 0220 	orr.w	r2, r3, #32
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	3301      	adds	r3, #1
 800871c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	4a08      	ldr	r2, [pc, #32]	; (8008744 <USB_FlushTxFifo+0x64>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d901      	bls.n	800872a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e006      	b.n	8008738 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	f003 0320 	and.w	r3, r3, #32
 8008732:	2b20      	cmp	r3, #32
 8008734:	d0f0      	beq.n	8008718 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3714      	adds	r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	00030d40 	.word	0x00030d40

08008748 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008750:	2300      	movs	r3, #0
 8008752:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	3301      	adds	r3, #1
 8008758:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	4a11      	ldr	r2, [pc, #68]	; (80087a4 <USB_FlushRxFifo+0x5c>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d901      	bls.n	8008766 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e018      	b.n	8008798 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	daf2      	bge.n	8008754 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2210      	movs	r2, #16
 8008776:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3301      	adds	r3, #1
 800877c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4a08      	ldr	r2, [pc, #32]	; (80087a4 <USB_FlushRxFifo+0x5c>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d901      	bls.n	800878a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e006      	b.n	8008798 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	f003 0310 	and.w	r3, r3, #16
 8008792:	2b10      	cmp	r3, #16
 8008794:	d0f0      	beq.n	8008778 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3714      	adds	r7, #20
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	00030d40 	.word	0x00030d40

080087a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	68f9      	ldr	r1, [r7, #12]
 80087c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087c8:	4313      	orrs	r3, r2
 80087ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80087da:	b480      	push	{r7}
 80087dc:	b087      	sub	sp, #28
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f003 0306 	and.w	r3, r3, #6
 80087f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d102      	bne.n	8008800 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80087fa:	2300      	movs	r3, #0
 80087fc:	75fb      	strb	r3, [r7, #23]
 80087fe:	e00a      	b.n	8008816 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b02      	cmp	r3, #2
 8008804:	d002      	beq.n	800880c <USB_GetDevSpeed+0x32>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2b06      	cmp	r3, #6
 800880a:	d102      	bne.n	8008812 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800880c:	2302      	movs	r3, #2
 800880e:	75fb      	strb	r3, [r7, #23]
 8008810:	e001      	b.n	8008816 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008812:	230f      	movs	r3, #15
 8008814:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008816:	7dfb      	ldrb	r3, [r7, #23]
}
 8008818:	4618      	mov	r0, r3
 800881a:	371c      	adds	r7, #28
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	785b      	ldrb	r3, [r3, #1]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d13a      	bne.n	80088b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008846:	69da      	ldr	r2, [r3, #28]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	f003 030f 	and.w	r3, r3, #15
 8008850:	2101      	movs	r1, #1
 8008852:	fa01 f303 	lsl.w	r3, r1, r3
 8008856:	b29b      	uxth	r3, r3
 8008858:	68f9      	ldr	r1, [r7, #12]
 800885a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800885e:	4313      	orrs	r3, r2
 8008860:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	4413      	add	r3, r2
 800886a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d155      	bne.n	8008924 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4413      	add	r3, r2
 8008880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	791b      	ldrb	r3, [r3, #4]
 8008892:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008894:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	059b      	lsls	r3, r3, #22
 800889a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800889c:	4313      	orrs	r3, r2
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	0151      	lsls	r1, r2, #5
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	440a      	add	r2, r1
 80088a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088b2:	6013      	str	r3, [r2, #0]
 80088b4:	e036      	b.n	8008924 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088bc:	69da      	ldr	r2, [r3, #28]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	f003 030f 	and.w	r3, r3, #15
 80088c6:	2101      	movs	r1, #1
 80088c8:	fa01 f303 	lsl.w	r3, r1, r3
 80088cc:	041b      	lsls	r3, r3, #16
 80088ce:	68f9      	ldr	r1, [r7, #12]
 80088d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088d4:	4313      	orrs	r3, r2
 80088d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d11a      	bne.n	8008924 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	015a      	lsls	r2, r3, #5
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	4413      	add	r3, r2
 80088f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	791b      	ldrb	r3, [r3, #4]
 8008908:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800890a:	430b      	orrs	r3, r1
 800890c:	4313      	orrs	r3, r2
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	0151      	lsls	r1, r2, #5
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	440a      	add	r2, r1
 8008916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800891a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800891e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008922:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
	...

08008934 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	785b      	ldrb	r3, [r3, #1]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d161      	bne.n	8008a14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008962:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008966:	d11f      	bne.n	80089a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	015a      	lsls	r2, r3, #5
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	4413      	add	r3, r2
 8008970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	0151      	lsls	r1, r2, #5
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	440a      	add	r2, r1
 800897e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008982:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008986:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	015a      	lsls	r2, r3, #5
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	4413      	add	r3, r2
 8008990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	0151      	lsls	r1, r2, #5
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	440a      	add	r2, r1
 800899e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	f003 030f 	and.w	r3, r3, #15
 80089b8:	2101      	movs	r1, #1
 80089ba:	fa01 f303 	lsl.w	r3, r1, r3
 80089be:	b29b      	uxth	r3, r3
 80089c0:	43db      	mvns	r3, r3
 80089c2:	68f9      	ldr	r1, [r7, #12]
 80089c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089c8:	4013      	ands	r3, r2
 80089ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d2:	69da      	ldr	r2, [r3, #28]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	f003 030f 	and.w	r3, r3, #15
 80089dc:	2101      	movs	r1, #1
 80089de:	fa01 f303 	lsl.w	r3, r1, r3
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	43db      	mvns	r3, r3
 80089e6:	68f9      	ldr	r1, [r7, #12]
 80089e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089ec:	4013      	ands	r3, r2
 80089ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	015a      	lsls	r2, r3, #5
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	0159      	lsls	r1, r3, #5
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	440b      	add	r3, r1
 8008a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4b35      	ldr	r3, [pc, #212]	; (8008ae4 <USB_DeactivateEndpoint+0x1b0>)
 8008a0e:	4013      	ands	r3, r2
 8008a10:	600b      	str	r3, [r1, #0]
 8008a12:	e060      	b.n	8008ad6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a2a:	d11f      	bne.n	8008a6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	015a      	lsls	r2, r3, #5
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	4413      	add	r3, r2
 8008a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	0151      	lsls	r1, r2, #5
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	440a      	add	r2, r1
 8008a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	0151      	lsls	r1, r2, #5
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	440a      	add	r2, r1
 8008a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	f003 030f 	and.w	r3, r3, #15
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a82:	041b      	lsls	r3, r3, #16
 8008a84:	43db      	mvns	r3, r3
 8008a86:	68f9      	ldr	r1, [r7, #12]
 8008a88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a96:	69da      	ldr	r2, [r3, #28]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	f003 030f 	and.w	r3, r3, #15
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa6:	041b      	lsls	r3, r3, #16
 8008aa8:	43db      	mvns	r3, r3
 8008aaa:	68f9      	ldr	r1, [r7, #12]
 8008aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	0159      	lsls	r1, r3, #5
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	440b      	add	r3, r1
 8008aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4b05      	ldr	r3, [pc, #20]	; (8008ae8 <USB_DeactivateEndpoint+0x1b4>)
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3714      	adds	r7, #20
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	ec337800 	.word	0xec337800
 8008ae8:	eff37800 	.word	0xeff37800

08008aec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08a      	sub	sp, #40	; 0x28
 8008af0:	af02      	add	r7, sp, #8
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	4613      	mov	r3, r2
 8008af8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	785b      	ldrb	r3, [r3, #1]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	f040 815c 	bne.w	8008dc6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d132      	bne.n	8008b7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	015a      	lsls	r2, r3, #5
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	0151      	lsls	r1, r2, #5
 8008b28:	69fa      	ldr	r2, [r7, #28]
 8008b2a:	440a      	add	r2, r1
 8008b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	0151      	lsls	r1, r2, #5
 8008b4c:	69fa      	ldr	r2, [r7, #28]
 8008b4e:	440a      	add	r2, r1
 8008b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	0151      	lsls	r1, r2, #5
 8008b6c:	69fa      	ldr	r2, [r7, #28]
 8008b6e:	440a      	add	r2, r1
 8008b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b74:	0cdb      	lsrs	r3, r3, #19
 8008b76:	04db      	lsls	r3, r3, #19
 8008b78:	6113      	str	r3, [r2, #16]
 8008b7a:	e074      	b.n	8008c66 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	0151      	lsls	r1, r2, #5
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	440a      	add	r2, r1
 8008b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b96:	0cdb      	lsrs	r3, r3, #19
 8008b98:	04db      	lsls	r3, r3, #19
 8008b9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	015a      	lsls	r2, r3, #5
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	69ba      	ldr	r2, [r7, #24]
 8008bac:	0151      	lsls	r1, r2, #5
 8008bae:	69fa      	ldr	r2, [r7, #28]
 8008bb0:	440a      	add	r2, r1
 8008bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bb6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008bba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008bbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bcc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	6999      	ldr	r1, [r3, #24]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	440b      	add	r3, r1
 8008bd8:	1e59      	subs	r1, r3, #1
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	fbb1 f3f3 	udiv	r3, r1, r3
 8008be2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008be4:	4b9d      	ldr	r3, [pc, #628]	; (8008e5c <USB_EPStartXfer+0x370>)
 8008be6:	400b      	ands	r3, r1
 8008be8:	69b9      	ldr	r1, [r7, #24]
 8008bea:	0148      	lsls	r0, r1, #5
 8008bec:	69f9      	ldr	r1, [r7, #28]
 8008bee:	4401      	add	r1, r0
 8008bf0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c04:	691a      	ldr	r2, [r3, #16]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c0e:	69b9      	ldr	r1, [r7, #24]
 8008c10:	0148      	lsls	r0, r1, #5
 8008c12:	69f9      	ldr	r1, [r7, #28]
 8008c14:	4401      	add	r1, r0
 8008c16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	791b      	ldrb	r3, [r3, #4]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d11f      	bne.n	8008c66 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	015a      	lsls	r2, r3, #5
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	69ba      	ldr	r2, [r7, #24]
 8008c36:	0151      	lsls	r1, r2, #5
 8008c38:	69fa      	ldr	r2, [r7, #28]
 8008c3a:	440a      	add	r2, r1
 8008c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c40:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008c44:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	015a      	lsls	r2, r3, #5
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	0151      	lsls	r1, r2, #5
 8008c58:	69fa      	ldr	r2, [r7, #28]
 8008c5a:	440a      	add	r2, r1
 8008c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c64:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008c66:	79fb      	ldrb	r3, [r7, #7]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d14b      	bne.n	8008d04 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d009      	beq.n	8008c88 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	015a      	lsls	r2, r3, #5
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c80:	461a      	mov	r2, r3
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	791b      	ldrb	r3, [r3, #4]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d128      	bne.n	8008ce2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d110      	bne.n	8008cc2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	0151      	lsls	r1, r2, #5
 8008cb2:	69fa      	ldr	r2, [r7, #28]
 8008cb4:	440a      	add	r2, r1
 8008cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008cbe:	6013      	str	r3, [r2, #0]
 8008cc0:	e00f      	b.n	8008ce2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	0151      	lsls	r1, r2, #5
 8008cd4:	69fa      	ldr	r2, [r7, #28]
 8008cd6:	440a      	add	r2, r1
 8008cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ce0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	0151      	lsls	r1, r2, #5
 8008cf4:	69fa      	ldr	r2, [r7, #28]
 8008cf6:	440a      	add	r2, r1
 8008cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cfc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	e133      	b.n	8008f6c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	0151      	lsls	r1, r2, #5
 8008d16:	69fa      	ldr	r2, [r7, #28]
 8008d18:	440a      	add	r2, r1
 8008d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	791b      	ldrb	r3, [r3, #4]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d015      	beq.n	8008d58 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 811b 	beq.w	8008f6c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	f003 030f 	and.w	r3, r3, #15
 8008d46:	2101      	movs	r1, #1
 8008d48:	fa01 f303 	lsl.w	r3, r1, r3
 8008d4c:	69f9      	ldr	r1, [r7, #28]
 8008d4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d52:	4313      	orrs	r3, r2
 8008d54:	634b      	str	r3, [r1, #52]	; 0x34
 8008d56:	e109      	b.n	8008f6c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d110      	bne.n	8008d8a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	69ba      	ldr	r2, [r7, #24]
 8008d78:	0151      	lsls	r1, r2, #5
 8008d7a:	69fa      	ldr	r2, [r7, #28]
 8008d7c:	440a      	add	r2, r1
 8008d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d86:	6013      	str	r3, [r2, #0]
 8008d88:	e00f      	b.n	8008daa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	015a      	lsls	r2, r3, #5
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	69ba      	ldr	r2, [r7, #24]
 8008d9a:	0151      	lsls	r1, r2, #5
 8008d9c:	69fa      	ldr	r2, [r7, #28]
 8008d9e:	440a      	add	r2, r1
 8008da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008da8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	6919      	ldr	r1, [r3, #16]
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	781a      	ldrb	r2, [r3, #0]
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	b298      	uxth	r0, r3
 8008db8:	79fb      	ldrb	r3, [r7, #7]
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f000 fade 	bl	8009380 <USB_WritePacket>
 8008dc4:	e0d2      	b.n	8008f6c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	69ba      	ldr	r2, [r7, #24]
 8008dd6:	0151      	lsls	r1, r2, #5
 8008dd8:	69fa      	ldr	r2, [r7, #28]
 8008dda:	440a      	add	r2, r1
 8008ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008de0:	0cdb      	lsrs	r3, r3, #19
 8008de2:	04db      	lsls	r3, r3, #19
 8008de4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	4413      	add	r3, r2
 8008dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	0151      	lsls	r1, r2, #5
 8008df8:	69fa      	ldr	r2, [r7, #28]
 8008dfa:	440a      	add	r2, r1
 8008dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d126      	bne.n	8008e60 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	015a      	lsls	r2, r3, #5
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	4413      	add	r3, r2
 8008e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e1e:	691a      	ldr	r2, [r3, #16]
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e28:	69b9      	ldr	r1, [r7, #24]
 8008e2a:	0148      	lsls	r0, r1, #5
 8008e2c:	69f9      	ldr	r1, [r7, #28]
 8008e2e:	4401      	add	r1, r0
 8008e30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e34:	4313      	orrs	r3, r2
 8008e36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	015a      	lsls	r2, r3, #5
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	4413      	add	r3, r2
 8008e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	69ba      	ldr	r2, [r7, #24]
 8008e48:	0151      	lsls	r1, r2, #5
 8008e4a:	69fa      	ldr	r2, [r7, #28]
 8008e4c:	440a      	add	r2, r1
 8008e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e56:	6113      	str	r3, [r2, #16]
 8008e58:	e03a      	b.n	8008ed0 <USB_EPStartXfer+0x3e4>
 8008e5a:	bf00      	nop
 8008e5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	699a      	ldr	r2, [r3, #24]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	4413      	add	r3, r2
 8008e6a:	1e5a      	subs	r2, r3, #1
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e74:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	8afa      	ldrh	r2, [r7, #22]
 8008e7c:	fb03 f202 	mul.w	r2, r3, r2
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	015a      	lsls	r2, r3, #5
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e90:	691a      	ldr	r2, [r3, #16]
 8008e92:	8afb      	ldrh	r3, [r7, #22]
 8008e94:	04d9      	lsls	r1, r3, #19
 8008e96:	4b38      	ldr	r3, [pc, #224]	; (8008f78 <USB_EPStartXfer+0x48c>)
 8008e98:	400b      	ands	r3, r1
 8008e9a:	69b9      	ldr	r1, [r7, #24]
 8008e9c:	0148      	lsls	r0, r1, #5
 8008e9e:	69f9      	ldr	r1, [r7, #28]
 8008ea0:	4401      	add	r1, r0
 8008ea2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb6:	691a      	ldr	r2, [r3, #16]
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	69db      	ldr	r3, [r3, #28]
 8008ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ec0:	69b9      	ldr	r1, [r7, #24]
 8008ec2:	0148      	lsls	r0, r1, #5
 8008ec4:	69f9      	ldr	r1, [r7, #28]
 8008ec6:	4401      	add	r1, r0
 8008ec8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d10d      	bne.n	8008ef2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d009      	beq.n	8008ef2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	6919      	ldr	r1, [r3, #16]
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eee:	460a      	mov	r2, r1
 8008ef0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	791b      	ldrb	r3, [r3, #4]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d128      	bne.n	8008f4c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d110      	bne.n	8008f2c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	015a      	lsls	r2, r3, #5
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	4413      	add	r3, r2
 8008f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	69ba      	ldr	r2, [r7, #24]
 8008f1a:	0151      	lsls	r1, r2, #5
 8008f1c:	69fa      	ldr	r2, [r7, #28]
 8008f1e:	440a      	add	r2, r1
 8008f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	e00f      	b.n	8008f4c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	69ba      	ldr	r2, [r7, #24]
 8008f3c:	0151      	lsls	r1, r2, #5
 8008f3e:	69fa      	ldr	r2, [r7, #28]
 8008f40:	440a      	add	r2, r1
 8008f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	69ba      	ldr	r2, [r7, #24]
 8008f5c:	0151      	lsls	r1, r2, #5
 8008f5e:	69fa      	ldr	r2, [r7, #28]
 8008f60:	440a      	add	r2, r1
 8008f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3720      	adds	r7, #32
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	1ff80000 	.word	0x1ff80000

08008f7c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	4613      	mov	r3, r2
 8008f88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	785b      	ldrb	r3, [r3, #1]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	f040 80ce 	bne.w	800913a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d132      	bne.n	800900c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	0151      	lsls	r1, r2, #5
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	440a      	add	r2, r1
 8008fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008fc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008fc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	693a      	ldr	r2, [r7, #16]
 8008fda:	0151      	lsls	r1, r2, #5
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	440a      	add	r2, r1
 8008fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fe4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fe8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	0151      	lsls	r1, r2, #5
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	440a      	add	r2, r1
 8009000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009004:	0cdb      	lsrs	r3, r3, #19
 8009006:	04db      	lsls	r3, r3, #19
 8009008:	6113      	str	r3, [r2, #16]
 800900a:	e04e      	b.n	80090aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	015a      	lsls	r2, r3, #5
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	4413      	add	r3, r2
 8009014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	0151      	lsls	r1, r2, #5
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	440a      	add	r2, r1
 8009022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009026:	0cdb      	lsrs	r3, r3, #19
 8009028:	04db      	lsls	r3, r3, #19
 800902a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	4413      	add	r3, r2
 8009034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	693a      	ldr	r2, [r7, #16]
 800903c:	0151      	lsls	r1, r2, #5
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	440a      	add	r2, r1
 8009042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009046:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800904a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800904e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	699a      	ldr	r2, [r3, #24]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	429a      	cmp	r2, r3
 800905a:	d903      	bls.n	8009064 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	68da      	ldr	r2, [r3, #12]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	015a      	lsls	r2, r3, #5
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	4413      	add	r3, r2
 800906c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	693a      	ldr	r2, [r7, #16]
 8009074:	0151      	lsls	r1, r2, #5
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	440a      	add	r2, r1
 800907a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800907e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009082:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	015a      	lsls	r2, r3, #5
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	4413      	add	r3, r2
 800908c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009090:	691a      	ldr	r2, [r3, #16]
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800909a:	6939      	ldr	r1, [r7, #16]
 800909c:	0148      	lsls	r0, r1, #5
 800909e:	6979      	ldr	r1, [r7, #20]
 80090a0:	4401      	add	r1, r0
 80090a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80090a6:	4313      	orrs	r3, r2
 80090a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80090aa:	79fb      	ldrb	r3, [r7, #7]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d11e      	bne.n	80090ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	695b      	ldr	r3, [r3, #20]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d009      	beq.n	80090cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c4:	461a      	mov	r2, r3
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	015a      	lsls	r2, r3, #5
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	4413      	add	r3, r2
 80090d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	693a      	ldr	r2, [r7, #16]
 80090dc:	0151      	lsls	r1, r2, #5
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	440a      	add	r2, r1
 80090e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80090ea:	6013      	str	r3, [r2, #0]
 80090ec:	e097      	b.n	800921e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	015a      	lsls	r2, r3, #5
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	4413      	add	r3, r2
 80090f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	0151      	lsls	r1, r2, #5
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	440a      	add	r2, r1
 8009104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009108:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800910c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	699b      	ldr	r3, [r3, #24]
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 8083 	beq.w	800921e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800911e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	f003 030f 	and.w	r3, r3, #15
 8009128:	2101      	movs	r1, #1
 800912a:	fa01 f303 	lsl.w	r3, r1, r3
 800912e:	6979      	ldr	r1, [r7, #20]
 8009130:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009134:	4313      	orrs	r3, r2
 8009136:	634b      	str	r3, [r1, #52]	; 0x34
 8009138:	e071      	b.n	800921e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	015a      	lsls	r2, r3, #5
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	4413      	add	r3, r2
 8009142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	693a      	ldr	r2, [r7, #16]
 800914a:	0151      	lsls	r1, r2, #5
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	440a      	add	r2, r1
 8009150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009154:	0cdb      	lsrs	r3, r3, #19
 8009156:	04db      	lsls	r3, r3, #19
 8009158:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	0151      	lsls	r1, r2, #5
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	440a      	add	r2, r1
 8009170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009174:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009178:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800917c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d003      	beq.n	800918e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	68da      	ldr	r2, [r3, #12]
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	68da      	ldr	r2, [r3, #12]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	015a      	lsls	r2, r3, #5
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	4413      	add	r3, r2
 800919e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	0151      	lsls	r1, r2, #5
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	440a      	add	r2, r1
 80091ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c2:	691a      	ldr	r2, [r3, #16]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091cc:	6939      	ldr	r1, [r7, #16]
 80091ce:	0148      	lsls	r0, r1, #5
 80091d0:	6979      	ldr	r1, [r7, #20]
 80091d2:	4401      	add	r1, r0
 80091d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80091d8:	4313      	orrs	r3, r2
 80091da:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80091dc:	79fb      	ldrb	r3, [r7, #7]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d10d      	bne.n	80091fe <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d009      	beq.n	80091fe <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	6919      	ldr	r1, [r3, #16]
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fa:	460a      	mov	r2, r1
 80091fc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	015a      	lsls	r2, r3, #5
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	4413      	add	r3, r2
 8009206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	0151      	lsls	r1, r2, #5
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	440a      	add	r2, r1
 8009214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009218:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800921c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	371c      	adds	r7, #28
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800922c:	b480      	push	{r7}
 800922e:	b087      	sub	sp, #28
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	785b      	ldrb	r3, [r3, #1]
 8009246:	2b01      	cmp	r3, #1
 8009248:	d14a      	bne.n	80092e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800925e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009262:	f040 8086 	bne.w	8009372 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	015a      	lsls	r2, r3, #5
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	4413      	add	r3, r2
 8009270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	7812      	ldrb	r2, [r2, #0]
 800927a:	0151      	lsls	r1, r2, #5
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	440a      	add	r2, r1
 8009280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009284:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009288:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	015a      	lsls	r2, r3, #5
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	4413      	add	r3, r2
 8009294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	7812      	ldrb	r2, [r2, #0]
 800929e:	0151      	lsls	r1, r2, #5
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	440a      	add	r2, r1
 80092a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3301      	adds	r3, #1
 80092b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d902      	bls.n	80092c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	75fb      	strb	r3, [r7, #23]
          break;
 80092c2:	e056      	b.n	8009372 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092dc:	d0e7      	beq.n	80092ae <USB_EPStopXfer+0x82>
 80092de:	e048      	b.n	8009372 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092f8:	d13b      	bne.n	8009372 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	4413      	add	r3, r2
 8009304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	683a      	ldr	r2, [r7, #0]
 800930c:	7812      	ldrb	r2, [r2, #0]
 800930e:	0151      	lsls	r1, r2, #5
 8009310:	693a      	ldr	r2, [r7, #16]
 8009312:	440a      	add	r2, r1
 8009314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009318:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800931c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	4413      	add	r3, r2
 8009328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	7812      	ldrb	r2, [r2, #0]
 8009332:	0151      	lsls	r1, r2, #5
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	440a      	add	r2, r1
 8009338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800933c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009340:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3301      	adds	r3, #1
 8009346:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f242 7210 	movw	r2, #10000	; 0x2710
 800934e:	4293      	cmp	r3, r2
 8009350:	d902      	bls.n	8009358 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	75fb      	strb	r3, [r7, #23]
          break;
 8009356:	e00c      	b.n	8009372 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	015a      	lsls	r2, r3, #5
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	4413      	add	r3, r2
 8009362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800936c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009370:	d0e7      	beq.n	8009342 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009372:	7dfb      	ldrb	r3, [r7, #23]
}
 8009374:	4618      	mov	r0, r3
 8009376:	371c      	adds	r7, #28
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009380:	b480      	push	{r7}
 8009382:	b089      	sub	sp, #36	; 0x24
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	4611      	mov	r1, r2
 800938c:	461a      	mov	r2, r3
 800938e:	460b      	mov	r3, r1
 8009390:	71fb      	strb	r3, [r7, #7]
 8009392:	4613      	mov	r3, r2
 8009394:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800939e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d123      	bne.n	80093ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80093a6:	88bb      	ldrh	r3, [r7, #4]
 80093a8:	3303      	adds	r3, #3
 80093aa:	089b      	lsrs	r3, r3, #2
 80093ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80093ae:	2300      	movs	r3, #0
 80093b0:	61bb      	str	r3, [r7, #24]
 80093b2:	e018      	b.n	80093e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80093b4:	79fb      	ldrb	r3, [r7, #7]
 80093b6:	031a      	lsls	r2, r3, #12
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	4413      	add	r3, r2
 80093bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093c0:	461a      	mov	r2, r3
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	3301      	adds	r3, #1
 80093cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	3301      	adds	r3, #1
 80093d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	3301      	adds	r3, #1
 80093d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	3301      	adds	r3, #1
 80093de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	3301      	adds	r3, #1
 80093e4:	61bb      	str	r3, [r7, #24]
 80093e6:	69ba      	ldr	r2, [r7, #24]
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d3e2      	bcc.n	80093b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3724      	adds	r7, #36	; 0x24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b08b      	sub	sp, #44	; 0x2c
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	4613      	mov	r3, r2
 8009408:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009412:	88fb      	ldrh	r3, [r7, #6]
 8009414:	089b      	lsrs	r3, r3, #2
 8009416:	b29b      	uxth	r3, r3
 8009418:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800941a:	88fb      	ldrh	r3, [r7, #6]
 800941c:	f003 0303 	and.w	r3, r3, #3
 8009420:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009422:	2300      	movs	r3, #0
 8009424:	623b      	str	r3, [r7, #32]
 8009426:	e014      	b.n	8009452 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009432:	601a      	str	r2, [r3, #0]
    pDest++;
 8009434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009436:	3301      	adds	r3, #1
 8009438:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800943a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943c:	3301      	adds	r3, #1
 800943e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009442:	3301      	adds	r3, #1
 8009444:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009448:	3301      	adds	r3, #1
 800944a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800944c:	6a3b      	ldr	r3, [r7, #32]
 800944e:	3301      	adds	r3, #1
 8009450:	623b      	str	r3, [r7, #32]
 8009452:	6a3a      	ldr	r2, [r7, #32]
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	429a      	cmp	r2, r3
 8009458:	d3e6      	bcc.n	8009428 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800945a:	8bfb      	ldrh	r3, [r7, #30]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d01e      	beq.n	800949e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009460:	2300      	movs	r3, #0
 8009462:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800946a:	461a      	mov	r2, r3
 800946c:	f107 0310 	add.w	r3, r7, #16
 8009470:	6812      	ldr	r2, [r2, #0]
 8009472:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	6a3b      	ldr	r3, [r7, #32]
 8009478:	b2db      	uxtb	r3, r3
 800947a:	00db      	lsls	r3, r3, #3
 800947c:	fa22 f303 	lsr.w	r3, r2, r3
 8009480:	b2da      	uxtb	r2, r3
 8009482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009484:	701a      	strb	r2, [r3, #0]
      i++;
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	3301      	adds	r3, #1
 800948a:	623b      	str	r3, [r7, #32]
      pDest++;
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	3301      	adds	r3, #1
 8009490:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009492:	8bfb      	ldrh	r3, [r7, #30]
 8009494:	3b01      	subs	r3, #1
 8009496:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009498:	8bfb      	ldrh	r3, [r7, #30]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1ea      	bne.n	8009474 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	372c      	adds	r7, #44	; 0x2c
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	785b      	ldrb	r3, [r3, #1]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d12c      	bne.n	8009522 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	db12      	blt.n	8009500 <USB_EPSetStall+0x54>
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00f      	beq.n	8009500 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	0151      	lsls	r1, r2, #5
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	440a      	add	r2, r1
 80094f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80094fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	015a      	lsls	r2, r3, #5
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	4413      	add	r3, r2
 8009508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	0151      	lsls	r1, r2, #5
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	440a      	add	r2, r1
 8009516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800951a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800951e:	6013      	str	r3, [r2, #0]
 8009520:	e02b      	b.n	800957a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	015a      	lsls	r2, r3, #5
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	4413      	add	r3, r2
 800952a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	db12      	blt.n	800955a <USB_EPSetStall+0xae>
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00f      	beq.n	800955a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	015a      	lsls	r2, r3, #5
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	4413      	add	r3, r2
 8009542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	0151      	lsls	r1, r2, #5
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	440a      	add	r2, r1
 8009550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009554:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009558:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	4413      	add	r3, r2
 8009562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	0151      	lsls	r1, r2, #5
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	440a      	add	r2, r1
 8009570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009574:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009578:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	785b      	ldrb	r3, [r3, #1]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d128      	bne.n	80095f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	015a      	lsls	r2, r3, #5
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	0151      	lsls	r1, r2, #5
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	440a      	add	r2, r1
 80095ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80095c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	791b      	ldrb	r3, [r3, #4]
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d003      	beq.n	80095d4 <USB_EPClearStall+0x4c>
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	791b      	ldrb	r3, [r3, #4]
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d138      	bne.n	8009646 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	015a      	lsls	r2, r3, #5
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	4413      	add	r3, r2
 80095dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	0151      	lsls	r1, r2, #5
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	440a      	add	r2, r1
 80095ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095f2:	6013      	str	r3, [r2, #0]
 80095f4:	e027      	b.n	8009646 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	0151      	lsls	r1, r2, #5
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	440a      	add	r2, r1
 800960c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009610:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009614:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	791b      	ldrb	r3, [r3, #4]
 800961a:	2b03      	cmp	r3, #3
 800961c:	d003      	beq.n	8009626 <USB_EPClearStall+0x9e>
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	791b      	ldrb	r3, [r3, #4]
 8009622:	2b02      	cmp	r3, #2
 8009624:	d10f      	bne.n	8009646 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	015a      	lsls	r2, r3, #5
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	4413      	add	r3, r2
 800962e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	0151      	lsls	r1, r2, #5
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	440a      	add	r2, r1
 800963c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009644:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3714      	adds	r7, #20
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009654:	b480      	push	{r7}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	460b      	mov	r3, r1
 800965e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009672:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009676:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	011b      	lsls	r3, r3, #4
 8009684:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009688:	68f9      	ldr	r1, [r7, #12]
 800968a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800968e:	4313      	orrs	r3, r2
 8009690:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80096ba:	f023 0303 	bic.w	r3, r3, #3
 80096be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096ce:	f023 0302 	bic.w	r3, r3, #2
 80096d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3714      	adds	r7, #20
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80096e2:	b480      	push	{r7}
 80096e4:	b085      	sub	sp, #20
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80096fc:	f023 0303 	bic.w	r3, r3, #3
 8009700:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009710:	f043 0302 	orr.w	r3, r3, #2
 8009714:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	695b      	ldr	r3, [r3, #20]
 8009730:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	4013      	ands	r3, r2
 800973a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800973c:	68fb      	ldr	r3, [r7, #12]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800974a:	b480      	push	{r7}
 800974c:	b085      	sub	sp, #20
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009766:	69db      	ldr	r3, [r3, #28]
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	4013      	ands	r3, r2
 800976c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	0c1b      	lsrs	r3, r3, #16
}
 8009772:	4618      	mov	r0, r3
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800977e:	b480      	push	{r7}
 8009780:	b085      	sub	sp, #20
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800979a:	69db      	ldr	r3, [r3, #28]
 800979c:	68ba      	ldr	r2, [r7, #8]
 800979e:	4013      	ands	r3, r2
 80097a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	b29b      	uxth	r3, r3
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b085      	sub	sp, #20
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
 80097ba:	460b      	mov	r3, r1
 80097bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80097c2:	78fb      	ldrb	r3, [r7, #3]
 80097c4:	015a      	lsls	r2, r3, #5
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	4413      	add	r3, r2
 80097ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	4013      	ands	r3, r2
 80097de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80097e0:	68bb      	ldr	r3, [r7, #8]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b087      	sub	sp, #28
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800980e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009810:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009812:	78fb      	ldrb	r3, [r7, #3]
 8009814:	f003 030f 	and.w	r3, r3, #15
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	fa22 f303 	lsr.w	r3, r2, r3
 800981e:	01db      	lsls	r3, r3, #7
 8009820:	b2db      	uxtb	r3, r3
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	4313      	orrs	r3, r2
 8009826:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	015a      	lsls	r2, r3, #5
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	4413      	add	r3, r2
 8009830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	4013      	ands	r3, r2
 800983a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800983c:	68bb      	ldr	r3, [r7, #8]
}
 800983e:	4618      	mov	r0, r3
 8009840:	371c      	adds	r7, #28
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800984a:	b480      	push	{r7}
 800984c:	b083      	sub	sp, #12
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	f003 0301 	and.w	r3, r3, #1
}
 800985a:	4618      	mov	r0, r3
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr

08009866 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009866:	b480      	push	{r7}
 8009868:	b085      	sub	sp, #20
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009880:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009884:	f023 0307 	bic.w	r3, r3, #7
 8009888:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800989c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3714      	adds	r7, #20
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	460b      	mov	r3, r1
 80098b6:	607a      	str	r2, [r7, #4]
 80098b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	333c      	adds	r3, #60	; 0x3c
 80098c2:	3304      	adds	r3, #4
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	4a26      	ldr	r2, [pc, #152]	; (8009964 <USB_EP0_OutStart+0xb8>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d90a      	bls.n	80098e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098e0:	d101      	bne.n	80098e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	e037      	b.n	8009956 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ec:	461a      	mov	r2, r3
 80098ee:	2300      	movs	r3, #0
 80098f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	697a      	ldr	r2, [r7, #20]
 80098fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009900:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009904:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009914:	f043 0318 	orr.w	r3, r3, #24
 8009918:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009928:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800992c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800992e:	7afb      	ldrb	r3, [r7, #11]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d10f      	bne.n	8009954 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993a:	461a      	mov	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	697a      	ldr	r2, [r7, #20]
 800994a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800994e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009952:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	371c      	adds	r7, #28
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	4f54300a 	.word	0x4f54300a

08009968 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009970:	2300      	movs	r3, #0
 8009972:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3301      	adds	r3, #1
 8009978:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	4a13      	ldr	r2, [pc, #76]	; (80099cc <USB_CoreReset+0x64>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d901      	bls.n	8009986 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e01b      	b.n	80099be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	2b00      	cmp	r3, #0
 800998c:	daf2      	bge.n	8009974 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	f043 0201 	orr.w	r2, r3, #1
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3301      	adds	r3, #1
 80099a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4a09      	ldr	r2, [pc, #36]	; (80099cc <USB_CoreReset+0x64>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d901      	bls.n	80099b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099ac:	2303      	movs	r3, #3
 80099ae:	e006      	b.n	80099be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d0f0      	beq.n	800999e <USB_CoreReset+0x36>

  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	00030d40 	.word	0x00030d40

080099d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	460b      	mov	r3, r1
 80099da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80099dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80099e0:	f002 fc28 	bl	800c234 <USBD_static_malloc>
 80099e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d109      	bne.n	8009a00 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	32b0      	adds	r2, #176	; 0xb0
 80099f6:	2100      	movs	r1, #0
 80099f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80099fc:	2302      	movs	r3, #2
 80099fe:	e0d4      	b.n	8009baa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009a00:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009a04:	2100      	movs	r1, #0
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f002 fc7c 	bl	800c304 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	32b0      	adds	r2, #176	; 0xb0
 8009a16:	68f9      	ldr	r1, [r7, #12]
 8009a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	32b0      	adds	r2, #176	; 0xb0
 8009a26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	7c1b      	ldrb	r3, [r3, #16]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d138      	bne.n	8009aaa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009a38:	4b5e      	ldr	r3, [pc, #376]	; (8009bb4 <USBD_CDC_Init+0x1e4>)
 8009a3a:	7819      	ldrb	r1, [r3, #0]
 8009a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a40:	2202      	movs	r2, #2
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f002 fad3 	bl	800bfee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009a48:	4b5a      	ldr	r3, [pc, #360]	; (8009bb4 <USBD_CDC_Init+0x1e4>)
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	f003 020f 	and.w	r2, r3, #15
 8009a50:	6879      	ldr	r1, [r7, #4]
 8009a52:	4613      	mov	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	440b      	add	r3, r1
 8009a5c:	3324      	adds	r3, #36	; 0x24
 8009a5e:	2201      	movs	r2, #1
 8009a60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009a62:	4b55      	ldr	r3, [pc, #340]	; (8009bb8 <USBD_CDC_Init+0x1e8>)
 8009a64:	7819      	ldrb	r1, [r3, #0]
 8009a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f002 fabe 	bl	800bfee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009a72:	4b51      	ldr	r3, [pc, #324]	; (8009bb8 <USBD_CDC_Init+0x1e8>)
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	f003 020f 	and.w	r2, r3, #15
 8009a7a:	6879      	ldr	r1, [r7, #4]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	440b      	add	r3, r1
 8009a86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009a8e:	4b4b      	ldr	r3, [pc, #300]	; (8009bbc <USBD_CDC_Init+0x1ec>)
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	f003 020f 	and.w	r2, r3, #15
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4413      	add	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	440b      	add	r3, r1
 8009aa2:	3326      	adds	r3, #38	; 0x26
 8009aa4:	2210      	movs	r2, #16
 8009aa6:	801a      	strh	r2, [r3, #0]
 8009aa8:	e035      	b.n	8009b16 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009aaa:	4b42      	ldr	r3, [pc, #264]	; (8009bb4 <USBD_CDC_Init+0x1e4>)
 8009aac:	7819      	ldrb	r1, [r3, #0]
 8009aae:	2340      	movs	r3, #64	; 0x40
 8009ab0:	2202      	movs	r2, #2
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f002 fa9b 	bl	800bfee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009ab8:	4b3e      	ldr	r3, [pc, #248]	; (8009bb4 <USBD_CDC_Init+0x1e4>)
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	f003 020f 	and.w	r2, r3, #15
 8009ac0:	6879      	ldr	r1, [r7, #4]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4413      	add	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	440b      	add	r3, r1
 8009acc:	3324      	adds	r3, #36	; 0x24
 8009ace:	2201      	movs	r2, #1
 8009ad0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009ad2:	4b39      	ldr	r3, [pc, #228]	; (8009bb8 <USBD_CDC_Init+0x1e8>)
 8009ad4:	7819      	ldrb	r1, [r3, #0]
 8009ad6:	2340      	movs	r3, #64	; 0x40
 8009ad8:	2202      	movs	r2, #2
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f002 fa87 	bl	800bfee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009ae0:	4b35      	ldr	r3, [pc, #212]	; (8009bb8 <USBD_CDC_Init+0x1e8>)
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	f003 020f 	and.w	r2, r3, #15
 8009ae8:	6879      	ldr	r1, [r7, #4]
 8009aea:	4613      	mov	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	440b      	add	r3, r1
 8009af4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009af8:	2201      	movs	r2, #1
 8009afa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009afc:	4b2f      	ldr	r3, [pc, #188]	; (8009bbc <USBD_CDC_Init+0x1ec>)
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	f003 020f 	and.w	r2, r3, #15
 8009b04:	6879      	ldr	r1, [r7, #4]
 8009b06:	4613      	mov	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	4413      	add	r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	440b      	add	r3, r1
 8009b10:	3326      	adds	r3, #38	; 0x26
 8009b12:	2210      	movs	r2, #16
 8009b14:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009b16:	4b29      	ldr	r3, [pc, #164]	; (8009bbc <USBD_CDC_Init+0x1ec>)
 8009b18:	7819      	ldrb	r1, [r3, #0]
 8009b1a:	2308      	movs	r3, #8
 8009b1c:	2203      	movs	r2, #3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f002 fa65 	bl	800bfee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009b24:	4b25      	ldr	r3, [pc, #148]	; (8009bbc <USBD_CDC_Init+0x1ec>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	f003 020f 	and.w	r2, r3, #15
 8009b2c:	6879      	ldr	r1, [r7, #4]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	440b      	add	r3, r1
 8009b38:	3324      	adds	r3, #36	; 0x24
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	33b0      	adds	r3, #176	; 0xb0
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4413      	add	r3, r2
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d101      	bne.n	8009b78 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009b74:	2302      	movs	r3, #2
 8009b76:	e018      	b.n	8009baa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	7c1b      	ldrb	r3, [r3, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10a      	bne.n	8009b96 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b80:	4b0d      	ldr	r3, [pc, #52]	; (8009bb8 <USBD_CDC_Init+0x1e8>)
 8009b82:	7819      	ldrb	r1, [r3, #0]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f002 fb1c 	bl	800c1cc <USBD_LL_PrepareReceive>
 8009b94:	e008      	b.n	8009ba8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b96:	4b08      	ldr	r3, [pc, #32]	; (8009bb8 <USBD_CDC_Init+0x1e8>)
 8009b98:	7819      	ldrb	r1, [r3, #0]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ba0:	2340      	movs	r3, #64	; 0x40
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f002 fb12 	bl	800c1cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ba8:	2300      	movs	r3, #0
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	20000093 	.word	0x20000093
 8009bb8:	20000094 	.word	0x20000094
 8009bbc:	20000095 	.word	0x20000095

08009bc0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009bcc:	4b3a      	ldr	r3, [pc, #232]	; (8009cb8 <USBD_CDC_DeInit+0xf8>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f002 fa31 	bl	800c03a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009bd8:	4b37      	ldr	r3, [pc, #220]	; (8009cb8 <USBD_CDC_DeInit+0xf8>)
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	f003 020f 	and.w	r2, r3, #15
 8009be0:	6879      	ldr	r1, [r7, #4]
 8009be2:	4613      	mov	r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4413      	add	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	440b      	add	r3, r1
 8009bec:	3324      	adds	r3, #36	; 0x24
 8009bee:	2200      	movs	r2, #0
 8009bf0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009bf2:	4b32      	ldr	r3, [pc, #200]	; (8009cbc <USBD_CDC_DeInit+0xfc>)
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f002 fa1e 	bl	800c03a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009bfe:	4b2f      	ldr	r3, [pc, #188]	; (8009cbc <USBD_CDC_DeInit+0xfc>)
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	f003 020f 	and.w	r2, r3, #15
 8009c06:	6879      	ldr	r1, [r7, #4]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	440b      	add	r3, r1
 8009c12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c16:	2200      	movs	r2, #0
 8009c18:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009c1a:	4b29      	ldr	r3, [pc, #164]	; (8009cc0 <USBD_CDC_DeInit+0x100>)
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f002 fa0a 	bl	800c03a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009c26:	4b26      	ldr	r3, [pc, #152]	; (8009cc0 <USBD_CDC_DeInit+0x100>)
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	f003 020f 	and.w	r2, r3, #15
 8009c2e:	6879      	ldr	r1, [r7, #4]
 8009c30:	4613      	mov	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4413      	add	r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	440b      	add	r3, r1
 8009c3a:	3324      	adds	r3, #36	; 0x24
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009c40:	4b1f      	ldr	r3, [pc, #124]	; (8009cc0 <USBD_CDC_DeInit+0x100>)
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	f003 020f 	and.w	r2, r3, #15
 8009c48:	6879      	ldr	r1, [r7, #4]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	440b      	add	r3, r1
 8009c54:	3326      	adds	r3, #38	; 0x26
 8009c56:	2200      	movs	r2, #0
 8009c58:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	32b0      	adds	r2, #176	; 0xb0
 8009c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d01f      	beq.n	8009cac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	33b0      	adds	r3, #176	; 0xb0
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	32b0      	adds	r2, #176	; 0xb0
 8009c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f002 fade 	bl	800c250 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	32b0      	adds	r2, #176	; 0xb0
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20000093 	.word	0x20000093
 8009cbc:	20000094 	.word	0x20000094
 8009cc0:	20000095 	.word	0x20000095

08009cc4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	32b0      	adds	r2, #176	; 0xb0
 8009cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cdc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d101      	bne.n	8009cf4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009cf0:	2303      	movs	r3, #3
 8009cf2:	e0bf      	b.n	8009e74 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d050      	beq.n	8009da2 <USBD_CDC_Setup+0xde>
 8009d00:	2b20      	cmp	r3, #32
 8009d02:	f040 80af 	bne.w	8009e64 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	88db      	ldrh	r3, [r3, #6]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d03a      	beq.n	8009d84 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	b25b      	sxtb	r3, r3
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	da1b      	bge.n	8009d50 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	33b0      	adds	r3, #176	; 0xb0
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009d2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	88d2      	ldrh	r2, [r2, #6]
 8009d34:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	88db      	ldrh	r3, [r3, #6]
 8009d3a:	2b07      	cmp	r3, #7
 8009d3c:	bf28      	it	cs
 8009d3e:	2307      	movcs	r3, #7
 8009d40:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	89fa      	ldrh	r2, [r7, #14]
 8009d46:	4619      	mov	r1, r3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f001 fd43 	bl	800b7d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009d4e:	e090      	b.n	8009e72 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	785a      	ldrb	r2, [r3, #1]
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	88db      	ldrh	r3, [r3, #6]
 8009d5e:	2b3f      	cmp	r3, #63	; 0x3f
 8009d60:	d803      	bhi.n	8009d6a <USBD_CDC_Setup+0xa6>
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	88db      	ldrh	r3, [r3, #6]
 8009d66:	b2da      	uxtb	r2, r3
 8009d68:	e000      	b.n	8009d6c <USBD_CDC_Setup+0xa8>
 8009d6a:	2240      	movs	r2, #64	; 0x40
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009d72:	6939      	ldr	r1, [r7, #16]
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f001 fd55 	bl	800b82c <USBD_CtlPrepareRx>
      break;
 8009d82:	e076      	b.n	8009e72 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	33b0      	adds	r3, #176	; 0xb0
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4413      	add	r3, r2
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	7850      	ldrb	r0, [r2, #1]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	4798      	blx	r3
      break;
 8009da0:	e067      	b.n	8009e72 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	785b      	ldrb	r3, [r3, #1]
 8009da6:	2b0b      	cmp	r3, #11
 8009da8:	d851      	bhi.n	8009e4e <USBD_CDC_Setup+0x18a>
 8009daa:	a201      	add	r2, pc, #4	; (adr r2, 8009db0 <USBD_CDC_Setup+0xec>)
 8009dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db0:	08009de1 	.word	0x08009de1
 8009db4:	08009e5d 	.word	0x08009e5d
 8009db8:	08009e4f 	.word	0x08009e4f
 8009dbc:	08009e4f 	.word	0x08009e4f
 8009dc0:	08009e4f 	.word	0x08009e4f
 8009dc4:	08009e4f 	.word	0x08009e4f
 8009dc8:	08009e4f 	.word	0x08009e4f
 8009dcc:	08009e4f 	.word	0x08009e4f
 8009dd0:	08009e4f 	.word	0x08009e4f
 8009dd4:	08009e4f 	.word	0x08009e4f
 8009dd8:	08009e0b 	.word	0x08009e0b
 8009ddc:	08009e35 	.word	0x08009e35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	2b03      	cmp	r3, #3
 8009dea:	d107      	bne.n	8009dfc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009dec:	f107 030a 	add.w	r3, r7, #10
 8009df0:	2202      	movs	r2, #2
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f001 fced 	bl	800b7d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009dfa:	e032      	b.n	8009e62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f001 fc77 	bl	800b6f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e04:	2303      	movs	r3, #3
 8009e06:	75fb      	strb	r3, [r7, #23]
          break;
 8009e08:	e02b      	b.n	8009e62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	d107      	bne.n	8009e26 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e16:	f107 030d 	add.w	r3, r7, #13
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f001 fcd8 	bl	800b7d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e24:	e01d      	b.n	8009e62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f001 fc62 	bl	800b6f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	75fb      	strb	r3, [r7, #23]
          break;
 8009e32:	e016      	b.n	8009e62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	2b03      	cmp	r3, #3
 8009e3e:	d00f      	beq.n	8009e60 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f001 fc55 	bl	800b6f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009e4c:	e008      	b.n	8009e60 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f001 fc4e 	bl	800b6f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009e56:	2303      	movs	r3, #3
 8009e58:	75fb      	strb	r3, [r7, #23]
          break;
 8009e5a:	e002      	b.n	8009e62 <USBD_CDC_Setup+0x19e>
          break;
 8009e5c:	bf00      	nop
 8009e5e:	e008      	b.n	8009e72 <USBD_CDC_Setup+0x1ae>
          break;
 8009e60:	bf00      	nop
      }
      break;
 8009e62:	e006      	b.n	8009e72 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009e64:	6839      	ldr	r1, [r7, #0]
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f001 fc43 	bl	800b6f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e70:	bf00      	nop
  }

  return (uint8_t)ret;
 8009e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3718      	adds	r7, #24
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	460b      	mov	r3, r1
 8009e86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	32b0      	adds	r2, #176	; 0xb0
 8009e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d101      	bne.n	8009ea6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e065      	b.n	8009f72 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	32b0      	adds	r2, #176	; 0xb0
 8009eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009eb6:	78fb      	ldrb	r3, [r7, #3]
 8009eb8:	f003 020f 	and.w	r2, r3, #15
 8009ebc:	6879      	ldr	r1, [r7, #4]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4413      	add	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	440b      	add	r3, r1
 8009ec8:	3318      	adds	r3, #24
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d02f      	beq.n	8009f30 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009ed0:	78fb      	ldrb	r3, [r7, #3]
 8009ed2:	f003 020f 	and.w	r2, r3, #15
 8009ed6:	6879      	ldr	r1, [r7, #4]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	440b      	add	r3, r1
 8009ee2:	3318      	adds	r3, #24
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	78fb      	ldrb	r3, [r7, #3]
 8009ee8:	f003 010f 	and.w	r1, r3, #15
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	460b      	mov	r3, r1
 8009ef0:	00db      	lsls	r3, r3, #3
 8009ef2:	440b      	add	r3, r1
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4403      	add	r3, r0
 8009ef8:	3348      	adds	r3, #72	; 0x48
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f00:	fb01 f303 	mul.w	r3, r1, r3
 8009f04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d112      	bne.n	8009f30 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009f0a:	78fb      	ldrb	r3, [r7, #3]
 8009f0c:	f003 020f 	and.w	r2, r3, #15
 8009f10:	6879      	ldr	r1, [r7, #4]
 8009f12:	4613      	mov	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	4413      	add	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	440b      	add	r3, r1
 8009f1c:	3318      	adds	r3, #24
 8009f1e:	2200      	movs	r2, #0
 8009f20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f22:	78f9      	ldrb	r1, [r7, #3]
 8009f24:	2300      	movs	r3, #0
 8009f26:	2200      	movs	r2, #0
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f002 f92e 	bl	800c18a <USBD_LL_Transmit>
 8009f2e:	e01f      	b.n	8009f70 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	33b0      	adds	r3, #176	; 0xb0
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4413      	add	r3, r2
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d010      	beq.n	8009f70 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	33b0      	adds	r3, #176	; 0xb0
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	4413      	add	r3, r2
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009f6c:	78fa      	ldrb	r2, [r7, #3]
 8009f6e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b084      	sub	sp, #16
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	460b      	mov	r3, r1
 8009f84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	32b0      	adds	r2, #176	; 0xb0
 8009f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f94:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	32b0      	adds	r2, #176	; 0xb0
 8009fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d101      	bne.n	8009fac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	e01a      	b.n	8009fe2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009fac:	78fb      	ldrb	r3, [r7, #3]
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f002 f92c 	bl	800c20e <USBD_LL_GetRxDataSize>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	33b0      	adds	r3, #176	; 0xb0
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4413      	add	r3, r2
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009fdc:	4611      	mov	r1, r2
 8009fde:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	32b0      	adds	r2, #176	; 0xb0
 8009ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a000:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a008:	2303      	movs	r3, #3
 800a00a:	e025      	b.n	800a058 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	33b0      	adds	r3, #176	; 0xb0
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	4413      	add	r3, r2
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d01a      	beq.n	800a056 <USBD_CDC_EP0_RxReady+0x6c>
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a026:	2bff      	cmp	r3, #255	; 0xff
 800a028:	d015      	beq.n	800a056 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	33b0      	adds	r3, #176	; 0xb0
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a042:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a04a:	b292      	uxth	r2, r2
 800a04c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	22ff      	movs	r2, #255	; 0xff
 800a052:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a068:	2182      	movs	r1, #130	; 0x82
 800a06a:	4818      	ldr	r0, [pc, #96]	; (800a0cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a06c:	f000 fd09 	bl	800aa82 <USBD_GetEpDesc>
 800a070:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a072:	2101      	movs	r1, #1
 800a074:	4815      	ldr	r0, [pc, #84]	; (800a0cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a076:	f000 fd04 	bl	800aa82 <USBD_GetEpDesc>
 800a07a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a07c:	2181      	movs	r1, #129	; 0x81
 800a07e:	4813      	ldr	r0, [pc, #76]	; (800a0cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a080:	f000 fcff 	bl	800aa82 <USBD_GetEpDesc>
 800a084:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d002      	beq.n	800a092 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	2210      	movs	r2, #16
 800a090:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d006      	beq.n	800a0a6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0a0:	711a      	strb	r2, [r3, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d006      	beq.n	800a0ba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0b4:	711a      	strb	r2, [r3, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2243      	movs	r2, #67	; 0x43
 800a0be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a0c0:	4b02      	ldr	r3, [pc, #8]	; (800a0cc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3718      	adds	r7, #24
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20000050 	.word	0x20000050

0800a0d0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a0d8:	2182      	movs	r1, #130	; 0x82
 800a0da:	4818      	ldr	r0, [pc, #96]	; (800a13c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a0dc:	f000 fcd1 	bl	800aa82 <USBD_GetEpDesc>
 800a0e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	4815      	ldr	r0, [pc, #84]	; (800a13c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a0e6:	f000 fccc 	bl	800aa82 <USBD_GetEpDesc>
 800a0ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a0ec:	2181      	movs	r1, #129	; 0x81
 800a0ee:	4813      	ldr	r0, [pc, #76]	; (800a13c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a0f0:	f000 fcc7 	bl	800aa82 <USBD_GetEpDesc>
 800a0f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d002      	beq.n	800a102 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	2210      	movs	r2, #16
 800a100:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d006      	beq.n	800a116 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	2200      	movs	r2, #0
 800a10c:	711a      	strb	r2, [r3, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	f042 0202 	orr.w	r2, r2, #2
 800a114:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d006      	beq.n	800a12a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2200      	movs	r2, #0
 800a120:	711a      	strb	r2, [r3, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	f042 0202 	orr.w	r2, r2, #2
 800a128:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2243      	movs	r2, #67	; 0x43
 800a12e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a130:	4b02      	ldr	r3, [pc, #8]	; (800a13c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a132:	4618      	mov	r0, r3
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	20000050 	.word	0x20000050

0800a140 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a148:	2182      	movs	r1, #130	; 0x82
 800a14a:	4818      	ldr	r0, [pc, #96]	; (800a1ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a14c:	f000 fc99 	bl	800aa82 <USBD_GetEpDesc>
 800a150:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a152:	2101      	movs	r1, #1
 800a154:	4815      	ldr	r0, [pc, #84]	; (800a1ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a156:	f000 fc94 	bl	800aa82 <USBD_GetEpDesc>
 800a15a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a15c:	2181      	movs	r1, #129	; 0x81
 800a15e:	4813      	ldr	r0, [pc, #76]	; (800a1ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a160:	f000 fc8f 	bl	800aa82 <USBD_GetEpDesc>
 800a164:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d002      	beq.n	800a172 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	2210      	movs	r2, #16
 800a170:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d006      	beq.n	800a186 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a180:	711a      	strb	r2, [r3, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d006      	beq.n	800a19a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a194:	711a      	strb	r2, [r3, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2243      	movs	r2, #67	; 0x43
 800a19e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1a0:	4b02      	ldr	r3, [pc, #8]	; (800a1ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3718      	adds	r7, #24
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	20000050 	.word	0x20000050

0800a1b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	220a      	movs	r2, #10
 800a1bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a1be:	4b03      	ldr	r3, [pc, #12]	; (800a1cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	2000000c 	.word	0x2000000c

0800a1d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d101      	bne.n	800a1e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e009      	b.n	800a1f8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	33b0      	adds	r3, #176	; 0xb0
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4413      	add	r3, r2
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	32b0      	adds	r2, #176	; 0xb0
 800a21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a21e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d101      	bne.n	800a22a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a226:	2303      	movs	r3, #3
 800a228:	e008      	b.n	800a23c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	371c      	adds	r7, #28
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	32b0      	adds	r2, #176	; 0xb0
 800a25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a260:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d101      	bne.n	800a26c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a268:	2303      	movs	r3, #3
 800a26a:	e004      	b.n	800a276 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3714      	adds	r7, #20
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
	...

0800a284 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	32b0      	adds	r2, #176	; 0xb0
 800a296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a29a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	32b0      	adds	r2, #176	; 0xb0
 800a2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e018      	b.n	800a2e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	7c1b      	ldrb	r3, [r3, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10a      	bne.n	800a2d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a2ba:	4b0c      	ldr	r3, [pc, #48]	; (800a2ec <USBD_CDC_ReceivePacket+0x68>)
 800a2bc:	7819      	ldrb	r1, [r3, #0]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f001 ff7f 	bl	800c1cc <USBD_LL_PrepareReceive>
 800a2ce:	e008      	b.n	800a2e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a2d0:	4b06      	ldr	r3, [pc, #24]	; (800a2ec <USBD_CDC_ReceivePacket+0x68>)
 800a2d2:	7819      	ldrb	r1, [r3, #0]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2da:	2340      	movs	r3, #64	; 0x40
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f001 ff75 	bl	800c1cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	20000094 	.word	0x20000094

0800a2f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d101      	bne.n	800a308 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a304:	2303      	movs	r3, #3
 800a306:	e01f      	b.n	800a348 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d003      	beq.n	800a32e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	68ba      	ldr	r2, [r7, #8]
 800a32a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	79fa      	ldrb	r2, [r7, #7]
 800a33a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f001 fdef 	bl	800bf20 <USBD_LL_Init>
 800a342:	4603      	mov	r3, r0
 800a344:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a346:	7dfb      	ldrb	r3, [r7, #23]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3718      	adds	r7, #24
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a35a:	2300      	movs	r3, #0
 800a35c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d101      	bne.n	800a368 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a364:	2303      	movs	r3, #3
 800a366:	e025      	b.n	800a3b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	32ae      	adds	r2, #174	; 0xae
 800a37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00f      	beq.n	800a3a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	32ae      	adds	r2, #174	; 0xae
 800a38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a394:	f107 020e 	add.w	r2, r7, #14
 800a398:	4610      	mov	r0, r2
 800a39a:	4798      	blx	r3
 800a39c:	4602      	mov	r2, r0
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a3aa:	1c5a      	adds	r2, r3, #1
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f001 fdf7 	bl	800bfb8 <USBD_LL_Start>
 800a3ca:	4603      	mov	r3, r0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a3dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b084      	sub	sp, #16
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a400:	2b00      	cmp	r3, #0
 800a402:	d009      	beq.n	800a418 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	78fa      	ldrb	r2, [r7, #3]
 800a40e:	4611      	mov	r1, r2
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	4798      	blx	r3
 800a414:	4603      	mov	r3, r0
 800a416:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a418:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	460b      	mov	r3, r1
 800a42c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a42e:	2300      	movs	r3, #0
 800a430:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	78fa      	ldrb	r2, [r7, #3]
 800a43c:	4611      	mov	r1, r2
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	4798      	blx	r3
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d001      	beq.n	800a44c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a448:	2303      	movs	r3, #3
 800a44a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b084      	sub	sp, #16
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a466:	6839      	ldr	r1, [r7, #0]
 800a468:	4618      	mov	r0, r3
 800a46a:	f001 f908 	bl	800b67e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a47c:	461a      	mov	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a48a:	f003 031f 	and.w	r3, r3, #31
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d01a      	beq.n	800a4c8 <USBD_LL_SetupStage+0x72>
 800a492:	2b02      	cmp	r3, #2
 800a494:	d822      	bhi.n	800a4dc <USBD_LL_SetupStage+0x86>
 800a496:	2b00      	cmp	r3, #0
 800a498:	d002      	beq.n	800a4a0 <USBD_LL_SetupStage+0x4a>
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d00a      	beq.n	800a4b4 <USBD_LL_SetupStage+0x5e>
 800a49e:	e01d      	b.n	800a4dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 fb5f 	bl	800ab6c <USBD_StdDevReq>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a4b2:	e020      	b.n	800a4f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 fbc7 	bl	800ac50 <USBD_StdItfReq>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a4c6:	e016      	b.n	800a4f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fc29 	bl	800ad28 <USBD_StdEPReq>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a4da:	e00c      	b.n	800a4f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a4e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f001 fdc4 	bl	800c078 <USBD_LL_StallEP>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a4f4:	bf00      	nop
  }

  return ret;
 800a4f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	460b      	mov	r3, r1
 800a50a:	607a      	str	r2, [r7, #4]
 800a50c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a512:	7afb      	ldrb	r3, [r7, #11]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d16e      	bne.n	800a5f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a51e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a526:	2b03      	cmp	r3, #3
 800a528:	f040 8098 	bne.w	800a65c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	689a      	ldr	r2, [r3, #8]
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	429a      	cmp	r2, r3
 800a536:	d913      	bls.n	800a560 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	689a      	ldr	r2, [r3, #8]
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	1ad2      	subs	r2, r2, r3
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	68da      	ldr	r2, [r3, #12]
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	4293      	cmp	r3, r2
 800a550:	bf28      	it	cs
 800a552:	4613      	movcs	r3, r2
 800a554:	461a      	mov	r2, r3
 800a556:	6879      	ldr	r1, [r7, #4]
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f001 f984 	bl	800b866 <USBD_CtlContinueRx>
 800a55e:	e07d      	b.n	800a65c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a566:	f003 031f 	and.w	r3, r3, #31
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d014      	beq.n	800a598 <USBD_LL_DataOutStage+0x98>
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d81d      	bhi.n	800a5ae <USBD_LL_DataOutStage+0xae>
 800a572:	2b00      	cmp	r3, #0
 800a574:	d002      	beq.n	800a57c <USBD_LL_DataOutStage+0x7c>
 800a576:	2b01      	cmp	r3, #1
 800a578:	d003      	beq.n	800a582 <USBD_LL_DataOutStage+0x82>
 800a57a:	e018      	b.n	800a5ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a57c:	2300      	movs	r3, #0
 800a57e:	75bb      	strb	r3, [r7, #22]
            break;
 800a580:	e018      	b.n	800a5b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	4619      	mov	r1, r3
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f000 fa5e 	bl	800aa4e <USBD_CoreFindIF>
 800a592:	4603      	mov	r3, r0
 800a594:	75bb      	strb	r3, [r7, #22]
            break;
 800a596:	e00d      	b.n	800a5b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	68f8      	ldr	r0, [r7, #12]
 800a5a4:	f000 fa60 	bl	800aa68 <USBD_CoreFindEP>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	75bb      	strb	r3, [r7, #22]
            break;
 800a5ac:	e002      	b.n	800a5b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	75bb      	strb	r3, [r7, #22]
            break;
 800a5b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a5b4:	7dbb      	ldrb	r3, [r7, #22]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d119      	bne.n	800a5ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d113      	bne.n	800a5ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a5c6:	7dba      	ldrb	r2, [r7, #22]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	32ae      	adds	r2, #174	; 0xae
 800a5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00b      	beq.n	800a5ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a5d6:	7dba      	ldrb	r2, [r7, #22]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a5de:	7dba      	ldrb	r2, [r7, #22]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	32ae      	adds	r2, #174	; 0xae
 800a5e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f001 f94a 	bl	800b888 <USBD_CtlSendStatus>
 800a5f4:	e032      	b.n	800a65c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a5f6:	7afb      	ldrb	r3, [r7, #11]
 800a5f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	4619      	mov	r1, r3
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f000 fa31 	bl	800aa68 <USBD_CoreFindEP>
 800a606:	4603      	mov	r3, r0
 800a608:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a60a:	7dbb      	ldrb	r3, [r7, #22]
 800a60c:	2bff      	cmp	r3, #255	; 0xff
 800a60e:	d025      	beq.n	800a65c <USBD_LL_DataOutStage+0x15c>
 800a610:	7dbb      	ldrb	r3, [r7, #22]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d122      	bne.n	800a65c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	2b03      	cmp	r3, #3
 800a620:	d117      	bne.n	800a652 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a622:	7dba      	ldrb	r2, [r7, #22]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	32ae      	adds	r2, #174	; 0xae
 800a628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00f      	beq.n	800a652 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a632:	7dba      	ldrb	r2, [r7, #22]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a63a:	7dba      	ldrb	r2, [r7, #22]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	32ae      	adds	r2, #174	; 0xae
 800a640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	7afa      	ldrb	r2, [r7, #11]
 800a648:	4611      	mov	r1, r2
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	4798      	blx	r3
 800a64e:	4603      	mov	r3, r0
 800a650:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a652:	7dfb      	ldrb	r3, [r7, #23]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d001      	beq.n	800a65c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	e000      	b.n	800a65e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3718      	adds	r7, #24
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b086      	sub	sp, #24
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	60f8      	str	r0, [r7, #12]
 800a66e:	460b      	mov	r3, r1
 800a670:	607a      	str	r2, [r7, #4]
 800a672:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a674:	7afb      	ldrb	r3, [r7, #11]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d16f      	bne.n	800a75a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3314      	adds	r3, #20
 800a67e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a686:	2b02      	cmp	r3, #2
 800a688:	d15a      	bne.n	800a740 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	689a      	ldr	r2, [r3, #8]
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	429a      	cmp	r2, r3
 800a694:	d914      	bls.n	800a6c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	689a      	ldr	r2, [r3, #8]
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	1ad2      	subs	r2, r2, r3
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	6879      	ldr	r1, [r7, #4]
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f001 f8ac 	bl	800b80a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f001 fd87 	bl	800c1cc <USBD_LL_PrepareReceive>
 800a6be:	e03f      	b.n	800a740 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	68da      	ldr	r2, [r3, #12]
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d11c      	bne.n	800a706 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d316      	bcc.n	800a706 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d20f      	bcs.n	800a706 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f001 f88d 	bl	800b80a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f001 fd64 	bl	800c1cc <USBD_LL_PrepareReceive>
 800a704:	e01c      	b.n	800a740 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	2b03      	cmp	r3, #3
 800a710:	d10f      	bne.n	800a732 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d009      	beq.n	800a732 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a732:	2180      	movs	r1, #128	; 0x80
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f001 fc9f 	bl	800c078 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f001 f8b7 	bl	800b8ae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d03a      	beq.n	800a7c0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f7ff fe42 	bl	800a3d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a758:	e032      	b.n	800a7c0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a75a:	7afb      	ldrb	r3, [r7, #11]
 800a75c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a760:	b2db      	uxtb	r3, r3
 800a762:	4619      	mov	r1, r3
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f000 f97f 	bl	800aa68 <USBD_CoreFindEP>
 800a76a:	4603      	mov	r3, r0
 800a76c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a76e:	7dfb      	ldrb	r3, [r7, #23]
 800a770:	2bff      	cmp	r3, #255	; 0xff
 800a772:	d025      	beq.n	800a7c0 <USBD_LL_DataInStage+0x15a>
 800a774:	7dfb      	ldrb	r3, [r7, #23]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d122      	bne.n	800a7c0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b03      	cmp	r3, #3
 800a784:	d11c      	bne.n	800a7c0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a786:	7dfa      	ldrb	r2, [r7, #23]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	32ae      	adds	r2, #174	; 0xae
 800a78c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d014      	beq.n	800a7c0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a796:	7dfa      	ldrb	r2, [r7, #23]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a79e:	7dfa      	ldrb	r2, [r7, #23]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	32ae      	adds	r2, #174	; 0xae
 800a7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a8:	695b      	ldr	r3, [r3, #20]
 800a7aa:	7afa      	ldrb	r2, [r7, #11]
 800a7ac:	4611      	mov	r1, r2
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	4798      	blx	r3
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a7b6:	7dbb      	ldrb	r3, [r7, #22]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d001      	beq.n	800a7c0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a7bc:	7dbb      	ldrb	r3, [r7, #22]
 800a7be:	e000      	b.n	800a7c2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3718      	adds	r7, #24
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b084      	sub	sp, #16
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a802:	2b00      	cmp	r3, #0
 800a804:	d014      	beq.n	800a830 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00e      	beq.n	800a830 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	6852      	ldr	r2, [r2, #4]
 800a81e:	b2d2      	uxtb	r2, r2
 800a820:	4611      	mov	r1, r2
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	4798      	blx	r3
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a82c:	2303      	movs	r3, #3
 800a82e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a830:	2340      	movs	r3, #64	; 0x40
 800a832:	2200      	movs	r2, #0
 800a834:	2100      	movs	r1, #0
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f001 fbd9 	bl	800bfee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2240      	movs	r2, #64	; 0x40
 800a848:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a84c:	2340      	movs	r3, #64	; 0x40
 800a84e:	2200      	movs	r2, #0
 800a850:	2180      	movs	r1, #128	; 0x80
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f001 fbcb 	bl	800bfee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2240      	movs	r2, #64	; 0x40
 800a862:	621a      	str	r2, [r3, #32]

  return ret;
 800a864:	7bfb      	ldrb	r3, [r7, #15]
}
 800a866:	4618      	mov	r0, r3
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a86e:	b480      	push	{r7}
 800a870:	b083      	sub	sp, #12
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
 800a876:	460b      	mov	r3, r1
 800a878:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	78fa      	ldrb	r2, [r7, #3]
 800a87e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	370c      	adds	r7, #12
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr

0800a88e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a88e:	b480      	push	{r7}
 800a890:	b083      	sub	sp, #12
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2204      	movs	r2, #4
 800a8a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr

0800a8ba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a8ba:	b480      	push	{r7}
 800a8bc:	b083      	sub	sp, #12
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	2b04      	cmp	r3, #4
 800a8cc:	d106      	bne.n	800a8dc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a8d4:	b2da      	uxtb	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a8dc:	2300      	movs	r3, #0
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	370c      	adds	r7, #12
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b082      	sub	sp, #8
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d110      	bne.n	800a920 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a904:	2b00      	cmp	r3, #0
 800a906:	d00b      	beq.n	800a920 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a90e:	69db      	ldr	r3, [r3, #28]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d005      	beq.n	800a920 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a91a:	69db      	ldr	r3, [r3, #28]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b082      	sub	sp, #8
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	460b      	mov	r3, r1
 800a934:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	32ae      	adds	r2, #174	; 0xae
 800a940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d101      	bne.n	800a94c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a948:	2303      	movs	r3, #3
 800a94a:	e01c      	b.n	800a986 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a952:	b2db      	uxtb	r3, r3
 800a954:	2b03      	cmp	r3, #3
 800a956:	d115      	bne.n	800a984 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	32ae      	adds	r2, #174	; 0xae
 800a962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a966:	6a1b      	ldr	r3, [r3, #32]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00b      	beq.n	800a984 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	32ae      	adds	r2, #174	; 0xae
 800a976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a97a:	6a1b      	ldr	r3, [r3, #32]
 800a97c:	78fa      	ldrb	r2, [r7, #3]
 800a97e:	4611      	mov	r1, r2
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3708      	adds	r7, #8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b082      	sub	sp, #8
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	460b      	mov	r3, r1
 800a998:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	32ae      	adds	r2, #174	; 0xae
 800a9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d101      	bne.n	800a9b0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	e01c      	b.n	800a9ea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	2b03      	cmp	r3, #3
 800a9ba:	d115      	bne.n	800a9e8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	32ae      	adds	r2, #174	; 0xae
 800a9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00b      	beq.n	800a9e8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	32ae      	adds	r2, #174	; 0xae
 800a9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e0:	78fa      	ldrb	r2, [r7, #3]
 800a9e2:	4611      	mov	r1, r2
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b083      	sub	sp, #12
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00e      	beq.n	800aa44 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	6852      	ldr	r2, [r2, #4]
 800aa32:	b2d2      	uxtb	r2, r2
 800aa34:	4611      	mov	r1, r2
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	4798      	blx	r3
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d001      	beq.n	800aa44 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800aa40:	2303      	movs	r3, #3
 800aa42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aa4e:	b480      	push	{r7}
 800aa50:	b083      	sub	sp, #12
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	460b      	mov	r3, r1
 800aa58:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aa5a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	460b      	mov	r3, r1
 800aa72:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aa74:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	370c      	adds	r7, #12
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr

0800aa82 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b086      	sub	sp, #24
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800aa96:	2300      	movs	r3, #0
 800aa98:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	885b      	ldrh	r3, [r3, #2]
 800aa9e:	b29a      	uxth	r2, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d920      	bls.n	800aaec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800aab2:	e013      	b.n	800aadc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aab4:	f107 030a 	add.w	r3, r7, #10
 800aab8:	4619      	mov	r1, r3
 800aaba:	6978      	ldr	r0, [r7, #20]
 800aabc:	f000 f81b 	bl	800aaf6 <USBD_GetNextDesc>
 800aac0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	785b      	ldrb	r3, [r3, #1]
 800aac6:	2b05      	cmp	r3, #5
 800aac8:	d108      	bne.n	800aadc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	789b      	ldrb	r3, [r3, #2]
 800aad2:	78fa      	ldrb	r2, [r7, #3]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d008      	beq.n	800aaea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aad8:	2300      	movs	r3, #0
 800aada:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	885b      	ldrh	r3, [r3, #2]
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	897b      	ldrh	r3, [r7, #10]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d8e5      	bhi.n	800aab4 <USBD_GetEpDesc+0x32>
 800aae8:	e000      	b.n	800aaec <USBD_GetEpDesc+0x6a>
          break;
 800aaea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aaec:	693b      	ldr	r3, [r7, #16]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3718      	adds	r7, #24
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b085      	sub	sp, #20
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	881a      	ldrh	r2, [r3, #0]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	4413      	add	r3, r2
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4413      	add	r3, r2
 800ab20:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ab22:	68fb      	ldr	r3, [r7, #12]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b087      	sub	sp, #28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	3301      	adds	r3, #1
 800ab46:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ab4e:	8a3b      	ldrh	r3, [r7, #16]
 800ab50:	021b      	lsls	r3, r3, #8
 800ab52:	b21a      	sxth	r2, r3
 800ab54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	b21b      	sxth	r3, r3
 800ab5c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ab5e:	89fb      	ldrh	r3, [r7, #14]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	371c      	adds	r7, #28
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab76:	2300      	movs	r3, #0
 800ab78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab82:	2b40      	cmp	r3, #64	; 0x40
 800ab84:	d005      	beq.n	800ab92 <USBD_StdDevReq+0x26>
 800ab86:	2b40      	cmp	r3, #64	; 0x40
 800ab88:	d857      	bhi.n	800ac3a <USBD_StdDevReq+0xce>
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00f      	beq.n	800abae <USBD_StdDevReq+0x42>
 800ab8e:	2b20      	cmp	r3, #32
 800ab90:	d153      	bne.n	800ac3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	32ae      	adds	r2, #174	; 0xae
 800ab9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	6839      	ldr	r1, [r7, #0]
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	4798      	blx	r3
 800aba8:	4603      	mov	r3, r0
 800abaa:	73fb      	strb	r3, [r7, #15]
      break;
 800abac:	e04a      	b.n	800ac44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	785b      	ldrb	r3, [r3, #1]
 800abb2:	2b09      	cmp	r3, #9
 800abb4:	d83b      	bhi.n	800ac2e <USBD_StdDevReq+0xc2>
 800abb6:	a201      	add	r2, pc, #4	; (adr r2, 800abbc <USBD_StdDevReq+0x50>)
 800abb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abbc:	0800ac11 	.word	0x0800ac11
 800abc0:	0800ac25 	.word	0x0800ac25
 800abc4:	0800ac2f 	.word	0x0800ac2f
 800abc8:	0800ac1b 	.word	0x0800ac1b
 800abcc:	0800ac2f 	.word	0x0800ac2f
 800abd0:	0800abef 	.word	0x0800abef
 800abd4:	0800abe5 	.word	0x0800abe5
 800abd8:	0800ac2f 	.word	0x0800ac2f
 800abdc:	0800ac07 	.word	0x0800ac07
 800abe0:	0800abf9 	.word	0x0800abf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800abe4:	6839      	ldr	r1, [r7, #0]
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fa3c 	bl	800b064 <USBD_GetDescriptor>
          break;
 800abec:	e024      	b.n	800ac38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800abee:	6839      	ldr	r1, [r7, #0]
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 fba1 	bl	800b338 <USBD_SetAddress>
          break;
 800abf6:	e01f      	b.n	800ac38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 fbe0 	bl	800b3c0 <USBD_SetConfig>
 800ac00:	4603      	mov	r3, r0
 800ac02:	73fb      	strb	r3, [r7, #15]
          break;
 800ac04:	e018      	b.n	800ac38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ac06:	6839      	ldr	r1, [r7, #0]
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 fc83 	bl	800b514 <USBD_GetConfig>
          break;
 800ac0e:	e013      	b.n	800ac38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ac10:	6839      	ldr	r1, [r7, #0]
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 fcb4 	bl	800b580 <USBD_GetStatus>
          break;
 800ac18:	e00e      	b.n	800ac38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ac1a:	6839      	ldr	r1, [r7, #0]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 fce3 	bl	800b5e8 <USBD_SetFeature>
          break;
 800ac22:	e009      	b.n	800ac38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ac24:	6839      	ldr	r1, [r7, #0]
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fd07 	bl	800b63a <USBD_ClrFeature>
          break;
 800ac2c:	e004      	b.n	800ac38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ac2e:	6839      	ldr	r1, [r7, #0]
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fd5e 	bl	800b6f2 <USBD_CtlError>
          break;
 800ac36:	bf00      	nop
      }
      break;
 800ac38:	e004      	b.n	800ac44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fd58 	bl	800b6f2 <USBD_CtlError>
      break;
 800ac42:	bf00      	nop
  }

  return ret;
 800ac44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop

0800ac50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac66:	2b40      	cmp	r3, #64	; 0x40
 800ac68:	d005      	beq.n	800ac76 <USBD_StdItfReq+0x26>
 800ac6a:	2b40      	cmp	r3, #64	; 0x40
 800ac6c:	d852      	bhi.n	800ad14 <USBD_StdItfReq+0xc4>
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d001      	beq.n	800ac76 <USBD_StdItfReq+0x26>
 800ac72:	2b20      	cmp	r3, #32
 800ac74:	d14e      	bne.n	800ad14 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d840      	bhi.n	800ad06 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	889b      	ldrh	r3, [r3, #4]
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d836      	bhi.n	800acfc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	889b      	ldrh	r3, [r3, #4]
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7ff fed9 	bl	800aa4e <USBD_CoreFindIF>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aca0:	7bbb      	ldrb	r3, [r7, #14]
 800aca2:	2bff      	cmp	r3, #255	; 0xff
 800aca4:	d01d      	beq.n	800ace2 <USBD_StdItfReq+0x92>
 800aca6:	7bbb      	ldrb	r3, [r7, #14]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d11a      	bne.n	800ace2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800acac:	7bba      	ldrb	r2, [r7, #14]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	32ae      	adds	r2, #174	; 0xae
 800acb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d00f      	beq.n	800acdc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800acbc:	7bba      	ldrb	r2, [r7, #14]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800acc4:	7bba      	ldrb	r2, [r7, #14]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	32ae      	adds	r2, #174	; 0xae
 800acca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	6839      	ldr	r1, [r7, #0]
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	4798      	blx	r3
 800acd6:	4603      	mov	r3, r0
 800acd8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800acda:	e004      	b.n	800ace6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800acdc:	2303      	movs	r3, #3
 800acde:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ace0:	e001      	b.n	800ace6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ace2:	2303      	movs	r3, #3
 800ace4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	88db      	ldrh	r3, [r3, #6]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d110      	bne.n	800ad10 <USBD_StdItfReq+0xc0>
 800acee:	7bfb      	ldrb	r3, [r7, #15]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d10d      	bne.n	800ad10 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fdc7 	bl	800b888 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800acfa:	e009      	b.n	800ad10 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 fcf7 	bl	800b6f2 <USBD_CtlError>
          break;
 800ad04:	e004      	b.n	800ad10 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fcf2 	bl	800b6f2 <USBD_CtlError>
          break;
 800ad0e:	e000      	b.n	800ad12 <USBD_StdItfReq+0xc2>
          break;
 800ad10:	bf00      	nop
      }
      break;
 800ad12:	e004      	b.n	800ad1e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 fceb 	bl	800b6f2 <USBD_CtlError>
      break;
 800ad1c:	bf00      	nop
  }

  return ret;
 800ad1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ad32:	2300      	movs	r3, #0
 800ad34:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	889b      	ldrh	r3, [r3, #4]
 800ad3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad44:	2b40      	cmp	r3, #64	; 0x40
 800ad46:	d007      	beq.n	800ad58 <USBD_StdEPReq+0x30>
 800ad48:	2b40      	cmp	r3, #64	; 0x40
 800ad4a:	f200 817f 	bhi.w	800b04c <USBD_StdEPReq+0x324>
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d02a      	beq.n	800ada8 <USBD_StdEPReq+0x80>
 800ad52:	2b20      	cmp	r3, #32
 800ad54:	f040 817a 	bne.w	800b04c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ad58:	7bbb      	ldrb	r3, [r7, #14]
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7ff fe83 	bl	800aa68 <USBD_CoreFindEP>
 800ad62:	4603      	mov	r3, r0
 800ad64:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad66:	7b7b      	ldrb	r3, [r7, #13]
 800ad68:	2bff      	cmp	r3, #255	; 0xff
 800ad6a:	f000 8174 	beq.w	800b056 <USBD_StdEPReq+0x32e>
 800ad6e:	7b7b      	ldrb	r3, [r7, #13]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f040 8170 	bne.w	800b056 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ad76:	7b7a      	ldrb	r2, [r7, #13]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ad7e:	7b7a      	ldrb	r2, [r7, #13]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	32ae      	adds	r2, #174	; 0xae
 800ad84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f000 8163 	beq.w	800b056 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ad90:	7b7a      	ldrb	r2, [r7, #13]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	32ae      	adds	r2, #174	; 0xae
 800ad96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	4798      	blx	r3
 800ada2:	4603      	mov	r3, r0
 800ada4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ada6:	e156      	b.n	800b056 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	785b      	ldrb	r3, [r3, #1]
 800adac:	2b03      	cmp	r3, #3
 800adae:	d008      	beq.n	800adc2 <USBD_StdEPReq+0x9a>
 800adb0:	2b03      	cmp	r3, #3
 800adb2:	f300 8145 	bgt.w	800b040 <USBD_StdEPReq+0x318>
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	f000 809b 	beq.w	800aef2 <USBD_StdEPReq+0x1ca>
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d03c      	beq.n	800ae3a <USBD_StdEPReq+0x112>
 800adc0:	e13e      	b.n	800b040 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d002      	beq.n	800add4 <USBD_StdEPReq+0xac>
 800adce:	2b03      	cmp	r3, #3
 800add0:	d016      	beq.n	800ae00 <USBD_StdEPReq+0xd8>
 800add2:	e02c      	b.n	800ae2e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800add4:	7bbb      	ldrb	r3, [r7, #14]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00d      	beq.n	800adf6 <USBD_StdEPReq+0xce>
 800adda:	7bbb      	ldrb	r3, [r7, #14]
 800addc:	2b80      	cmp	r3, #128	; 0x80
 800adde:	d00a      	beq.n	800adf6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ade0:	7bbb      	ldrb	r3, [r7, #14]
 800ade2:	4619      	mov	r1, r3
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f001 f947 	bl	800c078 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800adea:	2180      	movs	r1, #128	; 0x80
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f001 f943 	bl	800c078 <USBD_LL_StallEP>
 800adf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800adf4:	e020      	b.n	800ae38 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 fc7a 	bl	800b6f2 <USBD_CtlError>
              break;
 800adfe:	e01b      	b.n	800ae38 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	885b      	ldrh	r3, [r3, #2]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10e      	bne.n	800ae26 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ae08:	7bbb      	ldrb	r3, [r7, #14]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00b      	beq.n	800ae26 <USBD_StdEPReq+0xfe>
 800ae0e:	7bbb      	ldrb	r3, [r7, #14]
 800ae10:	2b80      	cmp	r3, #128	; 0x80
 800ae12:	d008      	beq.n	800ae26 <USBD_StdEPReq+0xfe>
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	88db      	ldrh	r3, [r3, #6]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d104      	bne.n	800ae26 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae1c:	7bbb      	ldrb	r3, [r7, #14]
 800ae1e:	4619      	mov	r1, r3
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f001 f929 	bl	800c078 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 fd2e 	bl	800b888 <USBD_CtlSendStatus>

              break;
 800ae2c:	e004      	b.n	800ae38 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ae2e:	6839      	ldr	r1, [r7, #0]
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 fc5e 	bl	800b6f2 <USBD_CtlError>
              break;
 800ae36:	bf00      	nop
          }
          break;
 800ae38:	e107      	b.n	800b04a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	2b02      	cmp	r3, #2
 800ae44:	d002      	beq.n	800ae4c <USBD_StdEPReq+0x124>
 800ae46:	2b03      	cmp	r3, #3
 800ae48:	d016      	beq.n	800ae78 <USBD_StdEPReq+0x150>
 800ae4a:	e04b      	b.n	800aee4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae4c:	7bbb      	ldrb	r3, [r7, #14]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d00d      	beq.n	800ae6e <USBD_StdEPReq+0x146>
 800ae52:	7bbb      	ldrb	r3, [r7, #14]
 800ae54:	2b80      	cmp	r3, #128	; 0x80
 800ae56:	d00a      	beq.n	800ae6e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae58:	7bbb      	ldrb	r3, [r7, #14]
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f001 f90b 	bl	800c078 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae62:	2180      	movs	r1, #128	; 0x80
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f001 f907 	bl	800c078 <USBD_LL_StallEP>
 800ae6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae6c:	e040      	b.n	800aef0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ae6e:	6839      	ldr	r1, [r7, #0]
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 fc3e 	bl	800b6f2 <USBD_CtlError>
              break;
 800ae76:	e03b      	b.n	800aef0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	885b      	ldrh	r3, [r3, #2]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d136      	bne.n	800aeee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ae80:	7bbb      	ldrb	r3, [r7, #14]
 800ae82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d004      	beq.n	800ae94 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ae8a:	7bbb      	ldrb	r3, [r7, #14]
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f001 f911 	bl	800c0b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fcf7 	bl	800b888 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae9a:	7bbb      	ldrb	r3, [r7, #14]
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f7ff fde2 	bl	800aa68 <USBD_CoreFindEP>
 800aea4:	4603      	mov	r3, r0
 800aea6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aea8:	7b7b      	ldrb	r3, [r7, #13]
 800aeaa:	2bff      	cmp	r3, #255	; 0xff
 800aeac:	d01f      	beq.n	800aeee <USBD_StdEPReq+0x1c6>
 800aeae:	7b7b      	ldrb	r3, [r7, #13]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d11c      	bne.n	800aeee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aeb4:	7b7a      	ldrb	r2, [r7, #13]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aebc:	7b7a      	ldrb	r2, [r7, #13]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	32ae      	adds	r2, #174	; 0xae
 800aec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d010      	beq.n	800aeee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aecc:	7b7a      	ldrb	r2, [r7, #13]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	32ae      	adds	r2, #174	; 0xae
 800aed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	4798      	blx	r3
 800aede:	4603      	mov	r3, r0
 800aee0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aee2:	e004      	b.n	800aeee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fc03 	bl	800b6f2 <USBD_CtlError>
              break;
 800aeec:	e000      	b.n	800aef0 <USBD_StdEPReq+0x1c8>
              break;
 800aeee:	bf00      	nop
          }
          break;
 800aef0:	e0ab      	b.n	800b04a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	d002      	beq.n	800af04 <USBD_StdEPReq+0x1dc>
 800aefe:	2b03      	cmp	r3, #3
 800af00:	d032      	beq.n	800af68 <USBD_StdEPReq+0x240>
 800af02:	e097      	b.n	800b034 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af04:	7bbb      	ldrb	r3, [r7, #14]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d007      	beq.n	800af1a <USBD_StdEPReq+0x1f2>
 800af0a:	7bbb      	ldrb	r3, [r7, #14]
 800af0c:	2b80      	cmp	r3, #128	; 0x80
 800af0e:	d004      	beq.n	800af1a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800af10:	6839      	ldr	r1, [r7, #0]
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 fbed 	bl	800b6f2 <USBD_CtlError>
                break;
 800af18:	e091      	b.n	800b03e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	da0b      	bge.n	800af3a <USBD_StdEPReq+0x212>
 800af22:	7bbb      	ldrb	r3, [r7, #14]
 800af24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af28:	4613      	mov	r3, r2
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	4413      	add	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	3310      	adds	r3, #16
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	4413      	add	r3, r2
 800af36:	3304      	adds	r3, #4
 800af38:	e00b      	b.n	800af52 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af3a:	7bbb      	ldrb	r3, [r7, #14]
 800af3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af40:	4613      	mov	r3, r2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	4413      	add	r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	4413      	add	r3, r2
 800af50:	3304      	adds	r3, #4
 800af52:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	2200      	movs	r2, #0
 800af58:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2202      	movs	r2, #2
 800af5e:	4619      	mov	r1, r3
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fc37 	bl	800b7d4 <USBD_CtlSendData>
              break;
 800af66:	e06a      	b.n	800b03e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800af68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	da11      	bge.n	800af94 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af70:	7bbb      	ldrb	r3, [r7, #14]
 800af72:	f003 020f 	and.w	r2, r3, #15
 800af76:	6879      	ldr	r1, [r7, #4]
 800af78:	4613      	mov	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	440b      	add	r3, r1
 800af82:	3324      	adds	r3, #36	; 0x24
 800af84:	881b      	ldrh	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d117      	bne.n	800afba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 fbb0 	bl	800b6f2 <USBD_CtlError>
                  break;
 800af92:	e054      	b.n	800b03e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af94:	7bbb      	ldrb	r3, [r7, #14]
 800af96:	f003 020f 	and.w	r2, r3, #15
 800af9a:	6879      	ldr	r1, [r7, #4]
 800af9c:	4613      	mov	r3, r2
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4413      	add	r3, r2
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	440b      	add	r3, r1
 800afa6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800afaa:	881b      	ldrh	r3, [r3, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d104      	bne.n	800afba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fb9d 	bl	800b6f2 <USBD_CtlError>
                  break;
 800afb8:	e041      	b.n	800b03e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	da0b      	bge.n	800afda <USBD_StdEPReq+0x2b2>
 800afc2:	7bbb      	ldrb	r3, [r7, #14]
 800afc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afc8:	4613      	mov	r3, r2
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	4413      	add	r3, r2
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	3310      	adds	r3, #16
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	4413      	add	r3, r2
 800afd6:	3304      	adds	r3, #4
 800afd8:	e00b      	b.n	800aff2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800afda:	7bbb      	ldrb	r3, [r7, #14]
 800afdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afe0:	4613      	mov	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	4413      	add	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	4413      	add	r3, r2
 800aff0:	3304      	adds	r3, #4
 800aff2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aff4:	7bbb      	ldrb	r3, [r7, #14]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d002      	beq.n	800b000 <USBD_StdEPReq+0x2d8>
 800affa:	7bbb      	ldrb	r3, [r7, #14]
 800affc:	2b80      	cmp	r3, #128	; 0x80
 800affe:	d103      	bne.n	800b008 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	2200      	movs	r2, #0
 800b004:	601a      	str	r2, [r3, #0]
 800b006:	e00e      	b.n	800b026 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b008:	7bbb      	ldrb	r3, [r7, #14]
 800b00a:	4619      	mov	r1, r3
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f001 f871 	bl	800c0f4 <USBD_LL_IsStallEP>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d003      	beq.n	800b020 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	2201      	movs	r2, #1
 800b01c:	601a      	str	r2, [r3, #0]
 800b01e:	e002      	b.n	800b026 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2200      	movs	r2, #0
 800b024:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	2202      	movs	r2, #2
 800b02a:	4619      	mov	r1, r3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fbd1 	bl	800b7d4 <USBD_CtlSendData>
              break;
 800b032:	e004      	b.n	800b03e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fb5b 	bl	800b6f2 <USBD_CtlError>
              break;
 800b03c:	bf00      	nop
          }
          break;
 800b03e:	e004      	b.n	800b04a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b040:	6839      	ldr	r1, [r7, #0]
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 fb55 	bl	800b6f2 <USBD_CtlError>
          break;
 800b048:	bf00      	nop
      }
      break;
 800b04a:	e005      	b.n	800b058 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 fb4f 	bl	800b6f2 <USBD_CtlError>
      break;
 800b054:	e000      	b.n	800b058 <USBD_StdEPReq+0x330>
      break;
 800b056:	bf00      	nop
  }

  return ret;
 800b058:	7bfb      	ldrb	r3, [r7, #15]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
	...

0800b064 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b06e:	2300      	movs	r3, #0
 800b070:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b072:	2300      	movs	r3, #0
 800b074:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b076:	2300      	movs	r3, #0
 800b078:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	885b      	ldrh	r3, [r3, #2]
 800b07e:	0a1b      	lsrs	r3, r3, #8
 800b080:	b29b      	uxth	r3, r3
 800b082:	3b01      	subs	r3, #1
 800b084:	2b06      	cmp	r3, #6
 800b086:	f200 8128 	bhi.w	800b2da <USBD_GetDescriptor+0x276>
 800b08a:	a201      	add	r2, pc, #4	; (adr r2, 800b090 <USBD_GetDescriptor+0x2c>)
 800b08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b090:	0800b0ad 	.word	0x0800b0ad
 800b094:	0800b0c5 	.word	0x0800b0c5
 800b098:	0800b105 	.word	0x0800b105
 800b09c:	0800b2db 	.word	0x0800b2db
 800b0a0:	0800b2db 	.word	0x0800b2db
 800b0a4:	0800b27b 	.word	0x0800b27b
 800b0a8:	0800b2a7 	.word	0x0800b2a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	7c12      	ldrb	r2, [r2, #16]
 800b0b8:	f107 0108 	add.w	r1, r7, #8
 800b0bc:	4610      	mov	r0, r2
 800b0be:	4798      	blx	r3
 800b0c0:	60f8      	str	r0, [r7, #12]
      break;
 800b0c2:	e112      	b.n	800b2ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	7c1b      	ldrb	r3, [r3, #16]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10d      	bne.n	800b0e8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d4:	f107 0208 	add.w	r2, r7, #8
 800b0d8:	4610      	mov	r0, r2
 800b0da:	4798      	blx	r3
 800b0dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b0e6:	e100      	b.n	800b2ea <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f0:	f107 0208 	add.w	r2, r7, #8
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	4798      	blx	r3
 800b0f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	2202      	movs	r2, #2
 800b100:	701a      	strb	r2, [r3, #0]
      break;
 800b102:	e0f2      	b.n	800b2ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	885b      	ldrh	r3, [r3, #2]
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	2b05      	cmp	r3, #5
 800b10c:	f200 80ac 	bhi.w	800b268 <USBD_GetDescriptor+0x204>
 800b110:	a201      	add	r2, pc, #4	; (adr r2, 800b118 <USBD_GetDescriptor+0xb4>)
 800b112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b116:	bf00      	nop
 800b118:	0800b131 	.word	0x0800b131
 800b11c:	0800b165 	.word	0x0800b165
 800b120:	0800b199 	.word	0x0800b199
 800b124:	0800b1cd 	.word	0x0800b1cd
 800b128:	0800b201 	.word	0x0800b201
 800b12c:	0800b235 	.word	0x0800b235
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00b      	beq.n	800b154 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	7c12      	ldrb	r2, [r2, #16]
 800b148:	f107 0108 	add.w	r1, r7, #8
 800b14c:	4610      	mov	r0, r2
 800b14e:	4798      	blx	r3
 800b150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b152:	e091      	b.n	800b278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b154:	6839      	ldr	r1, [r7, #0]
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 facb 	bl	800b6f2 <USBD_CtlError>
            err++;
 800b15c:	7afb      	ldrb	r3, [r7, #11]
 800b15e:	3301      	adds	r3, #1
 800b160:	72fb      	strb	r3, [r7, #11]
          break;
 800b162:	e089      	b.n	800b278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00b      	beq.n	800b188 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	7c12      	ldrb	r2, [r2, #16]
 800b17c:	f107 0108 	add.w	r1, r7, #8
 800b180:	4610      	mov	r0, r2
 800b182:	4798      	blx	r3
 800b184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b186:	e077      	b.n	800b278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b188:	6839      	ldr	r1, [r7, #0]
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 fab1 	bl	800b6f2 <USBD_CtlError>
            err++;
 800b190:	7afb      	ldrb	r3, [r7, #11]
 800b192:	3301      	adds	r3, #1
 800b194:	72fb      	strb	r3, [r7, #11]
          break;
 800b196:	e06f      	b.n	800b278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d00b      	beq.n	800b1bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	7c12      	ldrb	r2, [r2, #16]
 800b1b0:	f107 0108 	add.w	r1, r7, #8
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	4798      	blx	r3
 800b1b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1ba:	e05d      	b.n	800b278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fa97 	bl	800b6f2 <USBD_CtlError>
            err++;
 800b1c4:	7afb      	ldrb	r3, [r7, #11]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	72fb      	strb	r3, [r7, #11]
          break;
 800b1ca:	e055      	b.n	800b278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00b      	beq.n	800b1f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	7c12      	ldrb	r2, [r2, #16]
 800b1e4:	f107 0108 	add.w	r1, r7, #8
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	4798      	blx	r3
 800b1ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1ee:	e043      	b.n	800b278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 fa7d 	bl	800b6f2 <USBD_CtlError>
            err++;
 800b1f8:	7afb      	ldrb	r3, [r7, #11]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	72fb      	strb	r3, [r7, #11]
          break;
 800b1fe:	e03b      	b.n	800b278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b206:	695b      	ldr	r3, [r3, #20]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00b      	beq.n	800b224 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b212:	695b      	ldr	r3, [r3, #20]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	7c12      	ldrb	r2, [r2, #16]
 800b218:	f107 0108 	add.w	r1, r7, #8
 800b21c:	4610      	mov	r0, r2
 800b21e:	4798      	blx	r3
 800b220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b222:	e029      	b.n	800b278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 fa63 	bl	800b6f2 <USBD_CtlError>
            err++;
 800b22c:	7afb      	ldrb	r3, [r7, #11]
 800b22e:	3301      	adds	r3, #1
 800b230:	72fb      	strb	r3, [r7, #11]
          break;
 800b232:	e021      	b.n	800b278 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b23a:	699b      	ldr	r3, [r3, #24]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d00b      	beq.n	800b258 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b246:	699b      	ldr	r3, [r3, #24]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	7c12      	ldrb	r2, [r2, #16]
 800b24c:	f107 0108 	add.w	r1, r7, #8
 800b250:	4610      	mov	r0, r2
 800b252:	4798      	blx	r3
 800b254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b256:	e00f      	b.n	800b278 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b258:	6839      	ldr	r1, [r7, #0]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fa49 	bl	800b6f2 <USBD_CtlError>
            err++;
 800b260:	7afb      	ldrb	r3, [r7, #11]
 800b262:	3301      	adds	r3, #1
 800b264:	72fb      	strb	r3, [r7, #11]
          break;
 800b266:	e007      	b.n	800b278 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b268:	6839      	ldr	r1, [r7, #0]
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 fa41 	bl	800b6f2 <USBD_CtlError>
          err++;
 800b270:	7afb      	ldrb	r3, [r7, #11]
 800b272:	3301      	adds	r3, #1
 800b274:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b276:	bf00      	nop
      }
      break;
 800b278:	e037      	b.n	800b2ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	7c1b      	ldrb	r3, [r3, #16]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d109      	bne.n	800b296 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b28a:	f107 0208 	add.w	r2, r7, #8
 800b28e:	4610      	mov	r0, r2
 800b290:	4798      	blx	r3
 800b292:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b294:	e029      	b.n	800b2ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b296:	6839      	ldr	r1, [r7, #0]
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 fa2a 	bl	800b6f2 <USBD_CtlError>
        err++;
 800b29e:	7afb      	ldrb	r3, [r7, #11]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	72fb      	strb	r3, [r7, #11]
      break;
 800b2a4:	e021      	b.n	800b2ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	7c1b      	ldrb	r3, [r3, #16]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10d      	bne.n	800b2ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b6:	f107 0208 	add.w	r2, r7, #8
 800b2ba:	4610      	mov	r0, r2
 800b2bc:	4798      	blx	r3
 800b2be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	2207      	movs	r2, #7
 800b2c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2c8:	e00f      	b.n	800b2ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b2ca:	6839      	ldr	r1, [r7, #0]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 fa10 	bl	800b6f2 <USBD_CtlError>
        err++;
 800b2d2:	7afb      	ldrb	r3, [r7, #11]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	72fb      	strb	r3, [r7, #11]
      break;
 800b2d8:	e007      	b.n	800b2ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b2da:	6839      	ldr	r1, [r7, #0]
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 fa08 	bl	800b6f2 <USBD_CtlError>
      err++;
 800b2e2:	7afb      	ldrb	r3, [r7, #11]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	72fb      	strb	r3, [r7, #11]
      break;
 800b2e8:	bf00      	nop
  }

  if (err != 0U)
 800b2ea:	7afb      	ldrb	r3, [r7, #11]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d11e      	bne.n	800b32e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	88db      	ldrh	r3, [r3, #6]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d016      	beq.n	800b326 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b2f8:	893b      	ldrh	r3, [r7, #8]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00e      	beq.n	800b31c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	88da      	ldrh	r2, [r3, #6]
 800b302:	893b      	ldrh	r3, [r7, #8]
 800b304:	4293      	cmp	r3, r2
 800b306:	bf28      	it	cs
 800b308:	4613      	movcs	r3, r2
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b30e:	893b      	ldrh	r3, [r7, #8]
 800b310:	461a      	mov	r2, r3
 800b312:	68f9      	ldr	r1, [r7, #12]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 fa5d 	bl	800b7d4 <USBD_CtlSendData>
 800b31a:	e009      	b.n	800b330 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b31c:	6839      	ldr	r1, [r7, #0]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 f9e7 	bl	800b6f2 <USBD_CtlError>
 800b324:	e004      	b.n	800b330 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 faae 	bl	800b888 <USBD_CtlSendStatus>
 800b32c:	e000      	b.n	800b330 <USBD_GetDescriptor+0x2cc>
    return;
 800b32e:	bf00      	nop
  }
}
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop

0800b338 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	889b      	ldrh	r3, [r3, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d131      	bne.n	800b3ae <USBD_SetAddress+0x76>
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	88db      	ldrh	r3, [r3, #6]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d12d      	bne.n	800b3ae <USBD_SetAddress+0x76>
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	885b      	ldrh	r3, [r3, #2]
 800b356:	2b7f      	cmp	r3, #127	; 0x7f
 800b358:	d829      	bhi.n	800b3ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	885b      	ldrh	r3, [r3, #2]
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b364:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	2b03      	cmp	r3, #3
 800b370:	d104      	bne.n	800b37c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b372:	6839      	ldr	r1, [r7, #0]
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 f9bc 	bl	800b6f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b37a:	e01d      	b.n	800b3b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	7bfa      	ldrb	r2, [r7, #15]
 800b380:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b384:	7bfb      	ldrb	r3, [r7, #15]
 800b386:	4619      	mov	r1, r3
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 fedf 	bl	800c14c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 fa7a 	bl	800b888 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b394:	7bfb      	ldrb	r3, [r7, #15]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d004      	beq.n	800b3a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2202      	movs	r2, #2
 800b39e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3a2:	e009      	b.n	800b3b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ac:	e004      	b.n	800b3b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b3ae:	6839      	ldr	r1, [r7, #0]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 f99e 	bl	800b6f2 <USBD_CtlError>
  }
}
 800b3b6:	bf00      	nop
 800b3b8:	bf00      	nop
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	885b      	ldrh	r3, [r3, #2]
 800b3d2:	b2da      	uxtb	r2, r3
 800b3d4:	4b4e      	ldr	r3, [pc, #312]	; (800b510 <USBD_SetConfig+0x150>)
 800b3d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b3d8:	4b4d      	ldr	r3, [pc, #308]	; (800b510 <USBD_SetConfig+0x150>)
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d905      	bls.n	800b3ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 f985 	bl	800b6f2 <USBD_CtlError>
    return USBD_FAIL;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	e08c      	b.n	800b506 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d002      	beq.n	800b3fe <USBD_SetConfig+0x3e>
 800b3f8:	2b03      	cmp	r3, #3
 800b3fa:	d029      	beq.n	800b450 <USBD_SetConfig+0x90>
 800b3fc:	e075      	b.n	800b4ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b3fe:	4b44      	ldr	r3, [pc, #272]	; (800b510 <USBD_SetConfig+0x150>)
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d020      	beq.n	800b448 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b406:	4b42      	ldr	r3, [pc, #264]	; (800b510 <USBD_SetConfig+0x150>)
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	461a      	mov	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b410:	4b3f      	ldr	r3, [pc, #252]	; (800b510 <USBD_SetConfig+0x150>)
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	4619      	mov	r1, r3
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7fe ffe7 	bl	800a3ea <USBD_SetClassConfig>
 800b41c:	4603      	mov	r3, r0
 800b41e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b420:	7bfb      	ldrb	r3, [r7, #15]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d008      	beq.n	800b438 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b426:	6839      	ldr	r1, [r7, #0]
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 f962 	bl	800b6f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2202      	movs	r2, #2
 800b432:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b436:	e065      	b.n	800b504 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fa25 	bl	800b888 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2203      	movs	r2, #3
 800b442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b446:	e05d      	b.n	800b504 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 fa1d 	bl	800b888 <USBD_CtlSendStatus>
      break;
 800b44e:	e059      	b.n	800b504 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b450:	4b2f      	ldr	r3, [pc, #188]	; (800b510 <USBD_SetConfig+0x150>)
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d112      	bne.n	800b47e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2202      	movs	r2, #2
 800b45c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b460:	4b2b      	ldr	r3, [pc, #172]	; (800b510 <USBD_SetConfig+0x150>)
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	461a      	mov	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b46a:	4b29      	ldr	r3, [pc, #164]	; (800b510 <USBD_SetConfig+0x150>)
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	4619      	mov	r1, r3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7fe ffd6 	bl	800a422 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 fa06 	bl	800b888 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b47c:	e042      	b.n	800b504 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b47e:	4b24      	ldr	r3, [pc, #144]	; (800b510 <USBD_SetConfig+0x150>)
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	461a      	mov	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d02a      	beq.n	800b4e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	b2db      	uxtb	r3, r3
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7fe ffc4 	bl	800a422 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b49a:	4b1d      	ldr	r3, [pc, #116]	; (800b510 <USBD_SetConfig+0x150>)
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b4a4:	4b1a      	ldr	r3, [pc, #104]	; (800b510 <USBD_SetConfig+0x150>)
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f7fe ff9d 	bl	800a3ea <USBD_SetClassConfig>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b4b4:	7bfb      	ldrb	r3, [r7, #15]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00f      	beq.n	800b4da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b4ba:	6839      	ldr	r1, [r7, #0]
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 f918 	bl	800b6f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f7fe ffa9 	bl	800a422 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2202      	movs	r2, #2
 800b4d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b4d8:	e014      	b.n	800b504 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f9d4 	bl	800b888 <USBD_CtlSendStatus>
      break;
 800b4e0:	e010      	b.n	800b504 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 f9d0 	bl	800b888 <USBD_CtlSendStatus>
      break;
 800b4e8:	e00c      	b.n	800b504 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b4ea:	6839      	ldr	r1, [r7, #0]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f900 	bl	800b6f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b4f2:	4b07      	ldr	r3, [pc, #28]	; (800b510 <USBD_SetConfig+0x150>)
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f7fe ff92 	bl	800a422 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b4fe:	2303      	movs	r3, #3
 800b500:	73fb      	strb	r3, [r7, #15]
      break;
 800b502:	bf00      	nop
  }

  return ret;
 800b504:	7bfb      	ldrb	r3, [r7, #15]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	2000048c 	.word	0x2000048c

0800b514 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	88db      	ldrh	r3, [r3, #6]
 800b522:	2b01      	cmp	r3, #1
 800b524:	d004      	beq.n	800b530 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b526:	6839      	ldr	r1, [r7, #0]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 f8e2 	bl	800b6f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b52e:	e023      	b.n	800b578 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b536:	b2db      	uxtb	r3, r3
 800b538:	2b02      	cmp	r3, #2
 800b53a:	dc02      	bgt.n	800b542 <USBD_GetConfig+0x2e>
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	dc03      	bgt.n	800b548 <USBD_GetConfig+0x34>
 800b540:	e015      	b.n	800b56e <USBD_GetConfig+0x5a>
 800b542:	2b03      	cmp	r3, #3
 800b544:	d00b      	beq.n	800b55e <USBD_GetConfig+0x4a>
 800b546:	e012      	b.n	800b56e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	3308      	adds	r3, #8
 800b552:	2201      	movs	r2, #1
 800b554:	4619      	mov	r1, r3
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f93c 	bl	800b7d4 <USBD_CtlSendData>
        break;
 800b55c:	e00c      	b.n	800b578 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	3304      	adds	r3, #4
 800b562:	2201      	movs	r2, #1
 800b564:	4619      	mov	r1, r3
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f934 	bl	800b7d4 <USBD_CtlSendData>
        break;
 800b56c:	e004      	b.n	800b578 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b56e:	6839      	ldr	r1, [r7, #0]
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 f8be 	bl	800b6f2 <USBD_CtlError>
        break;
 800b576:	bf00      	nop
}
 800b578:	bf00      	nop
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b590:	b2db      	uxtb	r3, r3
 800b592:	3b01      	subs	r3, #1
 800b594:	2b02      	cmp	r3, #2
 800b596:	d81e      	bhi.n	800b5d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	88db      	ldrh	r3, [r3, #6]
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d004      	beq.n	800b5aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b5a0:	6839      	ldr	r1, [r7, #0]
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 f8a5 	bl	800b6f2 <USBD_CtlError>
        break;
 800b5a8:	e01a      	b.n	800b5e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d005      	beq.n	800b5c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	f043 0202 	orr.w	r2, r3, #2
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	330c      	adds	r3, #12
 800b5ca:	2202      	movs	r2, #2
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 f900 	bl	800b7d4 <USBD_CtlSendData>
      break;
 800b5d4:	e004      	b.n	800b5e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b5d6:	6839      	ldr	r1, [r7, #0]
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 f88a 	bl	800b6f2 <USBD_CtlError>
      break;
 800b5de:	bf00      	nop
  }
}
 800b5e0:	bf00      	nop
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	885b      	ldrh	r3, [r3, #2]
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d107      	bne.n	800b60a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f940 	bl	800b888 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b608:	e013      	b.n	800b632 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	885b      	ldrh	r3, [r3, #2]
 800b60e:	2b02      	cmp	r3, #2
 800b610:	d10b      	bne.n	800b62a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	889b      	ldrh	r3, [r3, #4]
 800b616:	0a1b      	lsrs	r3, r3, #8
 800b618:	b29b      	uxth	r3, r3
 800b61a:	b2da      	uxtb	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f930 	bl	800b888 <USBD_CtlSendStatus>
}
 800b628:	e003      	b.n	800b632 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b62a:	6839      	ldr	r1, [r7, #0]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 f860 	bl	800b6f2 <USBD_CtlError>
}
 800b632:	bf00      	nop
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b082      	sub	sp, #8
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
 800b642:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	3b01      	subs	r3, #1
 800b64e:	2b02      	cmp	r3, #2
 800b650:	d80b      	bhi.n	800b66a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	885b      	ldrh	r3, [r3, #2]
 800b656:	2b01      	cmp	r3, #1
 800b658:	d10c      	bne.n	800b674 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 f910 	bl	800b888 <USBD_CtlSendStatus>
      }
      break;
 800b668:	e004      	b.n	800b674 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 f840 	bl	800b6f2 <USBD_CtlError>
      break;
 800b672:	e000      	b.n	800b676 <USBD_ClrFeature+0x3c>
      break;
 800b674:	bf00      	nop
  }
}
 800b676:	bf00      	nop
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b084      	sub	sp, #16
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
 800b686:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	781a      	ldrb	r2, [r3, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	3301      	adds	r3, #1
 800b698:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	781a      	ldrb	r2, [r3, #0]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f7ff fa41 	bl	800ab30 <SWAPBYTE>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f7ff fa34 	bl	800ab30 <SWAPBYTE>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f7ff fa27 	bl	800ab30 <SWAPBYTE>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	80da      	strh	r2, [r3, #6]
}
 800b6ea:	bf00      	nop
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b082      	sub	sp, #8
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
 800b6fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6fc:	2180      	movs	r1, #128	; 0x80
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 fcba 	bl	800c078 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b704:	2100      	movs	r1, #0
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fcb6 	bl	800c078 <USBD_LL_StallEP>
}
 800b70c:	bf00      	nop
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b086      	sub	sp, #24
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b720:	2300      	movs	r3, #0
 800b722:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d036      	beq.n	800b798 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b72e:	6938      	ldr	r0, [r7, #16]
 800b730:	f000 f836 	bl	800b7a0 <USBD_GetLen>
 800b734:	4603      	mov	r3, r0
 800b736:	3301      	adds	r3, #1
 800b738:	b29b      	uxth	r3, r3
 800b73a:	005b      	lsls	r3, r3, #1
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b742:	7dfb      	ldrb	r3, [r7, #23]
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	4413      	add	r3, r2
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	7812      	ldrb	r2, [r2, #0]
 800b74c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b74e:	7dfb      	ldrb	r3, [r7, #23]
 800b750:	3301      	adds	r3, #1
 800b752:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b754:	7dfb      	ldrb	r3, [r7, #23]
 800b756:	68ba      	ldr	r2, [r7, #8]
 800b758:	4413      	add	r3, r2
 800b75a:	2203      	movs	r2, #3
 800b75c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b75e:	7dfb      	ldrb	r3, [r7, #23]
 800b760:	3301      	adds	r3, #1
 800b762:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b764:	e013      	b.n	800b78e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b766:	7dfb      	ldrb	r3, [r7, #23]
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	4413      	add	r3, r2
 800b76c:	693a      	ldr	r2, [r7, #16]
 800b76e:	7812      	ldrb	r2, [r2, #0]
 800b770:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	3301      	adds	r3, #1
 800b776:	613b      	str	r3, [r7, #16]
    idx++;
 800b778:	7dfb      	ldrb	r3, [r7, #23]
 800b77a:	3301      	adds	r3, #1
 800b77c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b77e:	7dfb      	ldrb	r3, [r7, #23]
 800b780:	68ba      	ldr	r2, [r7, #8]
 800b782:	4413      	add	r3, r2
 800b784:	2200      	movs	r2, #0
 800b786:	701a      	strb	r2, [r3, #0]
    idx++;
 800b788:	7dfb      	ldrb	r3, [r7, #23]
 800b78a:	3301      	adds	r3, #1
 800b78c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1e7      	bne.n	800b766 <USBD_GetString+0x52>
 800b796:	e000      	b.n	800b79a <USBD_GetString+0x86>
    return;
 800b798:	bf00      	nop
  }
}
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b085      	sub	sp, #20
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b7b0:	e005      	b.n	800b7be <USBD_GetLen+0x1e>
  {
    len++;
 800b7b2:	7bfb      	ldrb	r3, [r7, #15]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1f5      	bne.n	800b7b2 <USBD_GetLen+0x12>
  }

  return len;
 800b7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3714      	adds	r7, #20
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2202      	movs	r2, #2
 800b7e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	68ba      	ldr	r2, [r7, #8]
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f000 fcc5 	bl	800c18a <USBD_LL_Transmit>

  return USBD_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}

0800b80a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b084      	sub	sp, #16
 800b80e:	af00      	add	r7, sp, #0
 800b810:	60f8      	str	r0, [r7, #12]
 800b812:	60b9      	str	r1, [r7, #8]
 800b814:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	2100      	movs	r1, #0
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f000 fcb4 	bl	800c18a <USBD_LL_Transmit>

  return USBD_OK;
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2203      	movs	r2, #3
 800b83c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	68ba      	ldr	r2, [r7, #8]
 800b854:	2100      	movs	r1, #0
 800b856:	68f8      	ldr	r0, [r7, #12]
 800b858:	f000 fcb8 	bl	800c1cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b084      	sub	sp, #16
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	60f8      	str	r0, [r7, #12]
 800b86e:	60b9      	str	r1, [r7, #8]
 800b870:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	2100      	movs	r1, #0
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f000 fca7 	bl	800c1cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3710      	adds	r7, #16
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2204      	movs	r2, #4
 800b894:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b898:	2300      	movs	r3, #0
 800b89a:	2200      	movs	r2, #0
 800b89c:	2100      	movs	r1, #0
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 fc73 	bl	800c18a <USBD_LL_Transmit>

  return USBD_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b082      	sub	sp, #8
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2205      	movs	r2, #5
 800b8ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8be:	2300      	movs	r3, #0
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 fc81 	bl	800c1cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b8d8:	2200      	movs	r2, #0
 800b8da:	4912      	ldr	r1, [pc, #72]	; (800b924 <MX_USB_DEVICE_Init+0x50>)
 800b8dc:	4812      	ldr	r0, [pc, #72]	; (800b928 <MX_USB_DEVICE_Init+0x54>)
 800b8de:	f7fe fd07 	bl	800a2f0 <USBD_Init>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d001      	beq.n	800b8ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b8e8:	f7f5 f804 	bl	80008f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b8ec:	490f      	ldr	r1, [pc, #60]	; (800b92c <MX_USB_DEVICE_Init+0x58>)
 800b8ee:	480e      	ldr	r0, [pc, #56]	; (800b928 <MX_USB_DEVICE_Init+0x54>)
 800b8f0:	f7fe fd2e 	bl	800a350 <USBD_RegisterClass>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d001      	beq.n	800b8fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b8fa:	f7f4 fffb 	bl	80008f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b8fe:	490c      	ldr	r1, [pc, #48]	; (800b930 <MX_USB_DEVICE_Init+0x5c>)
 800b900:	4809      	ldr	r0, [pc, #36]	; (800b928 <MX_USB_DEVICE_Init+0x54>)
 800b902:	f7fe fc65 	bl	800a1d0 <USBD_CDC_RegisterInterface>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b90c:	f7f4 fff2 	bl	80008f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b910:	4805      	ldr	r0, [pc, #20]	; (800b928 <MX_USB_DEVICE_Init+0x54>)
 800b912:	f7fe fd53 	bl	800a3bc <USBD_Start>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b91c:	f7f4 ffea 	bl	80008f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b920:	bf00      	nop
 800b922:	bd80      	pop	{r7, pc}
 800b924:	200000ac 	.word	0x200000ac
 800b928:	20000490 	.word	0x20000490
 800b92c:	20000018 	.word	0x20000018
 800b930:	20000098 	.word	0x20000098

0800b934 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b938:	2200      	movs	r2, #0
 800b93a:	4905      	ldr	r1, [pc, #20]	; (800b950 <CDC_Init_FS+0x1c>)
 800b93c:	4805      	ldr	r0, [pc, #20]	; (800b954 <CDC_Init_FS+0x20>)
 800b93e:	f7fe fc61 	bl	800a204 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b942:	4905      	ldr	r1, [pc, #20]	; (800b958 <CDC_Init_FS+0x24>)
 800b944:	4803      	ldr	r0, [pc, #12]	; (800b954 <CDC_Init_FS+0x20>)
 800b946:	f7fe fc7f 	bl	800a248 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b94a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	20000b6c 	.word	0x20000b6c
 800b954:	20000490 	.word	0x20000490
 800b958:	2000076c 	.word	0x2000076c

0800b95c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b95c:	b480      	push	{r7}
 800b95e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b960:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b962:	4618      	mov	r0, r3
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	4603      	mov	r3, r0
 800b974:	6039      	str	r1, [r7, #0]
 800b976:	71fb      	strb	r3, [r7, #7]
 800b978:	4613      	mov	r3, r2
 800b97a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b97c:	79fb      	ldrb	r3, [r7, #7]
 800b97e:	2b23      	cmp	r3, #35	; 0x23
 800b980:	d84a      	bhi.n	800ba18 <CDC_Control_FS+0xac>
 800b982:	a201      	add	r2, pc, #4	; (adr r2, 800b988 <CDC_Control_FS+0x1c>)
 800b984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b988:	0800ba19 	.word	0x0800ba19
 800b98c:	0800ba19 	.word	0x0800ba19
 800b990:	0800ba19 	.word	0x0800ba19
 800b994:	0800ba19 	.word	0x0800ba19
 800b998:	0800ba19 	.word	0x0800ba19
 800b99c:	0800ba19 	.word	0x0800ba19
 800b9a0:	0800ba19 	.word	0x0800ba19
 800b9a4:	0800ba19 	.word	0x0800ba19
 800b9a8:	0800ba19 	.word	0x0800ba19
 800b9ac:	0800ba19 	.word	0x0800ba19
 800b9b0:	0800ba19 	.word	0x0800ba19
 800b9b4:	0800ba19 	.word	0x0800ba19
 800b9b8:	0800ba19 	.word	0x0800ba19
 800b9bc:	0800ba19 	.word	0x0800ba19
 800b9c0:	0800ba19 	.word	0x0800ba19
 800b9c4:	0800ba19 	.word	0x0800ba19
 800b9c8:	0800ba19 	.word	0x0800ba19
 800b9cc:	0800ba19 	.word	0x0800ba19
 800b9d0:	0800ba19 	.word	0x0800ba19
 800b9d4:	0800ba19 	.word	0x0800ba19
 800b9d8:	0800ba19 	.word	0x0800ba19
 800b9dc:	0800ba19 	.word	0x0800ba19
 800b9e0:	0800ba19 	.word	0x0800ba19
 800b9e4:	0800ba19 	.word	0x0800ba19
 800b9e8:	0800ba19 	.word	0x0800ba19
 800b9ec:	0800ba19 	.word	0x0800ba19
 800b9f0:	0800ba19 	.word	0x0800ba19
 800b9f4:	0800ba19 	.word	0x0800ba19
 800b9f8:	0800ba19 	.word	0x0800ba19
 800b9fc:	0800ba19 	.word	0x0800ba19
 800ba00:	0800ba19 	.word	0x0800ba19
 800ba04:	0800ba19 	.word	0x0800ba19
 800ba08:	0800ba19 	.word	0x0800ba19
 800ba0c:	0800ba19 	.word	0x0800ba19
 800ba10:	0800ba19 	.word	0x0800ba19
 800ba14:	0800ba19 	.word	0x0800ba19
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ba18:	bf00      	nop
  }

  return (USBD_OK);
 800ba1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ba32:	6879      	ldr	r1, [r7, #4]
 800ba34:	4805      	ldr	r0, [pc, #20]	; (800ba4c <CDC_Receive_FS+0x24>)
 800ba36:	f7fe fc07 	bl	800a248 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ba3a:	4804      	ldr	r0, [pc, #16]	; (800ba4c <CDC_Receive_FS+0x24>)
 800ba3c:	f7fe fc22 	bl	800a284 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ba40:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	20000490 	.word	0x20000490

0800ba50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b087      	sub	sp, #28
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ba62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	371c      	adds	r7, #28
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
	...

0800ba74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	6039      	str	r1, [r7, #0]
 800ba7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2212      	movs	r2, #18
 800ba84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ba86:	4b03      	ldr	r3, [pc, #12]	; (800ba94 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	200000c8 	.word	0x200000c8

0800ba98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	6039      	str	r1, [r7, #0]
 800baa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	2204      	movs	r2, #4
 800baa8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800baaa:	4b03      	ldr	r3, [pc, #12]	; (800bab8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800baac:	4618      	mov	r0, r3
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr
 800bab8:	200000dc 	.word	0x200000dc

0800babc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	4603      	mov	r3, r0
 800bac4:	6039      	str	r1, [r7, #0]
 800bac6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bac8:	79fb      	ldrb	r3, [r7, #7]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d105      	bne.n	800bada <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bace:	683a      	ldr	r2, [r7, #0]
 800bad0:	4907      	ldr	r1, [pc, #28]	; (800baf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bad2:	4808      	ldr	r0, [pc, #32]	; (800baf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bad4:	f7ff fe1e 	bl	800b714 <USBD_GetString>
 800bad8:	e004      	b.n	800bae4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bada:	683a      	ldr	r2, [r7, #0]
 800badc:	4904      	ldr	r1, [pc, #16]	; (800baf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bade:	4805      	ldr	r0, [pc, #20]	; (800baf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bae0:	f7ff fe18 	bl	800b714 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bae4:	4b02      	ldr	r3, [pc, #8]	; (800baf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	20000f6c 	.word	0x20000f6c
 800baf4:	0800c32c 	.word	0x0800c32c

0800baf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	4603      	mov	r3, r0
 800bb00:	6039      	str	r1, [r7, #0]
 800bb02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bb04:	683a      	ldr	r2, [r7, #0]
 800bb06:	4904      	ldr	r1, [pc, #16]	; (800bb18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bb08:	4804      	ldr	r0, [pc, #16]	; (800bb1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bb0a:	f7ff fe03 	bl	800b714 <USBD_GetString>
  return USBD_StrDesc;
 800bb0e:	4b02      	ldr	r3, [pc, #8]	; (800bb18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	20000f6c 	.word	0x20000f6c
 800bb1c:	0800c344 	.word	0x0800c344

0800bb20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	4603      	mov	r3, r0
 800bb28:	6039      	str	r1, [r7, #0]
 800bb2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	221a      	movs	r2, #26
 800bb30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bb32:	f000 f843 	bl	800bbbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bb36:	4b02      	ldr	r3, [pc, #8]	; (800bb40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	200000e0 	.word	0x200000e0

0800bb44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	6039      	str	r1, [r7, #0]
 800bb4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bb50:	79fb      	ldrb	r3, [r7, #7]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d105      	bne.n	800bb62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb56:	683a      	ldr	r2, [r7, #0]
 800bb58:	4907      	ldr	r1, [pc, #28]	; (800bb78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb5a:	4808      	ldr	r0, [pc, #32]	; (800bb7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb5c:	f7ff fdda 	bl	800b714 <USBD_GetString>
 800bb60:	e004      	b.n	800bb6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb62:	683a      	ldr	r2, [r7, #0]
 800bb64:	4904      	ldr	r1, [pc, #16]	; (800bb78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb66:	4805      	ldr	r0, [pc, #20]	; (800bb7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb68:	f7ff fdd4 	bl	800b714 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb6c:	4b02      	ldr	r3, [pc, #8]	; (800bb78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	20000f6c 	.word	0x20000f6c
 800bb7c:	0800c358 	.word	0x0800c358

0800bb80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	4603      	mov	r3, r0
 800bb88:	6039      	str	r1, [r7, #0]
 800bb8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb8c:	79fb      	ldrb	r3, [r7, #7]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d105      	bne.n	800bb9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb92:	683a      	ldr	r2, [r7, #0]
 800bb94:	4907      	ldr	r1, [pc, #28]	; (800bbb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb96:	4808      	ldr	r0, [pc, #32]	; (800bbb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb98:	f7ff fdbc 	bl	800b714 <USBD_GetString>
 800bb9c:	e004      	b.n	800bba8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	4904      	ldr	r1, [pc, #16]	; (800bbb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bba2:	4805      	ldr	r0, [pc, #20]	; (800bbb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bba4:	f7ff fdb6 	bl	800b714 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bba8:	4b02      	ldr	r3, [pc, #8]	; (800bbb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	20000f6c 	.word	0x20000f6c
 800bbb8:	0800c364 	.word	0x0800c364

0800bbbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bbc2:	4b0f      	ldr	r3, [pc, #60]	; (800bc00 <Get_SerialNum+0x44>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bbc8:	4b0e      	ldr	r3, [pc, #56]	; (800bc04 <Get_SerialNum+0x48>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bbce:	4b0e      	ldr	r3, [pc, #56]	; (800bc08 <Get_SerialNum+0x4c>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bbd4:	68fa      	ldr	r2, [r7, #12]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	4413      	add	r3, r2
 800bbda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d009      	beq.n	800bbf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bbe2:	2208      	movs	r2, #8
 800bbe4:	4909      	ldr	r1, [pc, #36]	; (800bc0c <Get_SerialNum+0x50>)
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f000 f814 	bl	800bc14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bbec:	2204      	movs	r2, #4
 800bbee:	4908      	ldr	r1, [pc, #32]	; (800bc10 <Get_SerialNum+0x54>)
 800bbf0:	68b8      	ldr	r0, [r7, #8]
 800bbf2:	f000 f80f 	bl	800bc14 <IntToUnicode>
  }
}
 800bbf6:	bf00      	nop
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	1fff7a10 	.word	0x1fff7a10
 800bc04:	1fff7a14 	.word	0x1fff7a14
 800bc08:	1fff7a18 	.word	0x1fff7a18
 800bc0c:	200000e2 	.word	0x200000e2
 800bc10:	200000f2 	.word	0x200000f2

0800bc14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b087      	sub	sp, #28
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bc22:	2300      	movs	r3, #0
 800bc24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bc26:	2300      	movs	r3, #0
 800bc28:	75fb      	strb	r3, [r7, #23]
 800bc2a:	e027      	b.n	800bc7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	0f1b      	lsrs	r3, r3, #28
 800bc30:	2b09      	cmp	r3, #9
 800bc32:	d80b      	bhi.n	800bc4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	0f1b      	lsrs	r3, r3, #28
 800bc38:	b2da      	uxtb	r2, r3
 800bc3a:	7dfb      	ldrb	r3, [r7, #23]
 800bc3c:	005b      	lsls	r3, r3, #1
 800bc3e:	4619      	mov	r1, r3
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	440b      	add	r3, r1
 800bc44:	3230      	adds	r2, #48	; 0x30
 800bc46:	b2d2      	uxtb	r2, r2
 800bc48:	701a      	strb	r2, [r3, #0]
 800bc4a:	e00a      	b.n	800bc62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	0f1b      	lsrs	r3, r3, #28
 800bc50:	b2da      	uxtb	r2, r3
 800bc52:	7dfb      	ldrb	r3, [r7, #23]
 800bc54:	005b      	lsls	r3, r3, #1
 800bc56:	4619      	mov	r1, r3
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	440b      	add	r3, r1
 800bc5c:	3237      	adds	r2, #55	; 0x37
 800bc5e:	b2d2      	uxtb	r2, r2
 800bc60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	011b      	lsls	r3, r3, #4
 800bc66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bc68:	7dfb      	ldrb	r3, [r7, #23]
 800bc6a:	005b      	lsls	r3, r3, #1
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	4413      	add	r3, r2
 800bc72:	2200      	movs	r2, #0
 800bc74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bc76:	7dfb      	ldrb	r3, [r7, #23]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	75fb      	strb	r3, [r7, #23]
 800bc7c:	7dfa      	ldrb	r2, [r7, #23]
 800bc7e:	79fb      	ldrb	r3, [r7, #7]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d3d3      	bcc.n	800bc2c <IntToUnicode+0x18>
  }
}
 800bc84:	bf00      	nop
 800bc86:	bf00      	nop
 800bc88:	371c      	adds	r7, #28
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
	...

0800bc94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b08a      	sub	sp, #40	; 0x28
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc9c:	f107 0314 	add.w	r3, r7, #20
 800bca0:	2200      	movs	r2, #0
 800bca2:	601a      	str	r2, [r3, #0]
 800bca4:	605a      	str	r2, [r3, #4]
 800bca6:	609a      	str	r2, [r3, #8]
 800bca8:	60da      	str	r2, [r3, #12]
 800bcaa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bcb4:	d13a      	bne.n	800bd2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	613b      	str	r3, [r7, #16]
 800bcba:	4b1e      	ldr	r3, [pc, #120]	; (800bd34 <HAL_PCD_MspInit+0xa0>)
 800bcbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcbe:	4a1d      	ldr	r2, [pc, #116]	; (800bd34 <HAL_PCD_MspInit+0xa0>)
 800bcc0:	f043 0301 	orr.w	r3, r3, #1
 800bcc4:	6313      	str	r3, [r2, #48]	; 0x30
 800bcc6:	4b1b      	ldr	r3, [pc, #108]	; (800bd34 <HAL_PCD_MspInit+0xa0>)
 800bcc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcca:	f003 0301 	and.w	r3, r3, #1
 800bcce:	613b      	str	r3, [r7, #16]
 800bcd0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bcd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bcd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcd8:	2302      	movs	r3, #2
 800bcda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bce0:	2303      	movs	r3, #3
 800bce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bce4:	230a      	movs	r3, #10
 800bce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bce8:	f107 0314 	add.w	r3, r7, #20
 800bcec:	4619      	mov	r1, r3
 800bcee:	4812      	ldr	r0, [pc, #72]	; (800bd38 <HAL_PCD_MspInit+0xa4>)
 800bcf0:	f7f5 ffb0 	bl	8001c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bcf4:	4b0f      	ldr	r3, [pc, #60]	; (800bd34 <HAL_PCD_MspInit+0xa0>)
 800bcf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcf8:	4a0e      	ldr	r2, [pc, #56]	; (800bd34 <HAL_PCD_MspInit+0xa0>)
 800bcfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcfe:	6353      	str	r3, [r2, #52]	; 0x34
 800bd00:	2300      	movs	r3, #0
 800bd02:	60fb      	str	r3, [r7, #12]
 800bd04:	4b0b      	ldr	r3, [pc, #44]	; (800bd34 <HAL_PCD_MspInit+0xa0>)
 800bd06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd08:	4a0a      	ldr	r2, [pc, #40]	; (800bd34 <HAL_PCD_MspInit+0xa0>)
 800bd0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bd0e:	6453      	str	r3, [r2, #68]	; 0x44
 800bd10:	4b08      	ldr	r3, [pc, #32]	; (800bd34 <HAL_PCD_MspInit+0xa0>)
 800bd12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd18:	60fb      	str	r3, [r7, #12]
 800bd1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	2100      	movs	r1, #0
 800bd20:	2043      	movs	r0, #67	; 0x43
 800bd22:	f7f5 fbd6 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bd26:	2043      	movs	r0, #67	; 0x43
 800bd28:	f7f5 fbef 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bd2c:	bf00      	nop
 800bd2e:	3728      	adds	r7, #40	; 0x28
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	40023800 	.word	0x40023800
 800bd38:	40020000 	.word	0x40020000

0800bd3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bd50:	4619      	mov	r1, r3
 800bd52:	4610      	mov	r0, r2
 800bd54:	f7fe fb7f 	bl	800a456 <USBD_LL_SetupStage>
}
 800bd58:	bf00      	nop
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	460b      	mov	r3, r1
 800bd6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bd72:	78fa      	ldrb	r2, [r7, #3]
 800bd74:	6879      	ldr	r1, [r7, #4]
 800bd76:	4613      	mov	r3, r2
 800bd78:	00db      	lsls	r3, r3, #3
 800bd7a:	4413      	add	r3, r2
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	440b      	add	r3, r1
 800bd80:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	78fb      	ldrb	r3, [r7, #3]
 800bd88:	4619      	mov	r1, r3
 800bd8a:	f7fe fbb9 	bl	800a500 <USBD_LL_DataOutStage>
}
 800bd8e:	bf00      	nop
 800bd90:	3708      	adds	r7, #8
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b082      	sub	sp, #8
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
 800bd9e:	460b      	mov	r3, r1
 800bda0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bda8:	78fa      	ldrb	r2, [r7, #3]
 800bdaa:	6879      	ldr	r1, [r7, #4]
 800bdac:	4613      	mov	r3, r2
 800bdae:	00db      	lsls	r3, r3, #3
 800bdb0:	4413      	add	r3, r2
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	440b      	add	r3, r1
 800bdb6:	334c      	adds	r3, #76	; 0x4c
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	78fb      	ldrb	r3, [r7, #3]
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	f7fe fc52 	bl	800a666 <USBD_LL_DataInStage>
}
 800bdc2:	bf00      	nop
 800bdc4:	3708      	adds	r7, #8
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b082      	sub	sp, #8
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7fe fd86 	bl	800a8ea <USBD_LL_SOF>
}
 800bdde:	bf00      	nop
 800bde0:	3708      	adds	r7, #8
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b084      	sub	sp, #16
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d102      	bne.n	800be00 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	73fb      	strb	r3, [r7, #15]
 800bdfe:	e008      	b.n	800be12 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	2b02      	cmp	r3, #2
 800be06:	d102      	bne.n	800be0e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800be08:	2301      	movs	r3, #1
 800be0a:	73fb      	strb	r3, [r7, #15]
 800be0c:	e001      	b.n	800be12 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800be0e:	f7f4 fd71 	bl	80008f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be18:	7bfa      	ldrb	r2, [r7, #15]
 800be1a:	4611      	mov	r1, r2
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7fe fd26 	bl	800a86e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be28:	4618      	mov	r0, r3
 800be2a:	f7fe fcce 	bl	800a7ca <USBD_LL_Reset>
}
 800be2e:	bf00      	nop
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
	...

0800be38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be46:	4618      	mov	r0, r3
 800be48:	f7fe fd21 	bl	800a88e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	6812      	ldr	r2, [r2, #0]
 800be5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800be5e:	f043 0301 	orr.w	r3, r3, #1
 800be62:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6a1b      	ldr	r3, [r3, #32]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d005      	beq.n	800be78 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be6c:	4b04      	ldr	r3, [pc, #16]	; (800be80 <HAL_PCD_SuspendCallback+0x48>)
 800be6e:	691b      	ldr	r3, [r3, #16]
 800be70:	4a03      	ldr	r2, [pc, #12]	; (800be80 <HAL_PCD_SuspendCallback+0x48>)
 800be72:	f043 0306 	orr.w	r3, r3, #6
 800be76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800be78:	bf00      	nop
 800be7a:	3708      	adds	r7, #8
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	e000ed00 	.word	0xe000ed00

0800be84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be92:	4618      	mov	r0, r3
 800be94:	f7fe fd11 	bl	800a8ba <USBD_LL_Resume>
}
 800be98:	bf00      	nop
 800be9a:	3708      	adds	r7, #8
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	460b      	mov	r3, r1
 800beaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800beb2:	78fa      	ldrb	r2, [r7, #3]
 800beb4:	4611      	mov	r1, r2
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fe fd69 	bl	800a98e <USBD_LL_IsoOUTIncomplete>
}
 800bebc:	bf00      	nop
 800bebe:	3708      	adds	r7, #8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	460b      	mov	r3, r1
 800bece:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bed6:	78fa      	ldrb	r2, [r7, #3]
 800bed8:	4611      	mov	r1, r2
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fe fd25 	bl	800a92a <USBD_LL_IsoINIncomplete>
}
 800bee0:	bf00      	nop
 800bee2:	3708      	adds	r7, #8
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fe fd7b 	bl	800a9f2 <USBD_LL_DevConnected>
}
 800befc:	bf00      	nop
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fe fd78 	bl	800aa08 <USBD_LL_DevDisconnected>
}
 800bf18:	bf00      	nop
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d13c      	bne.n	800bfaa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bf30:	4a20      	ldr	r2, [pc, #128]	; (800bfb4 <USBD_LL_Init+0x94>)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	4a1e      	ldr	r2, [pc, #120]	; (800bfb4 <USBD_LL_Init+0x94>)
 800bf3c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bf40:	4b1c      	ldr	r3, [pc, #112]	; (800bfb4 <USBD_LL_Init+0x94>)
 800bf42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bf46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bf48:	4b1a      	ldr	r3, [pc, #104]	; (800bfb4 <USBD_LL_Init+0x94>)
 800bf4a:	2204      	movs	r2, #4
 800bf4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bf4e:	4b19      	ldr	r3, [pc, #100]	; (800bfb4 <USBD_LL_Init+0x94>)
 800bf50:	2202      	movs	r2, #2
 800bf52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bf54:	4b17      	ldr	r3, [pc, #92]	; (800bfb4 <USBD_LL_Init+0x94>)
 800bf56:	2200      	movs	r2, #0
 800bf58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bf5a:	4b16      	ldr	r3, [pc, #88]	; (800bfb4 <USBD_LL_Init+0x94>)
 800bf5c:	2202      	movs	r2, #2
 800bf5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800bf60:	4b14      	ldr	r3, [pc, #80]	; (800bfb4 <USBD_LL_Init+0x94>)
 800bf62:	2201      	movs	r2, #1
 800bf64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bf66:	4b13      	ldr	r3, [pc, #76]	; (800bfb4 <USBD_LL_Init+0x94>)
 800bf68:	2200      	movs	r2, #0
 800bf6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bf6c:	4b11      	ldr	r3, [pc, #68]	; (800bfb4 <USBD_LL_Init+0x94>)
 800bf6e:	2200      	movs	r2, #0
 800bf70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bf72:	4b10      	ldr	r3, [pc, #64]	; (800bfb4 <USBD_LL_Init+0x94>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bf78:	4b0e      	ldr	r3, [pc, #56]	; (800bfb4 <USBD_LL_Init+0x94>)
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bf7e:	480d      	ldr	r0, [pc, #52]	; (800bfb4 <USBD_LL_Init+0x94>)
 800bf80:	f7f7 fe61 	bl	8003c46 <HAL_PCD_Init>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d001      	beq.n	800bf8e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bf8a:	f7f4 fcb3 	bl	80008f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bf8e:	2180      	movs	r1, #128	; 0x80
 800bf90:	4808      	ldr	r0, [pc, #32]	; (800bfb4 <USBD_LL_Init+0x94>)
 800bf92:	f7f9 f8b8 	bl	8005106 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bf96:	2240      	movs	r2, #64	; 0x40
 800bf98:	2100      	movs	r1, #0
 800bf9a:	4806      	ldr	r0, [pc, #24]	; (800bfb4 <USBD_LL_Init+0x94>)
 800bf9c:	f7f9 f86c 	bl	8005078 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bfa0:	2280      	movs	r2, #128	; 0x80
 800bfa2:	2101      	movs	r1, #1
 800bfa4:	4803      	ldr	r0, [pc, #12]	; (800bfb4 <USBD_LL_Init+0x94>)
 800bfa6:	f7f9 f867 	bl	8005078 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	2000116c 	.word	0x2000116c

0800bfb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7f7 ff56 	bl	8003e80 <HAL_PCD_Start>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 f942 	bl	800c264 <USBD_Get_USB_Status>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b084      	sub	sp, #16
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	4608      	mov	r0, r1
 800bff8:	4611      	mov	r1, r2
 800bffa:	461a      	mov	r2, r3
 800bffc:	4603      	mov	r3, r0
 800bffe:	70fb      	strb	r3, [r7, #3]
 800c000:	460b      	mov	r3, r1
 800c002:	70bb      	strb	r3, [r7, #2]
 800c004:	4613      	mov	r3, r2
 800c006:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c008:	2300      	movs	r3, #0
 800c00a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c00c:	2300      	movs	r3, #0
 800c00e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c016:	78bb      	ldrb	r3, [r7, #2]
 800c018:	883a      	ldrh	r2, [r7, #0]
 800c01a:	78f9      	ldrb	r1, [r7, #3]
 800c01c:	f7f8 fc27 	bl	800486e <HAL_PCD_EP_Open>
 800c020:	4603      	mov	r3, r0
 800c022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c024:	7bfb      	ldrb	r3, [r7, #15]
 800c026:	4618      	mov	r0, r3
 800c028:	f000 f91c 	bl	800c264 <USBD_Get_USB_Status>
 800c02c:	4603      	mov	r3, r0
 800c02e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c030:	7bbb      	ldrb	r3, [r7, #14]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b084      	sub	sp, #16
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	460b      	mov	r3, r1
 800c044:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c046:	2300      	movs	r3, #0
 800c048:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c04a:	2300      	movs	r3, #0
 800c04c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c054:	78fa      	ldrb	r2, [r7, #3]
 800c056:	4611      	mov	r1, r2
 800c058:	4618      	mov	r0, r3
 800c05a:	f7f8 fc70 	bl	800493e <HAL_PCD_EP_Close>
 800c05e:	4603      	mov	r3, r0
 800c060:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c062:	7bfb      	ldrb	r3, [r7, #15]
 800c064:	4618      	mov	r0, r3
 800c066:	f000 f8fd 	bl	800c264 <USBD_Get_USB_Status>
 800c06a:	4603      	mov	r3, r0
 800c06c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c06e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3710      	adds	r7, #16
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c088:	2300      	movs	r3, #0
 800c08a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c092:	78fa      	ldrb	r2, [r7, #3]
 800c094:	4611      	mov	r1, r2
 800c096:	4618      	mov	r0, r3
 800c098:	f7f8 fd48 	bl	8004b2c <HAL_PCD_EP_SetStall>
 800c09c:	4603      	mov	r3, r0
 800c09e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0a0:	7bfb      	ldrb	r3, [r7, #15]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f000 f8de 	bl	800c264 <USBD_Get_USB_Status>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b084      	sub	sp, #16
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
 800c0be:	460b      	mov	r3, r1
 800c0c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c0d0:	78fa      	ldrb	r2, [r7, #3]
 800c0d2:	4611      	mov	r1, r2
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f7f8 fd8d 	bl	8004bf4 <HAL_PCD_EP_ClrStall>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0de:	7bfb      	ldrb	r3, [r7, #15]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f000 f8bf 	bl	800c264 <USBD_Get_USB_Status>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c106:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	da0b      	bge.n	800c128 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c110:	78fb      	ldrb	r3, [r7, #3]
 800c112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c116:	68f9      	ldr	r1, [r7, #12]
 800c118:	4613      	mov	r3, r2
 800c11a:	00db      	lsls	r3, r3, #3
 800c11c:	4413      	add	r3, r2
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	440b      	add	r3, r1
 800c122:	333e      	adds	r3, #62	; 0x3e
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	e00b      	b.n	800c140 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c128:	78fb      	ldrb	r3, [r7, #3]
 800c12a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c12e:	68f9      	ldr	r1, [r7, #12]
 800c130:	4613      	mov	r3, r2
 800c132:	00db      	lsls	r3, r3, #3
 800c134:	4413      	add	r3, r2
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	440b      	add	r3, r1
 800c13a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c13e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c140:	4618      	mov	r0, r3
 800c142:	3714      	adds	r7, #20
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	460b      	mov	r3, r1
 800c156:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c158:	2300      	movs	r3, #0
 800c15a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c15c:	2300      	movs	r3, #0
 800c15e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c166:	78fa      	ldrb	r2, [r7, #3]
 800c168:	4611      	mov	r1, r2
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7f8 fb5a 	bl	8004824 <HAL_PCD_SetAddress>
 800c170:	4603      	mov	r3, r0
 800c172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c174:	7bfb      	ldrb	r3, [r7, #15]
 800c176:	4618      	mov	r0, r3
 800c178:	f000 f874 	bl	800c264 <USBD_Get_USB_Status>
 800c17c:	4603      	mov	r3, r0
 800c17e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c180:	7bbb      	ldrb	r3, [r7, #14]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b086      	sub	sp, #24
 800c18e:	af00      	add	r7, sp, #0
 800c190:	60f8      	str	r0, [r7, #12]
 800c192:	607a      	str	r2, [r7, #4]
 800c194:	603b      	str	r3, [r7, #0]
 800c196:	460b      	mov	r3, r1
 800c198:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c19a:	2300      	movs	r3, #0
 800c19c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c1a8:	7af9      	ldrb	r1, [r7, #11]
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	f7f8 fc73 	bl	8004a98 <HAL_PCD_EP_Transmit>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1b6:	7dfb      	ldrb	r3, [r7, #23]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f000 f853 	bl	800c264 <USBD_Get_USB_Status>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c1c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3718      	adds	r7, #24
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b086      	sub	sp, #24
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	607a      	str	r2, [r7, #4]
 800c1d6:	603b      	str	r3, [r7, #0]
 800c1d8:	460b      	mov	r3, r1
 800c1da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c1ea:	7af9      	ldrb	r1, [r7, #11]
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	f7f8 fbef 	bl	80049d2 <HAL_PCD_EP_Receive>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1f8:	7dfb      	ldrb	r3, [r7, #23]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f000 f832 	bl	800c264 <USBD_Get_USB_Status>
 800c200:	4603      	mov	r3, r0
 800c202:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c204:	7dbb      	ldrb	r3, [r7, #22]
}
 800c206:	4618      	mov	r0, r3
 800c208:	3718      	adds	r7, #24
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b082      	sub	sp, #8
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
 800c216:	460b      	mov	r3, r1
 800c218:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c220:	78fa      	ldrb	r2, [r7, #3]
 800c222:	4611      	mov	r1, r2
 800c224:	4618      	mov	r0, r3
 800c226:	f7f8 fc1f 	bl	8004a68 <HAL_PCD_EP_GetRxCount>
 800c22a:	4603      	mov	r3, r0
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c23c:	4b03      	ldr	r3, [pc, #12]	; (800c24c <USBD_static_malloc+0x18>)
}
 800c23e:	4618      	mov	r0, r3
 800c240:	370c      	adds	r7, #12
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	20001678 	.word	0x20001678

0800c250 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]

}
 800c258:	bf00      	nop
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c264:	b480      	push	{r7}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
 800c26a:	4603      	mov	r3, r0
 800c26c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c26e:	2300      	movs	r3, #0
 800c270:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c272:	79fb      	ldrb	r3, [r7, #7]
 800c274:	2b03      	cmp	r3, #3
 800c276:	d817      	bhi.n	800c2a8 <USBD_Get_USB_Status+0x44>
 800c278:	a201      	add	r2, pc, #4	; (adr r2, 800c280 <USBD_Get_USB_Status+0x1c>)
 800c27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27e:	bf00      	nop
 800c280:	0800c291 	.word	0x0800c291
 800c284:	0800c297 	.word	0x0800c297
 800c288:	0800c29d 	.word	0x0800c29d
 800c28c:	0800c2a3 	.word	0x0800c2a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	73fb      	strb	r3, [r7, #15]
    break;
 800c294:	e00b      	b.n	800c2ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c296:	2303      	movs	r3, #3
 800c298:	73fb      	strb	r3, [r7, #15]
    break;
 800c29a:	e008      	b.n	800c2ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c29c:	2301      	movs	r3, #1
 800c29e:	73fb      	strb	r3, [r7, #15]
    break;
 800c2a0:	e005      	b.n	800c2ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c2a2:	2303      	movs	r3, #3
 800c2a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c2a6:	e002      	b.n	800c2ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c2a8:	2303      	movs	r3, #3
 800c2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c2ac:	bf00      	nop
  }
  return usb_status;
 800c2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3714      	adds	r7, #20
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <__libc_init_array>:
 800c2bc:	b570      	push	{r4, r5, r6, lr}
 800c2be:	4d0d      	ldr	r5, [pc, #52]	; (800c2f4 <__libc_init_array+0x38>)
 800c2c0:	4c0d      	ldr	r4, [pc, #52]	; (800c2f8 <__libc_init_array+0x3c>)
 800c2c2:	1b64      	subs	r4, r4, r5
 800c2c4:	10a4      	asrs	r4, r4, #2
 800c2c6:	2600      	movs	r6, #0
 800c2c8:	42a6      	cmp	r6, r4
 800c2ca:	d109      	bne.n	800c2e0 <__libc_init_array+0x24>
 800c2cc:	4d0b      	ldr	r5, [pc, #44]	; (800c2fc <__libc_init_array+0x40>)
 800c2ce:	4c0c      	ldr	r4, [pc, #48]	; (800c300 <__libc_init_array+0x44>)
 800c2d0:	f000 f820 	bl	800c314 <_init>
 800c2d4:	1b64      	subs	r4, r4, r5
 800c2d6:	10a4      	asrs	r4, r4, #2
 800c2d8:	2600      	movs	r6, #0
 800c2da:	42a6      	cmp	r6, r4
 800c2dc:	d105      	bne.n	800c2ea <__libc_init_array+0x2e>
 800c2de:	bd70      	pop	{r4, r5, r6, pc}
 800c2e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2e4:	4798      	blx	r3
 800c2e6:	3601      	adds	r6, #1
 800c2e8:	e7ee      	b.n	800c2c8 <__libc_init_array+0xc>
 800c2ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2ee:	4798      	blx	r3
 800c2f0:	3601      	adds	r6, #1
 800c2f2:	e7f2      	b.n	800c2da <__libc_init_array+0x1e>
 800c2f4:	0800c39c 	.word	0x0800c39c
 800c2f8:	0800c39c 	.word	0x0800c39c
 800c2fc:	0800c39c 	.word	0x0800c39c
 800c300:	0800c3a0 	.word	0x0800c3a0

0800c304 <memset>:
 800c304:	4402      	add	r2, r0
 800c306:	4603      	mov	r3, r0
 800c308:	4293      	cmp	r3, r2
 800c30a:	d100      	bne.n	800c30e <memset+0xa>
 800c30c:	4770      	bx	lr
 800c30e:	f803 1b01 	strb.w	r1, [r3], #1
 800c312:	e7f9      	b.n	800c308 <memset+0x4>

0800c314 <_init>:
 800c314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c316:	bf00      	nop
 800c318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c31a:	bc08      	pop	{r3}
 800c31c:	469e      	mov	lr, r3
 800c31e:	4770      	bx	lr

0800c320 <_fini>:
 800c320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c322:	bf00      	nop
 800c324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c326:	bc08      	pop	{r3}
 800c328:	469e      	mov	lr, r3
 800c32a:	4770      	bx	lr
