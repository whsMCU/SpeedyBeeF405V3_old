
SpeedyBeeF405V3_CUBE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfb4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800c13c  0800c13c  0001c13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1a4  0800c1a4  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1a4  0800c1a4  0001c1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1ac  0800c1ac  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1ac  0800c1ac  0001c1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1b0  0800c1b0  0001c1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800c1b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000167c  200000fc  0800c2b0  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001778  0800c2b0  00021778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e54c  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004290  00000000  00000000  0003e678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00042908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  000441c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e14  00000000  00000000  000458c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000207cd  00000000  00000000  000696dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c858f  00000000  00000000  00089ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152438  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067a0  00000000  00000000  00152488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c124 	.word	0x0800c124

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	0800c124 	.word	0x0800c124

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <MX_DMA_Init+0x4c>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <MX_DMA_Init+0x4c>)
 80004dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e0:	6313      	str	r3, [r2, #48]	; 0x30
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <MX_DMA_Init+0x4c>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	200f      	movs	r0, #15
 80004f4:	f000 fef5 	bl	80012e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80004f8:	200f      	movs	r0, #15
 80004fa:	f000 ff0e 	bl	800131a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	2010      	movs	r0, #16
 8000504:	f000 feed 	bl	80012e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000508:	2010      	movs	r0, #16
 800050a:	f000 ff06 	bl	800131a <HAL_NVIC_EnableIRQ>

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023800 	.word	0x40023800

0800051c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	; 0x28
 8000520:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	4b3b      	ldr	r3, [pc, #236]	; (8000624 <MX_GPIO_Init+0x108>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a3a      	ldr	r2, [pc, #232]	; (8000624 <MX_GPIO_Init+0x108>)
 800053c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b38      	ldr	r3, [pc, #224]	; (8000624 <MX_GPIO_Init+0x108>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054a:	613b      	str	r3, [r7, #16]
 800054c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	4b34      	ldr	r3, [pc, #208]	; (8000624 <MX_GPIO_Init+0x108>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a33      	ldr	r2, [pc, #204]	; (8000624 <MX_GPIO_Init+0x108>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b31      	ldr	r3, [pc, #196]	; (8000624 <MX_GPIO_Init+0x108>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	4b2d      	ldr	r3, [pc, #180]	; (8000624 <MX_GPIO_Init+0x108>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a2c      	ldr	r2, [pc, #176]	; (8000624 <MX_GPIO_Init+0x108>)
 8000574:	f043 0304 	orr.w	r3, r3, #4
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <MX_GPIO_Init+0x108>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0304 	and.w	r3, r3, #4
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <MX_GPIO_Init+0x108>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a25      	ldr	r2, [pc, #148]	; (8000624 <MX_GPIO_Init+0x108>)
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <MX_GPIO_Init+0x108>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0302 	and.w	r3, r3, #2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2110      	movs	r1, #16
 80005a6:	4820      	ldr	r0, [pc, #128]	; (8000628 <MX_GPIO_Init+0x10c>)
 80005a8:	f001 fbf8 	bl	8001d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b2:	481e      	ldr	r0, [pc, #120]	; (800062c <MX_GPIO_Init+0x110>)
 80005b4:	f001 fbf2 	bl	8001d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005b8:	2310      	movs	r3, #16
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c4:	2303      	movs	r3, #3
 80005c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	4816      	ldr	r0, [pc, #88]	; (8000628 <MX_GPIO_Init+0x10c>)
 80005d0:	f001 fa48 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005d4:	2310      	movs	r3, #16
 80005d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	4810      	ldr	r0, [pc, #64]	; (800062c <MX_GPIO_Init+0x110>)
 80005ea:	f001 fa3b 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4619      	mov	r1, r3
 8000606:	4809      	ldr	r0, [pc, #36]	; (800062c <MX_GPIO_Init+0x110>)
 8000608:	f001 fa2c 	bl	8001a64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2100      	movs	r1, #0
 8000610:	200a      	movs	r0, #10
 8000612:	f000 fe66 	bl	80012e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000616:	200a      	movs	r0, #10
 8000618:	f000 fe7f 	bl	800131a <HAL_NVIC_EnableIRQ>

}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	; 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40020000 	.word	0x40020000
 800062c:	40020800 	.word	0x40020800

08000630 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_I2C2_Init+0x50>)
 8000636:	4a13      	ldr	r2, [pc, #76]	; (8000684 <MX_I2C2_Init+0x54>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_I2C2_Init+0x50>)
 800063c:	4a12      	ldr	r2, [pc, #72]	; (8000688 <MX_I2C2_Init+0x58>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_I2C2_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_I2C2_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_I2C2_Init+0x50>)
 800064e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000652:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_I2C2_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_I2C2_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_I2C2_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_I2C2_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_I2C2_Init+0x50>)
 800066e:	f001 fbd3 	bl	8001e18 <HAL_I2C_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000678:	f000 f904 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000118 	.word	0x20000118
 8000684:	40005800 	.word	0x40005800
 8000688:	00061a80 	.word	0x00061a80

0800068c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <HAL_I2C_MspInit+0xa4>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d13c      	bne.n	8000728 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b20      	ldr	r3, [pc, #128]	; (8000734 <HAL_I2C_MspInit+0xa8>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a1f      	ldr	r2, [pc, #124]	; (8000734 <HAL_I2C_MspInit+0xa8>)
 80006b8:	f043 0302 	orr.w	r3, r3, #2
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <HAL_I2C_MspInit+0xa8>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d0:	2312      	movs	r3, #18
 80006d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d8:	2303      	movs	r3, #3
 80006da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006dc:	2304      	movs	r3, #4
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	4814      	ldr	r0, [pc, #80]	; (8000738 <HAL_I2C_MspInit+0xac>)
 80006e8:	f001 f9bc 	bl	8001a64 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <HAL_I2C_MspInit+0xa8>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a0f      	ldr	r2, [pc, #60]	; (8000734 <HAL_I2C_MspInit+0xa8>)
 80006f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <HAL_I2C_MspInit+0xa8>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	2021      	movs	r0, #33	; 0x21
 800070e:	f000 fde8 	bl	80012e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000712:	2021      	movs	r0, #33	; 0x21
 8000714:	f000 fe01 	bl	800131a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2100      	movs	r1, #0
 800071c:	2022      	movs	r0, #34	; 0x22
 800071e:	f000 fde0 	bl	80012e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000722:	2022      	movs	r0, #34	; 0x22
 8000724:	f000 fdf9 	bl	800131a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40005800 	.word	0x40005800
 8000734:	40023800 	.word	0x40023800
 8000738:	40020400 	.word	0x40020400

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000742:	f000 fc5d 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 f833 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f7ff fee7 	bl	800051c <MX_GPIO_Init>
  MX_DMA_Init();
 800074e:	f7ff febd 	bl	80004cc <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000752:	f00a ffc7 	bl	800b6e4 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000756:	f000 fa87 	bl	8000c68 <MX_TIM4_Init>
  MX_I2C2_Init();
 800075a:	f7ff ff69 	bl	8000630 <MX_I2C2_Init>
  MX_SPI1_Init();
 800075e:	f000 f897 	bl	8000890 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000762:	f000 f8cb 	bl	80008fc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000766:	f000 fb75 	bl	8000e54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t addr = BMI270_REG_CHIP_ID | 0x80;
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	71bb      	strb	r3, [r7, #6]
  uint8_t buffer[2] = {0, 0};
 800076e:	2300      	movs	r3, #0
 8000770:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2110      	movs	r1, #16
 800077a:	480b      	ldr	r0, [pc, #44]	; (80007a8 <main+0x6c>)
 800077c:	f001 fb0e 	bl	8001d9c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 8000780:	1db9      	adds	r1, r7, #6
 8000782:	2364      	movs	r3, #100	; 0x64
 8000784:	2201      	movs	r2, #1
 8000786:	4809      	ldr	r0, [pc, #36]	; (80007ac <main+0x70>)
 8000788:	f005 f903 	bl	8005992 <HAL_SPI_Transmit>
  status = HAL_SPI_Receive(&hspi1, buffer, 2, 100);
 800078c:	1d39      	adds	r1, r7, #4
 800078e:	2364      	movs	r3, #100	; 0x64
 8000790:	2202      	movs	r2, #2
 8000792:	4806      	ldr	r0, [pc, #24]	; (80007ac <main+0x70>)
 8000794:	f005 fa39 	bl	8005c0a <HAL_SPI_Receive>
 8000798:	4603      	mov	r3, r0
 800079a:	71fb      	strb	r3, [r7, #7]
  //status = HAL_SPI_TransmitReceive(p_spi->h_spi, &MemAddress, data, length, 10);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2110      	movs	r1, #16
 80007a0:	4801      	ldr	r0, [pc, #4]	; (80007a8 <main+0x6c>)
 80007a2:	f001 fafb 	bl	8001d9c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <main+0x6a>
 80007a8:	40020000 	.word	0x40020000
 80007ac:	2000016c 	.word	0x2000016c

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f00b fca8 	bl	800c114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <SystemClock_Config+0xcc>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a27      	ldr	r2, [pc, #156]	; (800087c <SystemClock_Config+0xcc>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b25      	ldr	r3, [pc, #148]	; (800087c <SystemClock_Config+0xcc>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <SystemClock_Config+0xd0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a21      	ldr	r2, [pc, #132]	; (8000880 <SystemClock_Config+0xd0>)
 80007fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <SystemClock_Config+0xd0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080c:	2301      	movs	r3, #1
 800080e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000820:	2304      	movs	r3, #4
 8000822:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000824:	23a8      	movs	r3, #168	; 0xa8
 8000826:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000828:	2302      	movs	r3, #2
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800082c:	2307      	movs	r3, #7
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0320 	add.w	r3, r7, #32
 8000834:	4618      	mov	r0, r3
 8000836:	f004 fb8b 	bl	8004f50 <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000840:	f000 f820 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	230f      	movs	r3, #15
 8000846:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000848:	2302      	movs	r3, #2
 800084a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000850:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000854:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2105      	movs	r1, #5
 8000862:	4618      	mov	r0, r3
 8000864:	f004 fdec 	bl	8005440 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800086e:	f000 f809 	bl	8000884 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3750      	adds	r7, #80	; 0x50
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_SPI1_Init+0x64>)
 8000896:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <MX_SPI1_Init+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_SPI1_Init+0x64>)
 800089c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008c4:	2210      	movs	r2, #16
 80008c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008dc:	220a      	movs	r2, #10
 80008de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008e2:	f004 ffcd 	bl	8005880 <HAL_SPI_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008ec:	f7ff ffca 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000016c 	.word	0x2000016c
 80008f8:	40013000 	.word	0x40013000

080008fc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_SPI2_Init+0x64>)
 8000902:	4a18      	ldr	r2, [pc, #96]	; (8000964 <MX_SPI2_Init+0x68>)
 8000904:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_SPI2_Init+0x64>)
 8000908:	f44f 7282 	mov.w	r2, #260	; 0x104
 800090c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_SPI2_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_SPI2_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_SPI2_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_SPI2_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_SPI2_Init+0x64>)
 8000928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_SPI2_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_SPI2_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_SPI2_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <MX_SPI2_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_SPI2_Init+0x64>)
 8000948:	220a      	movs	r2, #10
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_SPI2_Init+0x64>)
 800094e:	f004 ff97 	bl	8005880 <HAL_SPI_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000958:	f7ff ff94 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200001c4 	.word	0x200001c4
 8000964:	40003800 	.word	0x40003800

08000968 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08c      	sub	sp, #48	; 0x30
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a51      	ldr	r2, [pc, #324]	; (8000acc <HAL_SPI_MspInit+0x164>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d134      	bne.n	80009f4 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	4b50      	ldr	r3, [pc, #320]	; (8000ad0 <HAL_SPI_MspInit+0x168>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a4f      	ldr	r2, [pc, #316]	; (8000ad0 <HAL_SPI_MspInit+0x168>)
 8000994:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b4d      	ldr	r3, [pc, #308]	; (8000ad0 <HAL_SPI_MspInit+0x168>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009a2:	61bb      	str	r3, [r7, #24]
 80009a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	4b49      	ldr	r3, [pc, #292]	; (8000ad0 <HAL_SPI_MspInit+0x168>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a48      	ldr	r2, [pc, #288]	; (8000ad0 <HAL_SPI_MspInit+0x168>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b46      	ldr	r3, [pc, #280]	; (8000ad0 <HAL_SPI_MspInit+0x168>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009c2:	23e0      	movs	r3, #224	; 0xe0
 80009c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009d2:	2305      	movs	r3, #5
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	483d      	ldr	r0, [pc, #244]	; (8000ad4 <HAL_SPI_MspInit+0x16c>)
 80009de:	f001 f841 	bl	8001a64 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2023      	movs	r0, #35	; 0x23
 80009e8:	f000 fc7b 	bl	80012e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80009ec:	2023      	movs	r0, #35	; 0x23
 80009ee:	f000 fc94 	bl	800131a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80009f2:	e066      	b.n	8000ac2 <HAL_SPI_MspInit+0x15a>
  else if(spiHandle->Instance==SPI2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a37      	ldr	r2, [pc, #220]	; (8000ad8 <HAL_SPI_MspInit+0x170>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d161      	bne.n	8000ac2 <HAL_SPI_MspInit+0x15a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b33      	ldr	r3, [pc, #204]	; (8000ad0 <HAL_SPI_MspInit+0x168>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a32      	ldr	r2, [pc, #200]	; (8000ad0 <HAL_SPI_MspInit+0x168>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b30      	ldr	r3, [pc, #192]	; (8000ad0 <HAL_SPI_MspInit+0x168>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ad0 <HAL_SPI_MspInit+0x168>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a2b      	ldr	r2, [pc, #172]	; (8000ad0 <HAL_SPI_MspInit+0x168>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <HAL_SPI_MspInit+0x168>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a36:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a48:	2305      	movs	r3, #5
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4822      	ldr	r0, [pc, #136]	; (8000adc <HAL_SPI_MspInit+0x174>)
 8000a54:	f001 f806 	bl	8001a64 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000a58:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <HAL_SPI_MspInit+0x178>)
 8000a5a:	4a22      	ldr	r2, [pc, #136]	; (8000ae4 <HAL_SPI_MspInit+0x17c>)
 8000a5c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000a5e:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <HAL_SPI_MspInit+0x178>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a64:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <HAL_SPI_MspInit+0x178>)
 8000a66:	2240      	movs	r2, #64	; 0x40
 8000a68:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <HAL_SPI_MspInit+0x178>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_SPI_MspInit+0x178>)
 8000a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a76:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <HAL_SPI_MspInit+0x178>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_SPI_MspInit+0x178>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <HAL_SPI_MspInit+0x178>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_SPI_MspInit+0x178>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <HAL_SPI_MspInit+0x178>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000a96:	4812      	ldr	r0, [pc, #72]	; (8000ae0 <HAL_SPI_MspInit+0x178>)
 8000a98:	f000 fc5a 	bl	8001350 <HAL_DMA_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_SPI_MspInit+0x13e>
      Error_Handler();
 8000aa2:	f7ff feef 	bl	8000884 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <HAL_SPI_MspInit+0x178>)
 8000aaa:	649a      	str	r2, [r3, #72]	; 0x48
 8000aac:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <HAL_SPI_MspInit+0x178>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2024      	movs	r0, #36	; 0x24
 8000ab8:	f000 fc13 	bl	80012e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000abc:	2024      	movs	r0, #36	; 0x24
 8000abe:	f000 fc2c 	bl	800131a <HAL_NVIC_EnableIRQ>
}
 8000ac2:	bf00      	nop
 8000ac4:	3730      	adds	r7, #48	; 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40013000 	.word	0x40013000
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40003800 	.word	0x40003800
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	2000021c 	.word	0x2000021c
 8000ae4:	40026070 	.word	0x40026070

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b84:	f000 fa8e 	bl	80010a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000b90:	2010      	movs	r0, #16
 8000b92:	f001 f91d 	bl	8001dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <DMA1_Stream4_IRQHandler+0x10>)
 8000ba2:	f000 fd15 	bl	80015d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2000021c 	.word	0x2000021c

08000bb0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <DMA1_Stream5_IRQHandler+0x10>)
 8000bb6:	f000 fd0b 	bl	80015d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000308 	.word	0x20000308

08000bc4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <I2C2_EV_IRQHandler+0x10>)
 8000bca:	f001 fa69 	bl	80020a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000118 	.word	0x20000118

08000bd8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <I2C2_ER_IRQHandler+0x10>)
 8000bde:	f001 fbd0 	bl	8002382 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000118 	.word	0x20000118

08000bec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <SPI1_IRQHandler+0x10>)
 8000bf2:	f005 fabd 	bl	8006170 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000016c 	.word	0x2000016c

08000c00 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <SPI2_IRQHandler+0x10>)
 8000c06:	f005 fab3 	bl	8006170 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200001c4 	.word	0x200001c4

08000c14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <USART2_IRQHandler+0x10>)
 8000c1a:	f006 facd 	bl	80071b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200002c4 	.word	0x200002c4

08000c28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <OTG_FS_IRQHandler+0x10>)
 8000c2e:	f003 f862 	bl	8003cf6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000104c 	.word	0x2000104c

08000c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <SystemInit+0x28>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <SystemInit+0x28>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SystemInit+0x28>)
 8000c52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c56:	609a      	str	r2, [r3, #8]
#endif
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08e      	sub	sp, #56	; 0x38
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c88:	463b      	mov	r3, r7
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]
 8000c96:	615a      	str	r2, [r3, #20]
 8000c98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c9a:	4b3e      	ldr	r3, [pc, #248]	; (8000d94 <MX_TIM4_Init+0x12c>)
 8000c9c:	4a3e      	ldr	r2, [pc, #248]	; (8000d98 <MX_TIM4_Init+0x130>)
 8000c9e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ca0:	4b3c      	ldr	r3, [pc, #240]	; (8000d94 <MX_TIM4_Init+0x12c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca6:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <MX_TIM4_Init+0x12c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cac:	4b39      	ldr	r3, [pc, #228]	; (8000d94 <MX_TIM4_Init+0x12c>)
 8000cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb4:	4b37      	ldr	r3, [pc, #220]	; (8000d94 <MX_TIM4_Init+0x12c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cba:	4b36      	ldr	r3, [pc, #216]	; (8000d94 <MX_TIM4_Init+0x12c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cc0:	4834      	ldr	r0, [pc, #208]	; (8000d94 <MX_TIM4_Init+0x12c>)
 8000cc2:	f005 fca3 	bl	800660c <HAL_TIM_Base_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000ccc:	f7ff fdda 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cd0:	4830      	ldr	r0, [pc, #192]	; (8000d94 <MX_TIM4_Init+0x12c>)
 8000cd2:	f005 fcea 	bl	80066aa <HAL_TIM_PWM_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000cdc:	f7ff fdd2 	bl	8000884 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cec:	4619      	mov	r1, r3
 8000cee:	4829      	ldr	r0, [pc, #164]	; (8000d94 <MX_TIM4_Init+0x12c>)
 8000cf0:	f005 fdf6 	bl	80068e0 <HAL_TIM_SlaveConfigSynchro>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000cfa:	f7ff fdc3 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4821      	ldr	r0, [pc, #132]	; (8000d94 <MX_TIM4_Init+0x12c>)
 8000d0e:	f006 f989 	bl	8007024 <HAL_TIMEx_MasterConfigSynchronization>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000d18:	f7ff fdb4 	bl	8000884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d1c:	2360      	movs	r3, #96	; 0x60
 8000d1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	2200      	movs	r2, #0
 8000d30:	4619      	mov	r1, r3
 8000d32:	4818      	ldr	r0, [pc, #96]	; (8000d94 <MX_TIM4_Init+0x12c>)
 8000d34:	f005 fd12 	bl	800675c <HAL_TIM_PWM_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000d3e:	f7ff fda1 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d42:	463b      	mov	r3, r7
 8000d44:	2204      	movs	r2, #4
 8000d46:	4619      	mov	r1, r3
 8000d48:	4812      	ldr	r0, [pc, #72]	; (8000d94 <MX_TIM4_Init+0x12c>)
 8000d4a:	f005 fd07 	bl	800675c <HAL_TIM_PWM_ConfigChannel>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8000d54:	f7ff fd96 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2208      	movs	r2, #8
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480d      	ldr	r0, [pc, #52]	; (8000d94 <MX_TIM4_Init+0x12c>)
 8000d60:	f005 fcfc 	bl	800675c <HAL_TIM_PWM_ConfigChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8000d6a:	f7ff fd8b 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d6e:	463b      	mov	r3, r7
 8000d70:	220c      	movs	r2, #12
 8000d72:	4619      	mov	r1, r3
 8000d74:	4807      	ldr	r0, [pc, #28]	; (8000d94 <MX_TIM4_Init+0x12c>)
 8000d76:	f005 fcf1 	bl	800675c <HAL_TIM_PWM_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 8000d80:	f7ff fd80 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <MX_TIM4_Init+0x12c>)
 8000d86:	f000 f82b 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 8000d8a:	bf00      	nop
 8000d8c:	3738      	adds	r7, #56	; 0x38
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000027c 	.word	0x2000027c
 8000d98:	40000800 	.word	0x40000800

08000d9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <HAL_TIM_Base_MspInit+0x3c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d10d      	bne.n	8000dca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_TIM_Base_MspInit+0x40>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <HAL_TIM_Base_MspInit+0x40>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <HAL_TIM_Base_MspInit+0x40>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40000800 	.word	0x40000800
 8000ddc:	40023800 	.word	0x40023800

08000de0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <HAL_TIM_MspPostInit+0x68>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d11e      	bne.n	8000e40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_TIM_MspPostInit+0x6c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <HAL_TIM_MspPostInit+0x6c>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_TIM_MspPostInit+0x6c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000e1e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000e22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_TIM_MspPostInit+0x70>)
 8000e3c:	f000 fe12 	bl	8001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3720      	adds	r7, #32
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40000800 	.word	0x40000800
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020400 	.word	0x40020400

08000e54 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <MX_USART2_UART_Init+0x50>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e8c:	f006 f946 	bl	800711c <HAL_UART_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e96:	f7ff fcf5 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200002c4 	.word	0x200002c4
 8000ea4:	40004400 	.word	0x40004400

08000ea8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a34      	ldr	r2, [pc, #208]	; (8000f98 <HAL_UART_MspInit+0xf0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d161      	bne.n	8000f8e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <HAL_UART_MspInit+0xf4>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a32      	ldr	r2, [pc, #200]	; (8000f9c <HAL_UART_MspInit+0xf4>)
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eda:	4b30      	ldr	r3, [pc, #192]	; (8000f9c <HAL_UART_MspInit+0xf4>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <HAL_UART_MspInit+0xf4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a2b      	ldr	r2, [pc, #172]	; (8000f9c <HAL_UART_MspInit+0xf4>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <HAL_UART_MspInit+0xf4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f02:	230c      	movs	r3, #12
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f12:	2307      	movs	r3, #7
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4820      	ldr	r0, [pc, #128]	; (8000fa0 <HAL_UART_MspInit+0xf8>)
 8000f1e:	f000 fda1 	bl	8001a64 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <HAL_UART_MspInit+0xfc>)
 8000f24:	4a20      	ldr	r2, [pc, #128]	; (8000fa8 <HAL_UART_MspInit+0x100>)
 8000f26:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <HAL_UART_MspInit+0xfc>)
 8000f2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <HAL_UART_MspInit+0xfc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <HAL_UART_MspInit+0xfc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_UART_MspInit+0xfc>)
 8000f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f42:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_UART_MspInit+0xfc>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <HAL_UART_MspInit+0xfc>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_UART_MspInit+0xfc>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <HAL_UART_MspInit+0xfc>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_UART_MspInit+0xfc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f62:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <HAL_UART_MspInit+0xfc>)
 8000f64:	f000 f9f4 	bl	8001350 <HAL_DMA_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000f6e:	f7ff fc89 	bl	8000884 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <HAL_UART_MspInit+0xfc>)
 8000f76:	639a      	str	r2, [r3, #56]	; 0x38
 8000f78:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <HAL_UART_MspInit+0xfc>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	2026      	movs	r0, #38	; 0x26
 8000f84:	f000 f9ad 	bl	80012e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f88:	2026      	movs	r0, #38	; 0x26
 8000f8a:	f000 f9c6 	bl	800131a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3728      	adds	r7, #40	; 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40004400 	.word	0x40004400
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	20000308 	.word	0x20000308
 8000fa8:	40026088 	.word	0x40026088

08000fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fb2:	e003      	b.n	8000fbc <LoopCopyDataInit>

08000fb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fba:	3104      	adds	r1, #4

08000fbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fbc:	480b      	ldr	r0, [pc, #44]	; (8000fec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fc4:	d3f6      	bcc.n	8000fb4 <CopyDataInit>
  ldr  r2, =_sbss
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fc8:	e002      	b.n	8000fd0 <LoopFillZerobss>

08000fca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fcc:	f842 3b04 	str.w	r3, [r2], #4

08000fd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fd4:	d3f9      	bcc.n	8000fca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fd6:	f7ff fe31 	bl	8000c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fda:	f00b f877 	bl	800c0cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fde:	f7ff fbad 	bl	800073c <main>
  bx  lr    
 8000fe2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fe4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fe8:	0800c1b4 	.word	0x0800c1b4
  ldr  r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ff0:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8000ff4:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 8000ff8:	20001778 	.word	0x20001778

08000ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC_IRQHandler>
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <HAL_Init+0x40>)
 800100a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800100e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <HAL_Init+0x40>)
 8001016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800101a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_Init+0x40>)
 8001022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001028:	2003      	movs	r0, #3
 800102a:	f000 f94f 	bl	80012cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102e:	2000      	movs	r0, #0
 8001030:	f000 f808 	bl	8001044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001034:	f7ff fd58 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023c00 	.word	0x40023c00

08001044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_InitTick+0x54>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_InitTick+0x58>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105a:	fbb3 f3f1 	udiv	r3, r3, r1
 800105e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f967 	bl	8001336 <HAL_SYSTICK_Config>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e00e      	b.n	8001090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d80a      	bhi.n	800108e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001078:	2200      	movs	r2, #0
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f000 f92f 	bl	80012e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <HAL_InitTick+0x5c>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e000      	b.n	8001090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000000 	.word	0x20000000
 800109c:	20000008 	.word	0x20000008
 80010a0:	20000004 	.word	0x20000004

080010a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x20>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_IncTick+0x24>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <HAL_IncTick+0x24>)
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000008 	.word	0x20000008
 80010c8:	20000368 	.word	0x20000368

080010cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return uwTick;
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <HAL_GetTick+0x14>)
 80010d2:	681b      	ldr	r3, [r3, #0]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000368 	.word	0x20000368

080010e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff ffee 	bl	80010cc <HAL_GetTick>
 80010f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d005      	beq.n	800110a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_Delay+0x44>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800110a:	bf00      	nop
 800110c:	f7ff ffde 	bl	80010cc <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	429a      	cmp	r2, r3
 800111a:	d8f7      	bhi.n	800110c <HAL_Delay+0x28>
  {
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008

0800112c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <__NVIC_GetPriorityGrouping+0x18>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	f003 0307 	and.w	r3, r3, #7
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	db0b      	blt.n	80011ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 021f 	and.w	r2, r3, #31
 80011a8:	4907      	ldr	r1, [pc, #28]	; (80011c8 <__NVIC_EnableIRQ+0x38>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	2001      	movs	r0, #1
 80011b2:	fa00 f202 	lsl.w	r2, r0, r2
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000e100 	.word	0xe000e100

080011cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db0a      	blt.n	80011f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	490c      	ldr	r1, [pc, #48]	; (8001218 <__NVIC_SetPriority+0x4c>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f4:	e00a      	b.n	800120c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4908      	ldr	r1, [pc, #32]	; (800121c <__NVIC_SetPriority+0x50>)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	3b04      	subs	r3, #4
 8001204:	0112      	lsls	r2, r2, #4
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	440b      	add	r3, r1
 800120a:	761a      	strb	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000e100 	.word	0xe000e100
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f1c3 0307 	rsb	r3, r3, #7
 800123a:	2b04      	cmp	r3, #4
 800123c:	bf28      	it	cs
 800123e:	2304      	movcs	r3, #4
 8001240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3304      	adds	r3, #4
 8001246:	2b06      	cmp	r3, #6
 8001248:	d902      	bls.n	8001250 <NVIC_EncodePriority+0x30>
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3b03      	subs	r3, #3
 800124e:	e000      	b.n	8001252 <NVIC_EncodePriority+0x32>
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	f04f 32ff 	mov.w	r2, #4294967295
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	401a      	ands	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	43d9      	mvns	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	4313      	orrs	r3, r2
         );
}
 800127a:	4618      	mov	r0, r3
 800127c:	3724      	adds	r7, #36	; 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001298:	d301      	bcc.n	800129e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129a:	2301      	movs	r3, #1
 800129c:	e00f      	b.n	80012be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <SysTick_Config+0x40>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a6:	210f      	movs	r1, #15
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f7ff ff8e 	bl	80011cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <SysTick_Config+0x40>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <SysTick_Config+0x40>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	e000e010 	.word	0xe000e010

080012cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff29 	bl	800112c <__NVIC_SetPriorityGrouping>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f4:	f7ff ff3e 	bl	8001174 <__NVIC_GetPriorityGrouping>
 80012f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff ff8e 	bl	8001220 <NVIC_EncodePriority>
 8001304:	4602      	mov	r2, r0
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff5d 	bl	80011cc <__NVIC_SetPriority>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff31 	bl	8001190 <__NVIC_EnableIRQ>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffa2 	bl	8001288 <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff feb6 	bl	80010cc <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e099      	b.n	80014a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2202      	movs	r2, #2
 8001370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0201 	bic.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800138c:	e00f      	b.n	80013ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800138e:	f7ff fe9d 	bl	80010cc <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b05      	cmp	r3, #5
 800139a:	d908      	bls.n	80013ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2220      	movs	r2, #32
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2203      	movs	r2, #3
 80013a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e078      	b.n	80014a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1e8      	bne.n	800138e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	4b38      	ldr	r3, [pc, #224]	; (80014a8 <HAL_DMA_Init+0x158>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	2b04      	cmp	r3, #4
 8001406:	d107      	bne.n	8001418 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	4313      	orrs	r3, r2
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4313      	orrs	r3, r2
 8001416:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f023 0307 	bic.w	r3, r3, #7
 800142e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	4313      	orrs	r3, r2
 8001438:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	2b04      	cmp	r3, #4
 8001440:	d117      	bne.n	8001472 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	4313      	orrs	r3, r2
 800144a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00e      	beq.n	8001472 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 fa89 	bl	800196c <DMA_CheckFifoParam>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d008      	beq.n	8001472 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2240      	movs	r2, #64	; 0x40
 8001464:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800146e:	2301      	movs	r3, #1
 8001470:	e016      	b.n	80014a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 fa40 	bl	8001900 <DMA_CalcBaseAndBitshift>
 8001480:	4603      	mov	r3, r0
 8001482:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001488:	223f      	movs	r2, #63	; 0x3f
 800148a:	409a      	lsls	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	f010803f 	.word	0xf010803f

080014ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014ba:	f7ff fe07 	bl	80010cc <HAL_GetTick>
 80014be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d008      	beq.n	80014de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e052      	b.n	8001584 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0216 	bic.w	r2, r2, #22
 80014ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	695a      	ldr	r2, [r3, #20]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	2b00      	cmp	r3, #0
 8001504:	d103      	bne.n	800150e <HAL_DMA_Abort+0x62>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800150a:	2b00      	cmp	r3, #0
 800150c:	d007      	beq.n	800151e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0208 	bic.w	r2, r2, #8
 800151c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 0201 	bic.w	r2, r2, #1
 800152c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800152e:	e013      	b.n	8001558 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001530:	f7ff fdcc 	bl	80010cc <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b05      	cmp	r3, #5
 800153c:	d90c      	bls.n	8001558 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2220      	movs	r2, #32
 8001542:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2203      	movs	r2, #3
 8001548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e015      	b.n	8001584 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1e4      	bne.n	8001530 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156a:	223f      	movs	r2, #63	; 0x3f
 800156c:	409a      	lsls	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d004      	beq.n	80015aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00c      	b.n	80015c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2205      	movs	r2, #5
 80015ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0201 	bic.w	r2, r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015dc:	4b8e      	ldr	r3, [pc, #568]	; (8001818 <HAL_DMA_IRQHandler+0x248>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a8e      	ldr	r2, [pc, #568]	; (800181c <HAL_DMA_IRQHandler+0x24c>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0a9b      	lsrs	r3, r3, #10
 80015e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fa:	2208      	movs	r2, #8
 80015fc:	409a      	lsls	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4013      	ands	r3, r2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d01a      	beq.n	800163c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0204 	bic.w	r2, r2, #4
 8001622:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001628:	2208      	movs	r2, #8
 800162a:	409a      	lsls	r2, r3
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001634:	f043 0201 	orr.w	r2, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001640:	2201      	movs	r2, #1
 8001642:	409a      	lsls	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4013      	ands	r3, r2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d012      	beq.n	8001672 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00b      	beq.n	8001672 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165e:	2201      	movs	r2, #1
 8001660:	409a      	lsls	r2, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166a:	f043 0202 	orr.w	r2, r3, #2
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001676:	2204      	movs	r2, #4
 8001678:	409a      	lsls	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d012      	beq.n	80016a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00b      	beq.n	80016a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001694:	2204      	movs	r2, #4
 8001696:	409a      	lsls	r2, r3
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a0:	f043 0204 	orr.w	r2, r3, #4
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ac:	2210      	movs	r2, #16
 80016ae:	409a      	lsls	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d043      	beq.n	8001740 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d03c      	beq.n	8001740 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ca:	2210      	movs	r2, #16
 80016cc:	409a      	lsls	r2, r3
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d018      	beq.n	8001712 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d108      	bne.n	8001700 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d024      	beq.n	8001740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	4798      	blx	r3
 80016fe:	e01f      	b.n	8001740 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	4798      	blx	r3
 8001710:	e016      	b.n	8001740 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d107      	bne.n	8001730 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0208 	bic.w	r2, r2, #8
 800172e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	2220      	movs	r2, #32
 8001746:	409a      	lsls	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 808f 	beq.w	8001870 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 8087 	beq.w	8001870 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001766:	2220      	movs	r2, #32
 8001768:	409a      	lsls	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b05      	cmp	r3, #5
 8001778:	d136      	bne.n	80017e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0216 	bic.w	r2, r2, #22
 8001788:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695a      	ldr	r2, [r3, #20]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001798:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d103      	bne.n	80017aa <HAL_DMA_IRQHandler+0x1da>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d007      	beq.n	80017ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0208 	bic.w	r2, r2, #8
 80017b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017be:	223f      	movs	r2, #63	; 0x3f
 80017c0:	409a      	lsls	r2, r3
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d07e      	beq.n	80018dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	4798      	blx	r3
        }
        return;
 80017e6:	e079      	b.n	80018dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d01d      	beq.n	8001832 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10d      	bne.n	8001820 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	2b00      	cmp	r3, #0
 800180a:	d031      	beq.n	8001870 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	4798      	blx	r3
 8001814:	e02c      	b.n	8001870 <HAL_DMA_IRQHandler+0x2a0>
 8001816:	bf00      	nop
 8001818:	20000000 	.word	0x20000000
 800181c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001824:	2b00      	cmp	r3, #0
 8001826:	d023      	beq.n	8001870 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	4798      	blx	r3
 8001830:	e01e      	b.n	8001870 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10f      	bne.n	8001860 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0210 	bic.w	r2, r2, #16
 800184e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001874:	2b00      	cmp	r3, #0
 8001876:	d032      	beq.n	80018de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d022      	beq.n	80018ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2205      	movs	r2, #5
 8001888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0201 	bic.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	3301      	adds	r3, #1
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d307      	bcc.n	80018b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f2      	bne.n	800189c <HAL_DMA_IRQHandler+0x2cc>
 80018b6:	e000      	b.n	80018ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	4798      	blx	r3
 80018da:	e000      	b.n	80018de <HAL_DMA_IRQHandler+0x30e>
        return;
 80018dc:	bf00      	nop
    }
  }
}
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018f2:	b2db      	uxtb	r3, r3
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	3b10      	subs	r3, #16
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <DMA_CalcBaseAndBitshift+0x64>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800191a:	4a13      	ldr	r2, [pc, #76]	; (8001968 <DMA_CalcBaseAndBitshift+0x68>)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b03      	cmp	r3, #3
 800192c:	d909      	bls.n	8001942 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001936:	f023 0303 	bic.w	r3, r3, #3
 800193a:	1d1a      	adds	r2, r3, #4
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	659a      	str	r2, [r3, #88]	; 0x58
 8001940:	e007      	b.n	8001952 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800194a:	f023 0303 	bic.w	r3, r3, #3
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	aaaaaaab 	.word	0xaaaaaaab
 8001968:	0800c19c 	.word	0x0800c19c

0800196c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d11f      	bne.n	80019c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d856      	bhi.n	8001a3a <DMA_CheckFifoParam+0xce>
 800198c:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <DMA_CheckFifoParam+0x28>)
 800198e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001992:	bf00      	nop
 8001994:	080019a5 	.word	0x080019a5
 8001998:	080019b7 	.word	0x080019b7
 800199c:	080019a5 	.word	0x080019a5
 80019a0:	08001a3b 	.word	0x08001a3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d046      	beq.n	8001a3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b4:	e043      	b.n	8001a3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019be:	d140      	bne.n	8001a42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c4:	e03d      	b.n	8001a42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ce:	d121      	bne.n	8001a14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d837      	bhi.n	8001a46 <DMA_CheckFifoParam+0xda>
 80019d6:	a201      	add	r2, pc, #4	; (adr r2, 80019dc <DMA_CheckFifoParam+0x70>)
 80019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019dc:	080019ed 	.word	0x080019ed
 80019e0:	080019f3 	.word	0x080019f3
 80019e4:	080019ed 	.word	0x080019ed
 80019e8:	08001a05 	.word	0x08001a05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
      break;
 80019f0:	e030      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d025      	beq.n	8001a4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a02:	e022      	b.n	8001a4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a0c:	d11f      	bne.n	8001a4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a12:	e01c      	b.n	8001a4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d903      	bls.n	8001a22 <DMA_CheckFifoParam+0xb6>
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d003      	beq.n	8001a28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a20:	e018      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	73fb      	strb	r3, [r7, #15]
      break;
 8001a26:	e015      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00e      	beq.n	8001a52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
      break;
 8001a38:	e00b      	b.n	8001a52 <DMA_CheckFifoParam+0xe6>
      break;
 8001a3a:	bf00      	nop
 8001a3c:	e00a      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
      break;
 8001a3e:	bf00      	nop
 8001a40:	e008      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
      break;
 8001a42:	bf00      	nop
 8001a44:	e006      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
      break;
 8001a46:	bf00      	nop
 8001a48:	e004      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
      break;
 8001a4a:	bf00      	nop
 8001a4c:	e002      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a4e:	bf00      	nop
 8001a50:	e000      	b.n	8001a54 <DMA_CheckFifoParam+0xe8>
      break;
 8001a52:	bf00      	nop
    }
  } 
  
  return status; 
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop

08001a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	e16b      	b.n	8001d58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f040 815a 	bne.w	8001d52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d005      	beq.n	8001ab6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d130      	bne.n	8001b18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aec:	2201      	movs	r2, #1
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 0201 	and.w	r2, r3, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d017      	beq.n	8001b54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d123      	bne.n	8001ba8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	08da      	lsrs	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3208      	adds	r2, #8
 8001b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	220f      	movs	r2, #15
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	69b9      	ldr	r1, [r7, #24]
 8001ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0203 	and.w	r2, r3, #3
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80b4 	beq.w	8001d52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b60      	ldr	r3, [pc, #384]	; (8001d70 <HAL_GPIO_Init+0x30c>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4a5f      	ldr	r2, [pc, #380]	; (8001d70 <HAL_GPIO_Init+0x30c>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfa:	4b5d      	ldr	r3, [pc, #372]	; (8001d70 <HAL_GPIO_Init+0x30c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c06:	4a5b      	ldr	r2, [pc, #364]	; (8001d74 <HAL_GPIO_Init+0x310>)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a52      	ldr	r2, [pc, #328]	; (8001d78 <HAL_GPIO_Init+0x314>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d02b      	beq.n	8001c8a <HAL_GPIO_Init+0x226>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a51      	ldr	r2, [pc, #324]	; (8001d7c <HAL_GPIO_Init+0x318>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d025      	beq.n	8001c86 <HAL_GPIO_Init+0x222>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a50      	ldr	r2, [pc, #320]	; (8001d80 <HAL_GPIO_Init+0x31c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d01f      	beq.n	8001c82 <HAL_GPIO_Init+0x21e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4f      	ldr	r2, [pc, #316]	; (8001d84 <HAL_GPIO_Init+0x320>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d019      	beq.n	8001c7e <HAL_GPIO_Init+0x21a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4e      	ldr	r2, [pc, #312]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_GPIO_Init+0x216>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4d      	ldr	r2, [pc, #308]	; (8001d8c <HAL_GPIO_Init+0x328>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00d      	beq.n	8001c76 <HAL_GPIO_Init+0x212>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4c      	ldr	r2, [pc, #304]	; (8001d90 <HAL_GPIO_Init+0x32c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d007      	beq.n	8001c72 <HAL_GPIO_Init+0x20e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4b      	ldr	r2, [pc, #300]	; (8001d94 <HAL_GPIO_Init+0x330>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_GPIO_Init+0x20a>
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	e00e      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c6e:	2308      	movs	r3, #8
 8001c70:	e00c      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c72:	2306      	movs	r3, #6
 8001c74:	e00a      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c76:	2305      	movs	r3, #5
 8001c78:	e008      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	e006      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e004      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e002      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_GPIO_Init+0x228>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	f002 0203 	and.w	r2, r2, #3
 8001c92:	0092      	lsls	r2, r2, #2
 8001c94:	4093      	lsls	r3, r2
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c9c:	4935      	ldr	r1, [pc, #212]	; (8001d74 <HAL_GPIO_Init+0x310>)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001caa:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cce:	4a32      	ldr	r2, [pc, #200]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd4:	4b30      	ldr	r3, [pc, #192]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf8:	4a27      	ldr	r2, [pc, #156]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cfe:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d22:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d4c:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3301      	adds	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b0f      	cmp	r3, #15
 8001d5c:	f67f ae90 	bls.w	8001a80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40013800 	.word	0x40013800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40020400 	.word	0x40020400
 8001d80:	40020800 	.word	0x40020800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40021400 	.word	0x40021400
 8001d90:	40021800 	.word	0x40021800
 8001d94:	40021c00 	.word	0x40021c00
 8001d98:	40013c00 	.word	0x40013c00

08001d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	807b      	strh	r3, [r7, #2]
 8001da8:	4613      	mov	r3, r2
 8001daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dac:	787b      	ldrb	r3, [r7, #1]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db2:	887a      	ldrh	r2, [r7, #2]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db8:	e003      	b.n	8001dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dba:	887b      	ldrh	r3, [r7, #2]
 8001dbc:	041a      	lsls	r2, r3, #16
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	619a      	str	r2, [r3, #24]
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ddc:	695a      	ldr	r2, [r3, #20]
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d006      	beq.n	8001df4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001de6:	4a05      	ldr	r2, [pc, #20]	; (8001dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 f806 	bl	8001e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40013c00 	.word	0x40013c00

08001e00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e12b      	b.n	8002082 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7fe fc24 	bl	800068c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2224      	movs	r2, #36	; 0x24
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e7c:	f003 fcd8 	bl	8005830 <HAL_RCC_GetPCLK1Freq>
 8001e80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4a81      	ldr	r2, [pc, #516]	; (800208c <HAL_I2C_Init+0x274>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d807      	bhi.n	8001e9c <HAL_I2C_Init+0x84>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4a80      	ldr	r2, [pc, #512]	; (8002090 <HAL_I2C_Init+0x278>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	bf94      	ite	ls
 8001e94:	2301      	movls	r3, #1
 8001e96:	2300      	movhi	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	e006      	b.n	8001eaa <HAL_I2C_Init+0x92>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4a7d      	ldr	r2, [pc, #500]	; (8002094 <HAL_I2C_Init+0x27c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	bf94      	ite	ls
 8001ea4:	2301      	movls	r3, #1
 8001ea6:	2300      	movhi	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e0e7      	b.n	8002082 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4a78      	ldr	r2, [pc, #480]	; (8002098 <HAL_I2C_Init+0x280>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	0c9b      	lsrs	r3, r3, #18
 8001ebc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4a6a      	ldr	r2, [pc, #424]	; (800208c <HAL_I2C_Init+0x274>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d802      	bhi.n	8001eec <HAL_I2C_Init+0xd4>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	e009      	b.n	8001f00 <HAL_I2C_Init+0xe8>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ef2:	fb02 f303 	mul.w	r3, r2, r3
 8001ef6:	4a69      	ldr	r2, [pc, #420]	; (800209c <HAL_I2C_Init+0x284>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	099b      	lsrs	r3, r3, #6
 8001efe:	3301      	adds	r3, #1
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	495c      	ldr	r1, [pc, #368]	; (800208c <HAL_I2C_Init+0x274>)
 8001f1c:	428b      	cmp	r3, r1
 8001f1e:	d819      	bhi.n	8001f54 <HAL_I2C_Init+0x13c>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1e59      	subs	r1, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f2e:	1c59      	adds	r1, r3, #1
 8001f30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f34:	400b      	ands	r3, r1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00a      	beq.n	8001f50 <HAL_I2C_Init+0x138>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1e59      	subs	r1, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f48:	3301      	adds	r3, #1
 8001f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4e:	e051      	b.n	8001ff4 <HAL_I2C_Init+0x1dc>
 8001f50:	2304      	movs	r3, #4
 8001f52:	e04f      	b.n	8001ff4 <HAL_I2C_Init+0x1dc>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d111      	bne.n	8001f80 <HAL_I2C_Init+0x168>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	1e58      	subs	r0, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6859      	ldr	r1, [r3, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	440b      	add	r3, r1
 8001f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	e012      	b.n	8001fa6 <HAL_I2C_Init+0x18e>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1e58      	subs	r0, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	0099      	lsls	r1, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_Init+0x196>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e022      	b.n	8001ff4 <HAL_I2C_Init+0x1dc>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10e      	bne.n	8001fd4 <HAL_I2C_Init+0x1bc>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1e58      	subs	r0, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6859      	ldr	r1, [r3, #4]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	440b      	add	r3, r1
 8001fc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc8:	3301      	adds	r3, #1
 8001fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd2:	e00f      	b.n	8001ff4 <HAL_I2C_Init+0x1dc>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1e58      	subs	r0, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6859      	ldr	r1, [r3, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	0099      	lsls	r1, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fea:	3301      	adds	r3, #1
 8001fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	6809      	ldr	r1, [r1, #0]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69da      	ldr	r2, [r3, #28]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002022:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6911      	ldr	r1, [r2, #16]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68d2      	ldr	r2, [r2, #12]
 800202e:	4311      	orrs	r1, r2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	430b      	orrs	r3, r1
 8002036:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	000186a0 	.word	0x000186a0
 8002090:	001e847f 	.word	0x001e847f
 8002094:	003d08ff 	.word	0x003d08ff
 8002098:	431bde83 	.word	0x431bde83
 800209c:	10624dd3 	.word	0x10624dd3

080020a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d003      	beq.n	80020d8 <HAL_I2C_EV_IRQHandler+0x38>
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	2b40      	cmp	r3, #64	; 0x40
 80020d4:	f040 80c1 	bne.w	800225a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10d      	bne.n	800210e <HAL_I2C_EV_IRQHandler+0x6e>
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80020f8:	d003      	beq.n	8002102 <HAL_I2C_EV_IRQHandler+0x62>
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002100:	d101      	bne.n	8002106 <HAL_I2C_EV_IRQHandler+0x66>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_I2C_EV_IRQHandler+0x68>
 8002106:	2300      	movs	r3, #0
 8002108:	2b01      	cmp	r3, #1
 800210a:	f000 8132 	beq.w	8002372 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00c      	beq.n	8002132 <HAL_I2C_EV_IRQHandler+0x92>
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	0a5b      	lsrs	r3, r3, #9
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f001 fc7b 	bl	8003a20 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fd83 	bl	8002c36 <I2C_Master_SB>
 8002130:	e092      	b.n	8002258 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	08db      	lsrs	r3, r3, #3
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <HAL_I2C_EV_IRQHandler+0xb2>
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	0a5b      	lsrs	r3, r3, #9
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fdf9 	bl	8002d42 <I2C_Master_ADD10>
 8002150:	e082      	b.n	8002258 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	085b      	lsrs	r3, r3, #1
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <HAL_I2C_EV_IRQHandler+0xd2>
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	0a5b      	lsrs	r3, r3, #9
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 fe13 	bl	8002d96 <I2C_Master_ADDR>
 8002170:	e072      	b.n	8002258 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d03b      	beq.n	80021f6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800218c:	f000 80f3 	beq.w	8002376 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	09db      	lsrs	r3, r3, #7
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00f      	beq.n	80021bc <HAL_I2C_EV_IRQHandler+0x11c>
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	0a9b      	lsrs	r3, r3, #10
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d009      	beq.n	80021bc <HAL_I2C_EV_IRQHandler+0x11c>
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d103      	bne.n	80021bc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f9f3 	bl	80025a0 <I2C_MasterTransmit_TXE>
 80021ba:	e04d      	b.n	8002258 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80d6 	beq.w	8002376 <HAL_I2C_EV_IRQHandler+0x2d6>
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	0a5b      	lsrs	r3, r3, #9
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80cf 	beq.w	8002376 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80021d8:	7bbb      	ldrb	r3, [r7, #14]
 80021da:	2b21      	cmp	r3, #33	; 0x21
 80021dc:	d103      	bne.n	80021e6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 fa7a 	bl	80026d8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021e4:	e0c7      	b.n	8002376 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	2b40      	cmp	r3, #64	; 0x40
 80021ea:	f040 80c4 	bne.w	8002376 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fae8 	bl	80027c4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021f4:	e0bf      	b.n	8002376 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002204:	f000 80b7 	beq.w	8002376 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	099b      	lsrs	r3, r3, #6
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00f      	beq.n	8002234 <HAL_I2C_EV_IRQHandler+0x194>
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	0a9b      	lsrs	r3, r3, #10
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d009      	beq.n	8002234 <HAL_I2C_EV_IRQHandler+0x194>
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d103      	bne.n	8002234 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fb5d 	bl	80028ec <I2C_MasterReceive_RXNE>
 8002232:	e011      	b.n	8002258 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 809a 	beq.w	8002376 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	0a5b      	lsrs	r3, r3, #9
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 8093 	beq.w	8002376 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fc06 	bl	8002a62 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002256:	e08e      	b.n	8002376 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002258:	e08d      	b.n	8002376 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d004      	beq.n	800226c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	e007      	b.n	800227c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	085b      	lsrs	r3, r3, #1
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d012      	beq.n	80022ae <HAL_I2C_EV_IRQHandler+0x20e>
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	0a5b      	lsrs	r3, r3, #9
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00c      	beq.n	80022ae <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80022a4:	69b9      	ldr	r1, [r7, #24]
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 ffc4 	bl	8003234 <I2C_Slave_ADDR>
 80022ac:	e066      	b.n	800237c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_I2C_EV_IRQHandler+0x22e>
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	0a5b      	lsrs	r3, r3, #9
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fffe 	bl	80032c8 <I2C_Slave_STOPF>
 80022cc:	e056      	b.n	800237c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80022ce:	7bbb      	ldrb	r3, [r7, #14]
 80022d0:	2b21      	cmp	r3, #33	; 0x21
 80022d2:	d002      	beq.n	80022da <HAL_I2C_EV_IRQHandler+0x23a>
 80022d4:	7bbb      	ldrb	r3, [r7, #14]
 80022d6:	2b29      	cmp	r3, #41	; 0x29
 80022d8:	d125      	bne.n	8002326 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	09db      	lsrs	r3, r3, #7
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00f      	beq.n	8002306 <HAL_I2C_EV_IRQHandler+0x266>
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	0a9b      	lsrs	r3, r3, #10
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <HAL_I2C_EV_IRQHandler+0x266>
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d103      	bne.n	8002306 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 feda 	bl	80030b8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002304:	e039      	b.n	800237a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	089b      	lsrs	r3, r3, #2
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d033      	beq.n	800237a <HAL_I2C_EV_IRQHandler+0x2da>
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	0a5b      	lsrs	r3, r3, #9
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d02d      	beq.n	800237a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 ff07 	bl	8003132 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002324:	e029      	b.n	800237a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	099b      	lsrs	r3, r3, #6
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00f      	beq.n	8002352 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	0a9b      	lsrs	r3, r3, #10
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <HAL_I2C_EV_IRQHandler+0x2b2>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d103      	bne.n	8002352 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 ff12 	bl	8003174 <I2C_SlaveReceive_RXNE>
 8002350:	e014      	b.n	800237c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00e      	beq.n	800237c <HAL_I2C_EV_IRQHandler+0x2dc>
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	0a5b      	lsrs	r3, r3, #9
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d008      	beq.n	800237c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 ff40 	bl	80031f0 <I2C_SlaveReceive_BTF>
 8002370:	e004      	b.n	800237c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002372:	bf00      	nop
 8002374:	e002      	b.n	800237c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002376:	bf00      	nop
 8002378:	e000      	b.n	800237c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800237a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800237c:	3720      	adds	r7, #32
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b08a      	sub	sp, #40	; 0x28
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023a4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00e      	beq.n	80023d0 <HAL_I2C_ER_IRQHandler+0x4e>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80023ce:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	0a5b      	lsrs	r3, r3, #9
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00e      	beq.n	80023fa <HAL_I2C_ER_IRQHandler+0x78>
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	f043 0302 	orr.w	r3, r3, #2
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80023f8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	0a9b      	lsrs	r3, r3, #10
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d03f      	beq.n	8002486 <HAL_I2C_ER_IRQHandler+0x104>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d039      	beq.n	8002486 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002412:	7efb      	ldrb	r3, [r7, #27]
 8002414:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002424:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800242c:	7ebb      	ldrb	r3, [r7, #26]
 800242e:	2b20      	cmp	r3, #32
 8002430:	d112      	bne.n	8002458 <HAL_I2C_ER_IRQHandler+0xd6>
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10f      	bne.n	8002458 <HAL_I2C_ER_IRQHandler+0xd6>
 8002438:	7cfb      	ldrb	r3, [r7, #19]
 800243a:	2b21      	cmp	r3, #33	; 0x21
 800243c:	d008      	beq.n	8002450 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	2b29      	cmp	r3, #41	; 0x29
 8002442:	d005      	beq.n	8002450 <HAL_I2C_ER_IRQHandler+0xce>
 8002444:	7cfb      	ldrb	r3, [r7, #19]
 8002446:	2b28      	cmp	r3, #40	; 0x28
 8002448:	d106      	bne.n	8002458 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b21      	cmp	r3, #33	; 0x21
 800244e:	d103      	bne.n	8002458 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f001 f869 	bl	8003528 <I2C_Slave_AF>
 8002456:	e016      	b.n	8002486 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002460:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800246a:	7efb      	ldrb	r3, [r7, #27]
 800246c:	2b10      	cmp	r3, #16
 800246e:	d002      	beq.n	8002476 <HAL_I2C_ER_IRQHandler+0xf4>
 8002470:	7efb      	ldrb	r3, [r7, #27]
 8002472:	2b40      	cmp	r3, #64	; 0x40
 8002474:	d107      	bne.n	8002486 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002484:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	0adb      	lsrs	r3, r3, #11
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00e      	beq.n	80024b0 <HAL_I2C_ER_IRQHandler+0x12e>
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	0a1b      	lsrs	r3, r3, #8
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	f043 0308 	orr.w	r3, r3, #8
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80024ae:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f001 f8a0 	bl	8003608 <I2C_ITError>
  }
}
 80024c8:	bf00      	nop
 80024ca:	3728      	adds	r7, #40	; 0x28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	70fb      	strb	r3, [r7, #3]
 800252c:	4613      	mov	r3, r2
 800252e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d150      	bne.n	8002668 <I2C_MasterTransmit_TXE+0xc8>
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	2b21      	cmp	r3, #33	; 0x21
 80025ca:	d14d      	bne.n	8002668 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d01d      	beq.n	800260e <I2C_MasterTransmit_TXE+0x6e>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d01a      	beq.n	800260e <I2C_MasterTransmit_TXE+0x6e>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025de:	d016      	beq.n	800260e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025ee:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2211      	movs	r2, #17
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ff62 	bl	80024d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800260c:	e060      	b.n	80026d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800261c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b40      	cmp	r3, #64	; 0x40
 8002646:	d107      	bne.n	8002658 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ff7d 	bl	8002550 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002656:	e03b      	b.n	80026d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff35 	bl	80024d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002666:	e033      	b.n	80026d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b21      	cmp	r3, #33	; 0x21
 800266c:	d005      	beq.n	800267a <I2C_MasterTransmit_TXE+0xda>
 800266e:	7bbb      	ldrb	r3, [r7, #14]
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	d12d      	bne.n	80026d0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b22      	cmp	r3, #34	; 0x22
 8002678:	d12a      	bne.n	80026d0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d108      	bne.n	8002696 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002692:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002694:	e01c      	b.n	80026d0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b40      	cmp	r3, #64	; 0x40
 80026a0:	d103      	bne.n	80026aa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f88e 	bl	80027c4 <I2C_MemoryTransmit_TXE_BTF>
}
 80026a8:	e012      	b.n	80026d0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	781a      	ldrb	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026ce:	e7ff      	b.n	80026d0 <I2C_MasterTransmit_TXE+0x130>
 80026d0:	bf00      	nop
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b21      	cmp	r3, #33	; 0x21
 80026f0:	d164      	bne.n	80027bc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d012      	beq.n	8002722 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002720:	e04c      	b.n	80027bc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b08      	cmp	r3, #8
 8002726:	d01d      	beq.n	8002764 <I2C_MasterTransmit_BTF+0x8c>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b20      	cmp	r3, #32
 800272c:	d01a      	beq.n	8002764 <I2C_MasterTransmit_BTF+0x8c>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002734:	d016      	beq.n	8002764 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002744:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2211      	movs	r2, #17
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff feb7 	bl	80024d0 <HAL_I2C_MasterTxCpltCallback>
}
 8002762:	e02b      	b.n	80027bc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002772:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002782:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b40      	cmp	r3, #64	; 0x40
 800279c:	d107      	bne.n	80027ae <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff fed2 	bl	8002550 <HAL_I2C_MemTxCpltCallback>
}
 80027ac:	e006      	b.n	80027bc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff fe8a 	bl	80024d0 <HAL_I2C_MasterTxCpltCallback>
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d11d      	bne.n	8002818 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10b      	bne.n	80027fc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f4:	1c9a      	adds	r2, r3, #2
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80027fa:	e073      	b.n	80028e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002800:	b29b      	uxth	r3, r3
 8002802:	121b      	asrs	r3, r3, #8
 8002804:	b2da      	uxtb	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002816:	e065      	b.n	80028e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281c:	2b01      	cmp	r3, #1
 800281e:	d10b      	bne.n	8002838 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002824:	b2da      	uxtb	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002836:	e055      	b.n	80028e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283c:	2b02      	cmp	r3, #2
 800283e:	d151      	bne.n	80028e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b22      	cmp	r3, #34	; 0x22
 8002844:	d10d      	bne.n	8002862 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002854:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002860:	e040      	b.n	80028e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d015      	beq.n	8002898 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	2b21      	cmp	r3, #33	; 0x21
 8002870:	d112      	bne.n	8002898 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	781a      	ldrb	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002896:	e025      	b.n	80028e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d120      	bne.n	80028e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	2b21      	cmp	r3, #33	; 0x21
 80028a6:	d11d      	bne.n	80028e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028b6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff fe36 	bl	8002550 <HAL_I2C_MemTxCpltCallback>
}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b22      	cmp	r3, #34	; 0x22
 80028fe:	f040 80ac 	bne.w	8002a5a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d921      	bls.n	8002954 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b03      	cmp	r3, #3
 800293e:	f040 808c 	bne.w	8002a5a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002950:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002952:	e082      	b.n	8002a5a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	2b02      	cmp	r3, #2
 800295a:	d075      	beq.n	8002a48 <I2C_MasterReceive_RXNE+0x15c>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d002      	beq.n	8002968 <I2C_MasterReceive_RXNE+0x7c>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d16f      	bne.n	8002a48 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f001 f827 	bl	80039bc <I2C_WaitOnSTOPRequestThroughIT>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d142      	bne.n	80029fa <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002982:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002992:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b40      	cmp	r3, #64	; 0x40
 80029cc:	d10a      	bne.n	80029e4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff fdc1 	bl	8002564 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80029e2:	e03a      	b.n	8002a5a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2212      	movs	r2, #18
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff fd76 	bl	80024e4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80029f8:	e02f      	b.n	8002a5a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a08:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff fd99 	bl	8002578 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a46:	e008      	b.n	8002a5a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a56:	605a      	str	r2, [r3, #4]
}
 8002a58:	e7ff      	b.n	8002a5a <I2C_MasterReceive_RXNE+0x16e>
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d11b      	bne.n	8002ab2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a88:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002ab0:	e0bd      	b.n	8002c2e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d129      	bne.n	8002b10 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aca:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d00a      	beq.n	8002ae8 <I2C_MasterReceive_BTF+0x86>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d007      	beq.n	8002ae8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b0e:	e08e      	b.n	8002c2e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d176      	bne.n	8002c08 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d002      	beq.n	8002b26 <I2C_MasterReceive_BTF+0xc4>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b10      	cmp	r3, #16
 8002b24:	d108      	bne.n	8002b38 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	e019      	b.n	8002b6c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d002      	beq.n	8002b44 <I2C_MasterReceive_BTF+0xe2>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d108      	bne.n	8002b56 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	e00a      	b.n	8002b6c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b10      	cmp	r3, #16
 8002b5a:	d007      	beq.n	8002b6c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002bc6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d10a      	bne.n	8002bf2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff fcba 	bl	8002564 <HAL_I2C_MemRxCpltCallback>
}
 8002bf0:	e01d      	b.n	8002c2e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2212      	movs	r2, #18
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff fc6f 	bl	80024e4 <HAL_I2C_MasterRxCpltCallback>
}
 8002c06:	e012      	b.n	8002c2e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b40      	cmp	r3, #64	; 0x40
 8002c48:	d117      	bne.n	8002c7a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d109      	bne.n	8002c66 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c62:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002c64:	e067      	b.n	8002d36 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	611a      	str	r2, [r3, #16]
}
 8002c78:	e05d      	b.n	8002d36 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c82:	d133      	bne.n	8002cec <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b21      	cmp	r3, #33	; 0x21
 8002c8e:	d109      	bne.n	8002ca4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ca0:	611a      	str	r2, [r3, #16]
 8002ca2:	e008      	b.n	8002cb6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d004      	beq.n	8002cc8 <I2C_Master_SB+0x92>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d108      	bne.n	8002cda <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d032      	beq.n	8002d36 <I2C_Master_SB+0x100>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d02d      	beq.n	8002d36 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ce8:	605a      	str	r2, [r3, #4]
}
 8002cea:	e024      	b.n	8002d36 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10e      	bne.n	8002d12 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	11db      	asrs	r3, r3, #7
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	f003 0306 	and.w	r3, r3, #6
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f063 030f 	orn	r3, r3, #15
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	611a      	str	r2, [r3, #16]
}
 8002d10:	e011      	b.n	8002d36 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d10d      	bne.n	8002d36 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	11db      	asrs	r3, r3, #7
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f003 0306 	and.w	r3, r3, #6
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	f063 030e 	orn	r3, r3, #14
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	611a      	str	r2, [r3, #16]
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d004      	beq.n	8002d68 <I2C_Master_ADD10+0x26>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d108      	bne.n	8002d7a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00c      	beq.n	8002d8a <I2C_Master_ADD10+0x48>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d007      	beq.n	8002d8a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d88:	605a      	str	r2, [r3, #4]
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b091      	sub	sp, #68	; 0x44
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002da4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b22      	cmp	r3, #34	; 0x22
 8002dbe:	f040 8169 	bne.w	8003094 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10f      	bne.n	8002dea <I2C_Master_ADDR+0x54>
 8002dca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	d10b      	bne.n	8002dea <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	633b      	str	r3, [r7, #48]	; 0x30
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	633b      	str	r3, [r7, #48]	; 0x30
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	e160      	b.n	80030ac <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d11d      	bne.n	8002e2e <I2C_Master_ADDR+0x98>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002dfa:	d118      	bne.n	8002e2e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e20:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	651a      	str	r2, [r3, #80]	; 0x50
 8002e2c:	e13e      	b.n	80030ac <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d113      	bne.n	8002e60 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e38:	2300      	movs	r3, #0
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	e115      	b.n	800308c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	f040 808a 	bne.w	8002f80 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e72:	d137      	bne.n	8002ee4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e82:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e92:	d113      	bne.n	8002ebc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	e0e7      	b.n	800308c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	623b      	str	r3, [r7, #32]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	623b      	str	r3, [r7, #32]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	623b      	str	r3, [r7, #32]
 8002ed0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	e0d3      	b.n	800308c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d02e      	beq.n	8002f48 <I2C_Master_ADDR+0x1b2>
 8002eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d02b      	beq.n	8002f48 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef2:	2b12      	cmp	r3, #18
 8002ef4:	d102      	bne.n	8002efc <I2C_Master_ADDR+0x166>
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d125      	bne.n	8002f48 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d00e      	beq.n	8002f20 <I2C_Master_ADDR+0x18a>
 8002f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d00b      	beq.n	8002f20 <I2C_Master_ADDR+0x18a>
 8002f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d008      	beq.n	8002f20 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	e007      	b.n	8002f30 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f2e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	e0a1      	b.n	800308c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f56:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61bb      	str	r3, [r7, #24]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	61bb      	str	r3, [r7, #24]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	61bb      	str	r3, [r7, #24]
 8002f6c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e085      	b.n	800308c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d14d      	bne.n	8003026 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d016      	beq.n	8002fbe <I2C_Master_ADDR+0x228>
 8002f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d013      	beq.n	8002fbe <I2C_Master_ADDR+0x228>
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d010      	beq.n	8002fbe <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002faa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e007      	b.n	8002fce <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fcc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fdc:	d117      	bne.n	800300e <I2C_Master_ADDR+0x278>
 8002fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fe4:	d00b      	beq.n	8002ffe <I2C_Master_ADDR+0x268>
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d008      	beq.n	8002ffe <I2C_Master_ADDR+0x268>
 8002fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d005      	beq.n	8002ffe <I2C_Master_ADDR+0x268>
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	d002      	beq.n	8002ffe <I2C_Master_ADDR+0x268>
 8002ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffa:	2b20      	cmp	r3, #32
 8002ffc:	d107      	bne.n	800300e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800300c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	e032      	b.n	800308c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003034:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003044:	d117      	bne.n	8003076 <I2C_Master_ADDR+0x2e0>
 8003046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003048:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800304c:	d00b      	beq.n	8003066 <I2C_Master_ADDR+0x2d0>
 800304e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003050:	2b01      	cmp	r3, #1
 8003052:	d008      	beq.n	8003066 <I2C_Master_ADDR+0x2d0>
 8003054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003056:	2b08      	cmp	r3, #8
 8003058:	d005      	beq.n	8003066 <I2C_Master_ADDR+0x2d0>
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	2b10      	cmp	r3, #16
 800305e:	d002      	beq.n	8003066 <I2C_Master_ADDR+0x2d0>
 8003060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003062:	2b20      	cmp	r3, #32
 8003064:	d107      	bne.n	8003076 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003074:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003092:	e00b      	b.n	80030ac <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
}
 80030aa:	e7ff      	b.n	80030ac <I2C_Master_ADDR+0x316>
 80030ac:	bf00      	nop
 80030ae:	3744      	adds	r7, #68	; 0x44
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d02b      	beq.n	800312a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	781a      	ldrb	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d114      	bne.n	800312a <I2C_SlaveTransmit_TXE+0x72>
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	2b29      	cmp	r3, #41	; 0x29
 8003104:	d111      	bne.n	800312a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003114:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2221      	movs	r2, #33	; 0x21
 800311a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2228      	movs	r2, #40	; 0x28
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff f9e7 	bl	80024f8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800312a:	bf00      	nop
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d011      	beq.n	8003168 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	781a      	ldrb	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003182:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d02c      	beq.n	80031e8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d114      	bne.n	80031e8 <I2C_SlaveReceive_RXNE+0x74>
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	2b2a      	cmp	r3, #42	; 0x2a
 80031c2:	d111      	bne.n	80031e8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2222      	movs	r2, #34	; 0x22
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2228      	movs	r2, #40	; 0x28
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff f992 	bl	800250c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80031e8:	bf00      	nop
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d012      	beq.n	8003228 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800323e:	2300      	movs	r3, #0
 8003240:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800324e:	2b28      	cmp	r3, #40	; 0x28
 8003250:	d127      	bne.n	80032a2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003260:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	089b      	lsrs	r3, r3, #2
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	09db      	lsrs	r3, r3, #7
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	81bb      	strh	r3, [r7, #12]
 8003284:	e002      	b.n	800328c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003294:	89ba      	ldrh	r2, [r7, #12]
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	4619      	mov	r1, r3
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff f940 	bl	8002520 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80032a0:	e00e      	b.n	80032c0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003314:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003324:	d172      	bne.n	800340c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	2b22      	cmp	r3, #34	; 0x22
 800332a:	d002      	beq.n	8003332 <I2C_Slave_STOPF+0x6a>
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	2b2a      	cmp	r3, #42	; 0x2a
 8003330:	d135      	bne.n	800339e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	b29a      	uxth	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f043 0204 	orr.w	r2, r3, #4
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003364:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe faba 	bl	80018e4 <HAL_DMA_GetState>
 8003370:	4603      	mov	r3, r0
 8003372:	2b01      	cmp	r3, #1
 8003374:	d049      	beq.n	800340a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	4a69      	ldr	r2, [pc, #420]	; (8003520 <I2C_Slave_STOPF+0x258>)
 800337c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe f902 	bl	800158c <HAL_DMA_Abort_IT>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d03d      	beq.n	800340a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003398:	4610      	mov	r0, r2
 800339a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800339c:	e035      	b.n	800340a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d005      	beq.n	80033c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f043 0204 	orr.w	r2, r3, #4
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fa84 	bl	80018e4 <HAL_DMA_GetState>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d014      	beq.n	800340c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e6:	4a4e      	ldr	r2, [pc, #312]	; (8003520 <I2C_Slave_STOPF+0x258>)
 80033e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe f8cc 	bl	800158c <HAL_DMA_Abort_IT>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003404:	4610      	mov	r0, r2
 8003406:	4798      	blx	r3
 8003408:	e000      	b.n	800340c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800340a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d03e      	beq.n	8003494 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b04      	cmp	r3, #4
 8003422:	d112      	bne.n	800344a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003454:	2b40      	cmp	r3, #64	; 0x40
 8003456:	d112      	bne.n	800347e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f043 0204 	orr.w	r2, r3, #4
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f8b3 	bl	8003608 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80034a2:	e039      	b.n	8003518 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	2b2a      	cmp	r3, #42	; 0x2a
 80034a8:	d109      	bne.n	80034be <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2228      	movs	r2, #40	; 0x28
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff f827 	bl	800250c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b28      	cmp	r3, #40	; 0x28
 80034c8:	d111      	bne.n	80034ee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a15      	ldr	r2, [pc, #84]	; (8003524 <I2C_Slave_STOPF+0x25c>)
 80034ce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff f828 	bl	800253c <HAL_I2C_ListenCpltCallback>
}
 80034ec:	e014      	b.n	8003518 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	2b22      	cmp	r3, #34	; 0x22
 80034f4:	d002      	beq.n	80034fc <I2C_Slave_STOPF+0x234>
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	2b22      	cmp	r3, #34	; 0x22
 80034fa:	d10d      	bne.n	8003518 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fe fffa 	bl	800250c <HAL_I2C_SlaveRxCpltCallback>
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	0800386d 	.word	0x0800386d
 8003524:	ffff0000 	.word	0xffff0000

08003528 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003536:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d002      	beq.n	800354a <I2C_Slave_AF+0x22>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b20      	cmp	r3, #32
 8003548:	d129      	bne.n	800359e <I2C_Slave_AF+0x76>
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	2b28      	cmp	r3, #40	; 0x28
 800354e:	d126      	bne.n	800359e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a2c      	ldr	r2, [pc, #176]	; (8003604 <I2C_Slave_AF+0xdc>)
 8003554:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003564:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800356e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800357e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fe ffd0 	bl	800253c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800359c:	e02e      	b.n	80035fc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	2b21      	cmp	r3, #33	; 0x21
 80035a2:	d126      	bne.n	80035f2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a17      	ldr	r2, [pc, #92]	; (8003604 <I2C_Slave_AF+0xdc>)
 80035a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2221      	movs	r2, #33	; 0x21
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035ce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035d8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fe ff84 	bl	80024f8 <HAL_I2C_SlaveTxCpltCallback>
}
 80035f0:	e004      	b.n	80035fc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035fa:	615a      	str	r2, [r3, #20]
}
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	ffff0000 	.word	0xffff0000

08003608 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003616:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800361e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003620:	7bbb      	ldrb	r3, [r7, #14]
 8003622:	2b10      	cmp	r3, #16
 8003624:	d002      	beq.n	800362c <I2C_ITError+0x24>
 8003626:	7bbb      	ldrb	r3, [r7, #14]
 8003628:	2b40      	cmp	r3, #64	; 0x40
 800362a:	d10a      	bne.n	8003642 <I2C_ITError+0x3a>
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	2b22      	cmp	r3, #34	; 0x22
 8003630:	d107      	bne.n	8003642 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003640:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003648:	2b28      	cmp	r3, #40	; 0x28
 800364a:	d107      	bne.n	800365c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2228      	movs	r2, #40	; 0x28
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800365a:	e015      	b.n	8003688 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800366a:	d00a      	beq.n	8003682 <I2C_ITError+0x7a>
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	2b60      	cmp	r3, #96	; 0x60
 8003670:	d007      	beq.n	8003682 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003696:	d162      	bne.n	800375e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036a6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d020      	beq.n	80036f8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ba:	4a6a      	ldr	r2, [pc, #424]	; (8003864 <I2C_ITError+0x25c>)
 80036bc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fd ff62 	bl	800158c <HAL_DMA_Abort_IT>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8089 	beq.w	80037e2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0201 	bic.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036f2:	4610      	mov	r0, r2
 80036f4:	4798      	blx	r3
 80036f6:	e074      	b.n	80037e2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	4a59      	ldr	r2, [pc, #356]	; (8003864 <I2C_ITError+0x25c>)
 80036fe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	4618      	mov	r0, r3
 8003706:	f7fd ff41 	bl	800158c <HAL_DMA_Abort_IT>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d068      	beq.n	80037e2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d10b      	bne.n	8003736 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0201 	bic.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003758:	4610      	mov	r0, r2
 800375a:	4798      	blx	r3
 800375c:	e041      	b.n	80037e2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b60      	cmp	r3, #96	; 0x60
 8003768:	d125      	bne.n	80037b6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	d10b      	bne.n	800379e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fe feec 	bl	800258c <HAL_I2C_AbortCpltCallback>
 80037b4:	e015      	b.n	80037e2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c0:	2b40      	cmp	r3, #64	; 0x40
 80037c2:	d10b      	bne.n	80037dc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7fe fecb 	bl	8002578 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10e      	bne.n	8003810 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d109      	bne.n	8003810 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003802:	2b00      	cmp	r3, #0
 8003804:	d104      	bne.n	8003810 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800381e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003826:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b04      	cmp	r3, #4
 8003832:	d113      	bne.n	800385c <I2C_ITError+0x254>
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	2b28      	cmp	r3, #40	; 0x28
 8003838:	d110      	bne.n	800385c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a0a      	ldr	r2, [pc, #40]	; (8003868 <I2C_ITError+0x260>)
 800383e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fe fe70 	bl	800253c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800385c:	bf00      	nop
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	0800386d 	.word	0x0800386d
 8003868:	ffff0000 	.word	0xffff0000

0800386c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003884:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003886:	4b4b      	ldr	r3, [pc, #300]	; (80039b4 <I2C_DMAAbort+0x148>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	08db      	lsrs	r3, r3, #3
 800388c:	4a4a      	ldr	r2, [pc, #296]	; (80039b8 <I2C_DMAAbort+0x14c>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	0a1a      	lsrs	r2, r3, #8
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	00da      	lsls	r2, r3, #3
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f043 0220 	orr.w	r2, r3, #32
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80038b2:	e00a      	b.n	80038ca <I2C_DMAAbort+0x5e>
    }
    count--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c8:	d0ea      	beq.n	80038a0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d6:	2200      	movs	r2, #0
 80038d8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e6:	2200      	movs	r2, #0
 80038e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2200      	movs	r2, #0
 80038fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390c:	2200      	movs	r2, #0
 800390e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	2200      	movs	r2, #0
 800391e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b60      	cmp	r3, #96	; 0x60
 800393a:	d10e      	bne.n	800395a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2200      	movs	r2, #0
 8003950:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003952:	6978      	ldr	r0, [r7, #20]
 8003954:	f7fe fe1a 	bl	800258c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003958:	e027      	b.n	80039aa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800395a:	7cfb      	ldrb	r3, [r7, #19]
 800395c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003960:	2b28      	cmp	r3, #40	; 0x28
 8003962:	d117      	bne.n	8003994 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003982:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2200      	movs	r2, #0
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2228      	movs	r2, #40	; 0x28
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003992:	e007      	b.n	80039a4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80039a4:	6978      	ldr	r0, [r7, #20]
 80039a6:	f7fe fde7 	bl	8002578 <HAL_I2C_ErrorCallback>
}
 80039aa:	bf00      	nop
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000000 	.word	0x20000000
 80039b8:	14f8b589 	.word	0x14f8b589

080039bc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80039c8:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	08db      	lsrs	r3, r3, #3
 80039ce:	4a13      	ldr	r2, [pc, #76]	; (8003a1c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80039d0:	fba2 2303 	umull	r2, r3, r2, r3
 80039d4:	0a1a      	lsrs	r2, r3, #8
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d107      	bne.n	80039fa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f043 0220 	orr.w	r2, r3, #32
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e008      	b.n	8003a0c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a08:	d0e9      	beq.n	80039de <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	20000000 	.word	0x20000000
 8003a1c:	14f8b589 	.word	0x14f8b589

08003a20 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a30:	d103      	bne.n	8003a3a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a38:	e007      	b.n	8003a4a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a42:	d102      	bne.n	8003a4a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2208      	movs	r2, #8
 8003a48:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a58:	b08f      	sub	sp, #60	; 0x3c
 8003a5a:	af0a      	add	r7, sp, #40	; 0x28
 8003a5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e10f      	b.n	8003c88 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f008 f80e 	bl	800baa4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d102      	bne.n	8003aa2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f004 fb61 	bl	800816e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	603b      	str	r3, [r7, #0]
 8003ab2:	687e      	ldr	r6, [r7, #4]
 8003ab4:	466d      	mov	r5, sp
 8003ab6:	f106 0410 	add.w	r4, r6, #16
 8003aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ac2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ac6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003aca:	1d33      	adds	r3, r6, #4
 8003acc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ace:	6838      	ldr	r0, [r7, #0]
 8003ad0:	f004 fa38 	bl	8007f44 <USB_CoreInit>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e0d0      	b.n	8003c88 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2100      	movs	r1, #0
 8003aec:	4618      	mov	r0, r3
 8003aee:	f004 fb4f 	bl	8008190 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af2:	2300      	movs	r3, #0
 8003af4:	73fb      	strb	r3, [r7, #15]
 8003af6:	e04a      	b.n	8003b8e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003af8:	7bfa      	ldrb	r2, [r7, #15]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	333d      	adds	r3, #61	; 0x3d
 8003b08:	2201      	movs	r2, #1
 8003b0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b0c:	7bfa      	ldrb	r2, [r7, #15]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	333c      	adds	r3, #60	; 0x3c
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b20:	7bfa      	ldrb	r2, [r7, #15]
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	b298      	uxth	r0, r3
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	3344      	adds	r3, #68	; 0x44
 8003b34:	4602      	mov	r2, r0
 8003b36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b38:	7bfa      	ldrb	r2, [r7, #15]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	3340      	adds	r3, #64	; 0x40
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b4c:	7bfa      	ldrb	r2, [r7, #15]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	3348      	adds	r3, #72	; 0x48
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b60:	7bfa      	ldrb	r2, [r7, #15]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	334c      	adds	r3, #76	; 0x4c
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	3354      	adds	r3, #84	; 0x54
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
 8003b8e:	7bfa      	ldrb	r2, [r7, #15]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d3af      	bcc.n	8003af8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b98:	2300      	movs	r3, #0
 8003b9a:	73fb      	strb	r3, [r7, #15]
 8003b9c:	e044      	b.n	8003c28 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bb4:	7bfa      	ldrb	r2, [r7, #15]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003bc6:	7bfa      	ldrb	r2, [r7, #15]
 8003bc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bca:	7bfa      	ldrb	r2, [r7, #15]
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003be0:	7bfa      	ldrb	r2, [r7, #15]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bf6:	7bfa      	ldrb	r2, [r7, #15]
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c0c:	7bfa      	ldrb	r2, [r7, #15]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	3301      	adds	r3, #1
 8003c26:	73fb      	strb	r3, [r7, #15]
 8003c28:	7bfa      	ldrb	r2, [r7, #15]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d3b5      	bcc.n	8003b9e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	687e      	ldr	r6, [r7, #4]
 8003c3a:	466d      	mov	r5, sp
 8003c3c:	f106 0410 	add.w	r4, r6, #16
 8003c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c50:	1d33      	adds	r3, r6, #4
 8003c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c54:	6838      	ldr	r0, [r7, #0]
 8003c56:	f004 fae7 	bl	8008228 <USB_DevInit>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e00d      	b.n	8003c88 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f005 fc36 	bl	80094f2 <USB_DevDisconnect>

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c90 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_PCD_Start+0x1c>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e020      	b.n	8003cee <HAL_PCD_Start+0x5e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d109      	bne.n	8003cd0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d005      	beq.n	8003cd0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f004 fa39 	bl	800814c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f005 fbe6 	bl	80094b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003cf6:	b590      	push	{r4, r7, lr}
 8003cf8:	b08d      	sub	sp, #52	; 0x34
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f005 fca4 	bl	800965a <USB_GetMode>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f040 848a 	bne.w	800462e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f005 fc08 	bl	8009534 <USB_ReadInterrupts>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8480 	beq.w	800462c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	0a1b      	lsrs	r3, r3, #8
 8003d36:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f005 fbf5 	bl	8009534 <USB_ReadInterrupts>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d107      	bne.n	8003d64 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f002 0202 	and.w	r2, r2, #2
 8003d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f005 fbe3 	bl	8009534 <USB_ReadInterrupts>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	d161      	bne.n	8003e3c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0210 	bic.w	r2, r2, #16
 8003d86:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	f003 020f 	and.w	r2, r3, #15
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4413      	add	r3, r2
 8003da4:	3304      	adds	r3, #4
 8003da6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	0c5b      	lsrs	r3, r3, #17
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d124      	bne.n	8003dfe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d035      	beq.n	8003e2c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	091b      	lsrs	r3, r3, #4
 8003dc8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003dca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	6a38      	ldr	r0, [r7, #32]
 8003dd4:	f005 fa1a 	bl	800920c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	091b      	lsrs	r3, r3, #4
 8003de0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003de4:	441a      	add	r2, r3
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	6a1a      	ldr	r2, [r3, #32]
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003df6:	441a      	add	r2, r3
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	621a      	str	r2, [r3, #32]
 8003dfc:	e016      	b.n	8003e2c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	0c5b      	lsrs	r3, r3, #17
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	2b06      	cmp	r3, #6
 8003e08:	d110      	bne.n	8003e2c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e10:	2208      	movs	r2, #8
 8003e12:	4619      	mov	r1, r3
 8003e14:	6a38      	ldr	r0, [r7, #32]
 8003e16:	f005 f9f9 	bl	800920c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	6a1a      	ldr	r2, [r3, #32]
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e26:	441a      	add	r2, r3
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0210 	orr.w	r2, r2, #16
 8003e3a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f005 fb77 	bl	8009534 <USB_ReadInterrupts>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e50:	f040 80a7 	bne.w	8003fa2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f005 fb7c 	bl	800955a <USB_ReadDevAllOutEpInterrupt>
 8003e62:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003e64:	e099      	b.n	8003f9a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 808e 	beq.w	8003f8e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f005 fba0 	bl	80095c2 <USB_ReadDevOutEPInterrupt>
 8003e82:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00c      	beq.n	8003ea8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fec2 	bl	8004c2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00c      	beq.n	8003ecc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 ff98 	bl	8004dfc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d008      	beq.n	8003ee8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d030      	beq.n	8003f54 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b80      	cmp	r3, #128	; 0x80
 8003efc:	d109      	bne.n	8003f12 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f10:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	4413      	add	r3, r2
 8003f24:	3304      	adds	r3, #4
 8003f26:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	78db      	ldrb	r3, [r3, #3]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d108      	bne.n	8003f42 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2200      	movs	r2, #0
 8003f34:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f007 feb7 	bl	800bcb0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4e:	461a      	mov	r2, r3
 8003f50:	2302      	movs	r3, #2
 8003f52:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d008      	beq.n	8003f70 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2320      	movs	r3, #32
 8003f6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f86:	461a      	mov	r2, r3
 8003f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f8c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	3301      	adds	r3, #1
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f47f af62 	bne.w	8003e66 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f005 fac4 	bl	8009534 <USB_ReadInterrupts>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fb6:	f040 80db 	bne.w	8004170 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f005 fae5 	bl	800958e <USB_ReadDevAllInEpInterrupt>
 8003fc4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003fca:	e0cd      	b.n	8004168 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80c2 	beq.w	800415c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f005 fb0b 	bl	80095fe <USB_ReadDevInEPInterrupt>
 8003fe8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d057      	beq.n	80040a4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	43db      	mvns	r3, r3
 800400e:	69f9      	ldr	r1, [r7, #28]
 8004010:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004014:	4013      	ands	r3, r2
 8004016:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004024:	461a      	mov	r2, r3
 8004026:	2301      	movs	r3, #1
 8004028:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d132      	bne.n	8004098 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	334c      	adds	r3, #76	; 0x4c
 8004042:	6819      	ldr	r1, [r3, #0]
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4403      	add	r3, r0
 8004052:	3348      	adds	r3, #72	; 0x48
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4419      	add	r1, r3
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405c:	4613      	mov	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4403      	add	r3, r0
 8004066:	334c      	adds	r3, #76	; 0x4c
 8004068:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	2b00      	cmp	r3, #0
 800406e:	d113      	bne.n	8004098 <HAL_PCD_IRQHandler+0x3a2>
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	3354      	adds	r3, #84	; 0x54
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d108      	bne.n	8004098 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004090:	461a      	mov	r2, r3
 8004092:	2101      	movs	r1, #1
 8004094:	f005 fb12 	bl	80096bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	b2db      	uxtb	r3, r3
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f007 fd81 	bl	800bba6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d008      	beq.n	80040c0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ba:	461a      	mov	r2, r3
 80040bc:	2308      	movs	r3, #8
 80040be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d008      	beq.n	80040dc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d6:	461a      	mov	r2, r3
 80040d8:	2310      	movs	r3, #16
 80040da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f2:	461a      	mov	r2, r3
 80040f4:	2340      	movs	r3, #64	; 0x40
 80040f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d023      	beq.n	800414a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004102:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004104:	6a38      	ldr	r0, [r7, #32]
 8004106:	f004 f9f3 	bl	80084f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800410a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410c:	4613      	mov	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	3338      	adds	r3, #56	; 0x38
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	4413      	add	r3, r2
 800411a:	3304      	adds	r3, #4
 800411c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	78db      	ldrb	r3, [r3, #3]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d108      	bne.n	8004138 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2200      	movs	r2, #0
 800412a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	b2db      	uxtb	r3, r3
 8004130:	4619      	mov	r1, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f007 fdce 	bl	800bcd4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004144:	461a      	mov	r2, r3
 8004146:	2302      	movs	r3, #2
 8004148:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fcdb 	bl	8004b12 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	3301      	adds	r3, #1
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004164:	085b      	lsrs	r3, r3, #1
 8004166:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	2b00      	cmp	r3, #0
 800416c:	f47f af2e 	bne.w	8003fcc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f005 f9dd 	bl	8009534 <USB_ReadInterrupts>
 800417a:	4603      	mov	r3, r0
 800417c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004184:	d122      	bne.n	80041cc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d108      	bne.n	80041b6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80041ac:	2100      	movs	r1, #0
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fec2 	bl	8004f38 <HAL_PCDEx_LPM_Callback>
 80041b4:	e002      	b.n	80041bc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f007 fd6c 	bl	800bc94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80041ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f005 f9af 	bl	8009534 <USB_ReadInterrupts>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e0:	d112      	bne.n	8004208 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d102      	bne.n	80041f8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f007 fd28 	bl	800bc48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695a      	ldr	r2, [r3, #20]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004206:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f005 f991 	bl	8009534 <USB_ReadInterrupts>
 8004212:	4603      	mov	r3, r0
 8004214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421c:	f040 80b7 	bne.w	800438e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800422e:	f023 0301 	bic.w	r3, r3, #1
 8004232:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2110      	movs	r1, #16
 800423a:	4618      	mov	r0, r3
 800423c:	f004 f958 	bl	80084f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004240:	2300      	movs	r3, #0
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004244:	e046      	b.n	80042d4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004252:	461a      	mov	r2, r3
 8004254:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004258:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800426a:	0151      	lsls	r1, r2, #5
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	440a      	add	r2, r1
 8004270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004274:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004278:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004286:	461a      	mov	r2, r3
 8004288:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800428c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	4413      	add	r3, r2
 8004296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800429e:	0151      	lsls	r1, r2, #5
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	440a      	add	r2, r1
 80042a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042be:	0151      	lsls	r1, r2, #5
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	440a      	add	r2, r1
 80042c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d0:	3301      	adds	r3, #1
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042da:	429a      	cmp	r2, r3
 80042dc:	d3b3      	bcc.n	8004246 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80042f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800430a:	f043 030b 	orr.w	r3, r3, #11
 800430e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004320:	f043 030b 	orr.w	r3, r3, #11
 8004324:	6453      	str	r3, [r2, #68]	; 0x44
 8004326:	e015      	b.n	8004354 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004336:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800433a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800433e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800434e:	f043 030b 	orr.w	r3, r3, #11
 8004352:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69fa      	ldr	r2, [r7, #28]
 800435e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004362:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004366:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004378:	461a      	mov	r2, r3
 800437a:	f005 f99f 	bl	80096bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695a      	ldr	r2, [r3, #20]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800438c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f005 f8ce 	bl	8009534 <USB_ReadInterrupts>
 8004398:	4603      	mov	r3, r0
 800439a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800439e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a2:	d124      	bne.n	80043ee <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f005 f964 	bl	8009676 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f004 f919 	bl	80085ea <USB_GetDevSpeed>
 80043b8:	4603      	mov	r3, r0
 80043ba:	461a      	mov	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681c      	ldr	r4, [r3, #0]
 80043c4:	f001 fa28 	bl	8005818 <HAL_RCC_GetHCLKFreq>
 80043c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	461a      	mov	r2, r3
 80043d2:	4620      	mov	r0, r4
 80043d4:	f003 fe18 	bl	8008008 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f007 fc0c 	bl	800bbf6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695a      	ldr	r2, [r3, #20]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80043ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f005 f89e 	bl	8009534 <USB_ReadInterrupts>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d10a      	bne.n	8004418 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f007 fbe9 	bl	800bbda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695a      	ldr	r2, [r3, #20]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f002 0208 	and.w	r2, r2, #8
 8004416:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f005 f889 	bl	8009534 <USB_ReadInterrupts>
 8004422:	4603      	mov	r3, r0
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	2b80      	cmp	r3, #128	; 0x80
 800442a:	d122      	bne.n	8004472 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004438:	2301      	movs	r3, #1
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
 800443c:	e014      	b.n	8004468 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004442:	4613      	mov	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d105      	bne.n	8004462 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	b2db      	uxtb	r3, r3
 800445a:	4619      	mov	r1, r3
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fb27 	bl	8004ab0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	3301      	adds	r3, #1
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446e:	429a      	cmp	r2, r3
 8004470:	d3e5      	bcc.n	800443e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f005 f85c 	bl	8009534 <USB_ReadInterrupts>
 800447c:	4603      	mov	r3, r0
 800447e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004486:	d13b      	bne.n	8004500 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004488:	2301      	movs	r3, #1
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
 800448c:	e02b      	b.n	80044e6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a2:	4613      	mov	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	3340      	adds	r3, #64	; 0x40
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d115      	bne.n	80044e0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80044b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	da12      	bge.n	80044e0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044be:	4613      	mov	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	333f      	adds	r3, #63	; 0x3f
 80044ca:	2201      	movs	r2, #1
 80044cc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	4619      	mov	r1, r3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fae8 	bl	8004ab0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	3301      	adds	r3, #1
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d3ce      	bcc.n	800448e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695a      	ldr	r2, [r3, #20]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80044fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f005 f815 	bl	8009534 <USB_ReadInterrupts>
 800450a:	4603      	mov	r3, r0
 800450c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004510:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004514:	d155      	bne.n	80045c2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004516:	2301      	movs	r3, #1
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
 800451a:	e045      	b.n	80045a8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004530:	4613      	mov	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d12e      	bne.n	80045a2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004544:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004546:	2b00      	cmp	r3, #0
 8004548:	da2b      	bge.n	80045a2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004556:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800455a:	429a      	cmp	r2, r3
 800455c:	d121      	bne.n	80045a2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004562:	4613      	mov	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004570:	2201      	movs	r2, #1
 8004572:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800459a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800459e:	6053      	str	r3, [r2, #4]
            break;
 80045a0:	e007      	b.n	80045b2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	3301      	adds	r3, #1
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d3b4      	bcc.n	800451c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695a      	ldr	r2, [r3, #20]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80045c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f004 ffb4 	bl	8009534 <USB_ReadInterrupts>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d6:	d10a      	bne.n	80045ee <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f007 fb8d 	bl	800bcf8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80045ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f004 ff9e 	bl	8009534 <USB_ReadInterrupts>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d115      	bne.n	800462e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f007 fb7d 	bl	800bd14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6859      	ldr	r1, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	e000      	b.n	800462e <HAL_PCD_IRQHandler+0x938>
      return;
 800462c:	bf00      	nop
    }
  }
}
 800462e:	3734      	adds	r7, #52	; 0x34
 8004630:	46bd      	mov	sp, r7
 8004632:	bd90      	pop	{r4, r7, pc}

08004634 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_PCD_SetAddress+0x1a>
 800464a:	2302      	movs	r3, #2
 800464c:	e013      	b.n	8004676 <HAL_PCD_SetAddress+0x42>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	78fa      	ldrb	r2, [r7, #3]
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f004 fefc 	bl	8009464 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	4608      	mov	r0, r1
 8004688:	4611      	mov	r1, r2
 800468a:	461a      	mov	r2, r3
 800468c:	4603      	mov	r3, r0
 800468e:	70fb      	strb	r3, [r7, #3]
 8004690:	460b      	mov	r3, r1
 8004692:	803b      	strh	r3, [r7, #0]
 8004694:	4613      	mov	r3, r2
 8004696:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800469c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	da0f      	bge.n	80046c4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	f003 020f 	and.w	r2, r3, #15
 80046aa:	4613      	mov	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	3338      	adds	r3, #56	; 0x38
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	4413      	add	r3, r2
 80046b8:	3304      	adds	r3, #4
 80046ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2201      	movs	r2, #1
 80046c0:	705a      	strb	r2, [r3, #1]
 80046c2:	e00f      	b.n	80046e4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	f003 020f 	and.w	r2, r3, #15
 80046ca:	4613      	mov	r3, r2
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	3304      	adds	r3, #4
 80046dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80046f0:	883a      	ldrh	r2, [r7, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	78ba      	ldrb	r2, [r7, #2]
 80046fa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	785b      	ldrb	r3, [r3, #1]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d004      	beq.n	800470e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800470e:	78bb      	ldrb	r3, [r7, #2]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d102      	bne.n	800471a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_PCD_EP_Open+0xaa>
 8004724:	2302      	movs	r3, #2
 8004726:	e00e      	b.n	8004746 <HAL_PCD_EP_Open+0xc8>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68f9      	ldr	r1, [r7, #12]
 8004736:	4618      	mov	r0, r3
 8004738:	f003 ff7c 	bl	8008634 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004744:	7afb      	ldrb	r3, [r7, #11]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	460b      	mov	r3, r1
 8004758:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800475a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800475e:	2b00      	cmp	r3, #0
 8004760:	da0f      	bge.n	8004782 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004762:	78fb      	ldrb	r3, [r7, #3]
 8004764:	f003 020f 	and.w	r2, r3, #15
 8004768:	4613      	mov	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	4413      	add	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	3338      	adds	r3, #56	; 0x38
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	4413      	add	r3, r2
 8004776:	3304      	adds	r3, #4
 8004778:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	705a      	strb	r2, [r3, #1]
 8004780:	e00f      	b.n	80047a2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	f003 020f 	and.w	r2, r3, #15
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	4413      	add	r3, r2
 8004798:	3304      	adds	r3, #4
 800479a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80047a2:	78fb      	ldrb	r3, [r7, #3]
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_PCD_EP_Close+0x6e>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e00e      	b.n	80047da <HAL_PCD_EP_Close+0x8c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68f9      	ldr	r1, [r7, #12]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f003 ffba 	bl	8008744 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b086      	sub	sp, #24
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	460b      	mov	r3, r1
 80047f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047f2:	7afb      	ldrb	r3, [r7, #11]
 80047f4:	f003 020f 	and.w	r2, r3, #15
 80047f8:	4613      	mov	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	3304      	adds	r3, #4
 800480a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2200      	movs	r2, #0
 800481c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2200      	movs	r2, #0
 8004822:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004824:	7afb      	ldrb	r3, [r7, #11]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	b2da      	uxtb	r2, r3
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d102      	bne.n	800483e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800483e:	7afb      	ldrb	r3, [r7, #11]
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	2b00      	cmp	r3, #0
 8004846:	d109      	bne.n	800485c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	461a      	mov	r2, r3
 8004854:	6979      	ldr	r1, [r7, #20]
 8004856:	f004 fa99 	bl	8008d8c <USB_EP0StartXfer>
 800485a:	e008      	b.n	800486e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	6979      	ldr	r1, [r7, #20]
 800486a:	f004 f847 	bl	80088fc <USB_EPStartXfer>
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	f003 020f 	and.w	r2, r3, #15
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800489a:	681b      	ldr	r3, [r3, #0]
}
 800489c:	4618      	mov	r0, r3
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	607a      	str	r2, [r7, #4]
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	460b      	mov	r3, r1
 80048b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048b8:	7afb      	ldrb	r3, [r7, #11]
 80048ba:	f003 020f 	and.w	r2, r3, #15
 80048be:	4613      	mov	r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	3338      	adds	r3, #56	; 0x38
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	3304      	adds	r3, #4
 80048ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2200      	movs	r2, #0
 80048e0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2201      	movs	r2, #1
 80048e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048e8:	7afb      	ldrb	r3, [r7, #11]
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d102      	bne.n	8004902 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004902:	7afb      	ldrb	r3, [r7, #11]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	2b00      	cmp	r3, #0
 800490a:	d109      	bne.n	8004920 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	6979      	ldr	r1, [r7, #20]
 800491a:	f004 fa37 	bl	8008d8c <USB_EP0StartXfer>
 800491e:	e008      	b.n	8004932 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6818      	ldr	r0, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	461a      	mov	r2, r3
 800492c:	6979      	ldr	r1, [r7, #20]
 800492e:	f003 ffe5 	bl	80088fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	f003 020f 	and.w	r2, r3, #15
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	429a      	cmp	r2, r3
 8004954:	d901      	bls.n	800495a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e050      	b.n	80049fc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800495a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800495e:	2b00      	cmp	r3, #0
 8004960:	da0f      	bge.n	8004982 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	f003 020f 	and.w	r2, r3, #15
 8004968:	4613      	mov	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4413      	add	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	3338      	adds	r3, #56	; 0x38
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	4413      	add	r3, r2
 8004976:	3304      	adds	r3, #4
 8004978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	705a      	strb	r2, [r3, #1]
 8004980:	e00d      	b.n	800499e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	4613      	mov	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	4413      	add	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	4413      	add	r3, r2
 8004994:	3304      	adds	r3, #4
 8004996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_PCD_EP_SetStall+0x82>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e01e      	b.n	80049fc <HAL_PCD_EP_SetStall+0xc0>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68f9      	ldr	r1, [r7, #12]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f004 fc75 	bl	80092bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	f003 030f 	and.w	r3, r3, #15
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10a      	bne.n	80049f2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6818      	ldr	r0, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	b2d9      	uxtb	r1, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80049ec:	461a      	mov	r2, r3
 80049ee:	f004 fe65 	bl	80096bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	f003 020f 	and.w	r2, r3, #15
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d901      	bls.n	8004a22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e042      	b.n	8004aa8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	da0f      	bge.n	8004a4a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	f003 020f 	and.w	r2, r3, #15
 8004a30:	4613      	mov	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	3338      	adds	r3, #56	; 0x38
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3304      	adds	r3, #4
 8004a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	705a      	strb	r2, [r3, #1]
 8004a48:	e00f      	b.n	8004a6a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a4a:	78fb      	ldrb	r3, [r7, #3]
 8004a4c:	f003 020f 	and.w	r2, r3, #15
 8004a50:	4613      	mov	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	4413      	add	r3, r2
 8004a60:	3304      	adds	r3, #4
 8004a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_PCD_EP_ClrStall+0x86>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e00e      	b.n	8004aa8 <HAL_PCD_EP_ClrStall+0xa4>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68f9      	ldr	r1, [r7, #12]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f004 fc7d 	bl	8009398 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	da0c      	bge.n	8004ade <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	f003 020f 	and.w	r2, r3, #15
 8004aca:	4613      	mov	r3, r2
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	4413      	add	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	3338      	adds	r3, #56	; 0x38
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3304      	adds	r3, #4
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	e00c      	b.n	8004af8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ade:	78fb      	ldrb	r3, [r7, #3]
 8004ae0:	f003 020f 	and.w	r2, r3, #15
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	4413      	add	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	4413      	add	r3, r2
 8004af4:	3304      	adds	r3, #4
 8004af6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68f9      	ldr	r1, [r7, #12]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f004 fa9c 	bl	800903c <USB_EPStopXfer>
 8004b04:	4603      	mov	r3, r0
 8004b06:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004b08:	7afb      	ldrb	r3, [r7, #11]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b08a      	sub	sp, #40	; 0x28
 8004b16:	af02      	add	r7, sp, #8
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	3338      	adds	r3, #56	; 0x38
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	4413      	add	r3, r2
 8004b36:	3304      	adds	r3, #4
 8004b38:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a1a      	ldr	r2, [r3, #32]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d901      	bls.n	8004b4a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e06c      	b.n	8004c24 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d902      	bls.n	8004b66 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	3303      	adds	r3, #3
 8004b6a:	089b      	lsrs	r3, r3, #2
 8004b6c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b6e:	e02b      	b.n	8004bc8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	699a      	ldr	r2, [r3, #24]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d902      	bls.n	8004b8c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	3303      	adds	r3, #3
 8004b90:	089b      	lsrs	r3, r3, #2
 8004b92:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6919      	ldr	r1, [r3, #16]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	4603      	mov	r3, r0
 8004baa:	6978      	ldr	r0, [r7, #20]
 8004bac:	f004 faf0 	bl	8009190 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	441a      	add	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a1a      	ldr	r2, [r3, #32]
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	441a      	add	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d809      	bhi.n	8004bf2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a1a      	ldr	r2, [r3, #32]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d203      	bcs.n	8004bf2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1be      	bne.n	8004b70 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d811      	bhi.n	8004c22 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	2201      	movs	r2, #1
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	43db      	mvns	r3, r3
 8004c18:	6939      	ldr	r1, [r7, #16]
 8004c1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c1e:	4013      	ands	r3, r2
 8004c20:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3720      	adds	r7, #32
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	333c      	adds	r3, #60	; 0x3c
 8004c44:	3304      	adds	r3, #4
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d17b      	bne.n	8004d5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d015      	beq.n	8004c98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	4a61      	ldr	r2, [pc, #388]	; (8004df4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	f240 80b9 	bls.w	8004de8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80b3 	beq.w	8004de8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c94:	6093      	str	r3, [r2, #8]
 8004c96:	e0a7      	b.n	8004de8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cae:	461a      	mov	r2, r3
 8004cb0:	2320      	movs	r3, #32
 8004cb2:	6093      	str	r3, [r2, #8]
 8004cb4:	e098      	b.n	8004de8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f040 8093 	bne.w	8004de8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	4a4b      	ldr	r2, [pc, #300]	; (8004df4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d90f      	bls.n	8004cea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce6:	6093      	str	r3, [r2, #8]
 8004ce8:	e07e      	b.n	8004de8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	4613      	mov	r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	69da      	ldr	r2, [r3, #28]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	0159      	lsls	r1, r3, #5
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	440b      	add	r3, r1
 8004d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d16:	1ad2      	subs	r2, r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d114      	bne.n	8004d4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d34:	461a      	mov	r2, r3
 8004d36:	2101      	movs	r1, #1
 8004d38:	f004 fcc0 	bl	80096bc <USB_EP0_OutStart>
 8004d3c:	e006      	b.n	8004d4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	441a      	add	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	4619      	mov	r1, r3
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f006 ff0c 	bl	800bb70 <HAL_PCD_DataOutStageCallback>
 8004d58:	e046      	b.n	8004de8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d124      	bne.n	8004dac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	461a      	mov	r2, r3
 8004d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d7e:	6093      	str	r3, [r2, #8]
 8004d80:	e032      	b.n	8004de8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2320      	movs	r3, #32
 8004d9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	4619      	mov	r1, r3
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f006 fee3 	bl	800bb70 <HAL_PCD_DataOutStageCallback>
 8004daa:	e01d      	b.n	8004de8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d114      	bne.n	8004ddc <PCD_EP_OutXfrComplete_int+0x1b0>
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	4613      	mov	r3, r2
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d108      	bne.n	8004ddc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	f004 fc70 	bl	80096bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	4619      	mov	r1, r3
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f006 fec4 	bl	800bb70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3720      	adds	r7, #32
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	4f54300a 	.word	0x4f54300a
 8004df8:	4f54310a 	.word	0x4f54310a

08004dfc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	333c      	adds	r3, #60	; 0x3c
 8004e14:	3304      	adds	r3, #4
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d90e      	bls.n	8004e50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d009      	beq.n	8004e50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e48:	461a      	mov	r2, r3
 8004e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f006 fe7b 	bl	800bb4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4a0a      	ldr	r2, [pc, #40]	; (8004e84 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d90c      	bls.n	8004e78 <PCD_EP_OutSetupPacket_int+0x7c>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d108      	bne.n	8004e78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e70:	461a      	mov	r2, r3
 8004e72:	2101      	movs	r1, #1
 8004e74:	f004 fc22 	bl	80096bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	4f54300a 	.word	0x4f54300a

08004e88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	70fb      	strb	r3, [r7, #3]
 8004e94:	4613      	mov	r3, r2
 8004e96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d107      	bne.n	8004eb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004ea6:	883b      	ldrh	r3, [r7, #0]
 8004ea8:	0419      	lsls	r1, r3, #16
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	629a      	str	r2, [r3, #40]	; 0x28
 8004eb4:	e028      	b.n	8004f08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	0c1b      	lsrs	r3, r3, #16
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	73fb      	strb	r3, [r7, #15]
 8004ec8:	e00d      	b.n	8004ee6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
 8004ed0:	3340      	adds	r3, #64	; 0x40
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	0c1b      	lsrs	r3, r3, #16
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	4413      	add	r3, r2
 8004ede:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	73fb      	strb	r3, [r7, #15]
 8004ee6:	7bfa      	ldrb	r2, [r7, #15]
 8004ee8:	78fb      	ldrb	r3, [r7, #3]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d3ec      	bcc.n	8004eca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004ef0:	883b      	ldrh	r3, [r7, #0]
 8004ef2:	0418      	lsls	r0, r3, #16
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6819      	ldr	r1, [r3, #0]
 8004ef8:	78fb      	ldrb	r3, [r7, #3]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	4302      	orrs	r2, r0
 8004f00:	3340      	adds	r3, #64	; 0x40
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	887a      	ldrh	r2, [r7, #2]
 8004f28:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e267      	b.n	8005432 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d075      	beq.n	800505a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f6e:	4b88      	ldr	r3, [pc, #544]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 030c 	and.w	r3, r3, #12
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d00c      	beq.n	8004f94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f7a:	4b85      	ldr	r3, [pc, #532]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	d112      	bne.n	8004fac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f86:	4b82      	ldr	r3, [pc, #520]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f92:	d10b      	bne.n	8004fac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f94:	4b7e      	ldr	r3, [pc, #504]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d05b      	beq.n	8005058 <HAL_RCC_OscConfig+0x108>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d157      	bne.n	8005058 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e242      	b.n	8005432 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb4:	d106      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x74>
 8004fb6:	4b76      	ldr	r3, [pc, #472]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a75      	ldr	r2, [pc, #468]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	e01d      	b.n	8005000 <HAL_RCC_OscConfig+0xb0>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fcc:	d10c      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x98>
 8004fce:	4b70      	ldr	r3, [pc, #448]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a6f      	ldr	r2, [pc, #444]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8004fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	4b6d      	ldr	r3, [pc, #436]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a6c      	ldr	r2, [pc, #432]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8004fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	e00b      	b.n	8005000 <HAL_RCC_OscConfig+0xb0>
 8004fe8:	4b69      	ldr	r3, [pc, #420]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a68      	ldr	r2, [pc, #416]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8004fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	4b66      	ldr	r3, [pc, #408]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a65      	ldr	r2, [pc, #404]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8004ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d013      	beq.n	8005030 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005008:	f7fc f860 	bl	80010cc <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005010:	f7fc f85c 	bl	80010cc <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b64      	cmp	r3, #100	; 0x64
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e207      	b.n	8005432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005022:	4b5b      	ldr	r3, [pc, #364]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0f0      	beq.n	8005010 <HAL_RCC_OscConfig+0xc0>
 800502e:	e014      	b.n	800505a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005030:	f7fc f84c 	bl	80010cc <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005038:	f7fc f848 	bl	80010cc <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b64      	cmp	r3, #100	; 0x64
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e1f3      	b.n	8005432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800504a:	4b51      	ldr	r3, [pc, #324]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f0      	bne.n	8005038 <HAL_RCC_OscConfig+0xe8>
 8005056:	e000      	b.n	800505a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d063      	beq.n	800512e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005066:	4b4a      	ldr	r3, [pc, #296]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 030c 	and.w	r3, r3, #12
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00b      	beq.n	800508a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005072:	4b47      	ldr	r3, [pc, #284]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800507a:	2b08      	cmp	r3, #8
 800507c:	d11c      	bne.n	80050b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800507e:	4b44      	ldr	r3, [pc, #272]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d116      	bne.n	80050b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800508a:	4b41      	ldr	r3, [pc, #260]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <HAL_RCC_OscConfig+0x152>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d001      	beq.n	80050a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e1c7      	b.n	8005432 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a2:	4b3b      	ldr	r3, [pc, #236]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	4937      	ldr	r1, [pc, #220]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050b6:	e03a      	b.n	800512e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d020      	beq.n	8005102 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050c0:	4b34      	ldr	r3, [pc, #208]	; (8005194 <HAL_RCC_OscConfig+0x244>)
 80050c2:	2201      	movs	r2, #1
 80050c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c6:	f7fc f801 	bl	80010cc <HAL_GetTick>
 80050ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ce:	f7fb fffd 	bl	80010cc <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e1a8      	b.n	8005432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e0:	4b2b      	ldr	r3, [pc, #172]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f0      	beq.n	80050ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ec:	4b28      	ldr	r3, [pc, #160]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	4925      	ldr	r1, [pc, #148]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	600b      	str	r3, [r1, #0]
 8005100:	e015      	b.n	800512e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005102:	4b24      	ldr	r3, [pc, #144]	; (8005194 <HAL_RCC_OscConfig+0x244>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005108:	f7fb ffe0 	bl	80010cc <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005110:	f7fb ffdc 	bl	80010cc <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e187      	b.n	8005432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005122:	4b1b      	ldr	r3, [pc, #108]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d036      	beq.n	80051a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d016      	beq.n	8005170 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005142:	4b15      	ldr	r3, [pc, #84]	; (8005198 <HAL_RCC_OscConfig+0x248>)
 8005144:	2201      	movs	r2, #1
 8005146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005148:	f7fb ffc0 	bl	80010cc <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005150:	f7fb ffbc 	bl	80010cc <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e167      	b.n	8005432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005162:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <HAL_RCC_OscConfig+0x240>)
 8005164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0f0      	beq.n	8005150 <HAL_RCC_OscConfig+0x200>
 800516e:	e01b      	b.n	80051a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005170:	4b09      	ldr	r3, [pc, #36]	; (8005198 <HAL_RCC_OscConfig+0x248>)
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005176:	f7fb ffa9 	bl	80010cc <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800517c:	e00e      	b.n	800519c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800517e:	f7fb ffa5 	bl	80010cc <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d907      	bls.n	800519c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e150      	b.n	8005432 <HAL_RCC_OscConfig+0x4e2>
 8005190:	40023800 	.word	0x40023800
 8005194:	42470000 	.word	0x42470000
 8005198:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800519c:	4b88      	ldr	r3, [pc, #544]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 800519e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1ea      	bne.n	800517e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 8097 	beq.w	80052e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051b6:	2300      	movs	r3, #0
 80051b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ba:	4b81      	ldr	r3, [pc, #516]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10f      	bne.n	80051e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051c6:	2300      	movs	r3, #0
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	4b7d      	ldr	r3, [pc, #500]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	4a7c      	ldr	r2, [pc, #496]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 80051d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d4:	6413      	str	r3, [r2, #64]	; 0x40
 80051d6:	4b7a      	ldr	r3, [pc, #488]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051e2:	2301      	movs	r3, #1
 80051e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e6:	4b77      	ldr	r3, [pc, #476]	; (80053c4 <HAL_RCC_OscConfig+0x474>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d118      	bne.n	8005224 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051f2:	4b74      	ldr	r3, [pc, #464]	; (80053c4 <HAL_RCC_OscConfig+0x474>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a73      	ldr	r2, [pc, #460]	; (80053c4 <HAL_RCC_OscConfig+0x474>)
 80051f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051fe:	f7fb ff65 	bl	80010cc <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005206:	f7fb ff61 	bl	80010cc <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e10c      	b.n	8005432 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005218:	4b6a      	ldr	r3, [pc, #424]	; (80053c4 <HAL_RCC_OscConfig+0x474>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f0      	beq.n	8005206 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d106      	bne.n	800523a <HAL_RCC_OscConfig+0x2ea>
 800522c:	4b64      	ldr	r3, [pc, #400]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005230:	4a63      	ldr	r2, [pc, #396]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	6713      	str	r3, [r2, #112]	; 0x70
 8005238:	e01c      	b.n	8005274 <HAL_RCC_OscConfig+0x324>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2b05      	cmp	r3, #5
 8005240:	d10c      	bne.n	800525c <HAL_RCC_OscConfig+0x30c>
 8005242:	4b5f      	ldr	r3, [pc, #380]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 8005244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005246:	4a5e      	ldr	r2, [pc, #376]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 8005248:	f043 0304 	orr.w	r3, r3, #4
 800524c:	6713      	str	r3, [r2, #112]	; 0x70
 800524e:	4b5c      	ldr	r3, [pc, #368]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 8005250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005252:	4a5b      	ldr	r2, [pc, #364]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 8005254:	f043 0301 	orr.w	r3, r3, #1
 8005258:	6713      	str	r3, [r2, #112]	; 0x70
 800525a:	e00b      	b.n	8005274 <HAL_RCC_OscConfig+0x324>
 800525c:	4b58      	ldr	r3, [pc, #352]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 800525e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005260:	4a57      	ldr	r2, [pc, #348]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 8005262:	f023 0301 	bic.w	r3, r3, #1
 8005266:	6713      	str	r3, [r2, #112]	; 0x70
 8005268:	4b55      	ldr	r3, [pc, #340]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 800526a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526c:	4a54      	ldr	r2, [pc, #336]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 800526e:	f023 0304 	bic.w	r3, r3, #4
 8005272:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d015      	beq.n	80052a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527c:	f7fb ff26 	bl	80010cc <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005282:	e00a      	b.n	800529a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005284:	f7fb ff22 	bl	80010cc <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005292:	4293      	cmp	r3, r2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e0cb      	b.n	8005432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800529a:	4b49      	ldr	r3, [pc, #292]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 800529c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0ee      	beq.n	8005284 <HAL_RCC_OscConfig+0x334>
 80052a6:	e014      	b.n	80052d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a8:	f7fb ff10 	bl	80010cc <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ae:	e00a      	b.n	80052c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b0:	f7fb ff0c 	bl	80010cc <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80052be:	4293      	cmp	r3, r2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e0b5      	b.n	8005432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c6:	4b3e      	ldr	r3, [pc, #248]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 80052c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1ee      	bne.n	80052b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d105      	bne.n	80052e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d8:	4b39      	ldr	r3, [pc, #228]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	4a38      	ldr	r2, [pc, #224]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 80052de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 80a1 	beq.w	8005430 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052ee:	4b34      	ldr	r3, [pc, #208]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 030c 	and.w	r3, r3, #12
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d05c      	beq.n	80053b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d141      	bne.n	8005386 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005302:	4b31      	ldr	r3, [pc, #196]	; (80053c8 <HAL_RCC_OscConfig+0x478>)
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005308:	f7fb fee0 	bl	80010cc <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005310:	f7fb fedc 	bl	80010cc <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e087      	b.n	8005432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005322:	4b27      	ldr	r3, [pc, #156]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f0      	bne.n	8005310 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69da      	ldr	r2, [r3, #28]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	019b      	lsls	r3, r3, #6
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	085b      	lsrs	r3, r3, #1
 8005346:	3b01      	subs	r3, #1
 8005348:	041b      	lsls	r3, r3, #16
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	061b      	lsls	r3, r3, #24
 8005352:	491b      	ldr	r1, [pc, #108]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 8005354:	4313      	orrs	r3, r2
 8005356:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005358:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <HAL_RCC_OscConfig+0x478>)
 800535a:	2201      	movs	r2, #1
 800535c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535e:	f7fb feb5 	bl	80010cc <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005366:	f7fb feb1 	bl	80010cc <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e05c      	b.n	8005432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005378:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0f0      	beq.n	8005366 <HAL_RCC_OscConfig+0x416>
 8005384:	e054      	b.n	8005430 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005386:	4b10      	ldr	r3, [pc, #64]	; (80053c8 <HAL_RCC_OscConfig+0x478>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538c:	f7fb fe9e 	bl	80010cc <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005394:	f7fb fe9a 	bl	80010cc <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e045      	b.n	8005432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a6:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <HAL_RCC_OscConfig+0x470>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1f0      	bne.n	8005394 <HAL_RCC_OscConfig+0x444>
 80053b2:	e03d      	b.n	8005430 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d107      	bne.n	80053cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e038      	b.n	8005432 <HAL_RCC_OscConfig+0x4e2>
 80053c0:	40023800 	.word	0x40023800
 80053c4:	40007000 	.word	0x40007000
 80053c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053cc:	4b1b      	ldr	r3, [pc, #108]	; (800543c <HAL_RCC_OscConfig+0x4ec>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d028      	beq.n	800542c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d121      	bne.n	800542c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d11a      	bne.n	800542c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053fc:	4013      	ands	r3, r2
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005402:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005404:	4293      	cmp	r3, r2
 8005406:	d111      	bne.n	800542c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005412:	085b      	lsrs	r3, r3, #1
 8005414:	3b01      	subs	r3, #1
 8005416:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005418:	429a      	cmp	r2, r3
 800541a:	d107      	bne.n	800542c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005428:	429a      	cmp	r2, r3
 800542a:	d001      	beq.n	8005430 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40023800 	.word	0x40023800

08005440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e0cc      	b.n	80055ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005454:	4b68      	ldr	r3, [pc, #416]	; (80055f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d90c      	bls.n	800547c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005462:	4b65      	ldr	r3, [pc, #404]	; (80055f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800546a:	4b63      	ldr	r3, [pc, #396]	; (80055f8 <HAL_RCC_ClockConfig+0x1b8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d001      	beq.n	800547c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e0b8      	b.n	80055ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d020      	beq.n	80054ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d005      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005494:	4b59      	ldr	r3, [pc, #356]	; (80055fc <HAL_RCC_ClockConfig+0x1bc>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	4a58      	ldr	r2, [pc, #352]	; (80055fc <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800549e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054ac:	4b53      	ldr	r3, [pc, #332]	; (80055fc <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	4a52      	ldr	r2, [pc, #328]	; (80055fc <HAL_RCC_ClockConfig+0x1bc>)
 80054b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054b8:	4b50      	ldr	r3, [pc, #320]	; (80055fc <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	494d      	ldr	r1, [pc, #308]	; (80055fc <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d044      	beq.n	8005560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d107      	bne.n	80054ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054de:	4b47      	ldr	r3, [pc, #284]	; (80055fc <HAL_RCC_ClockConfig+0x1bc>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d119      	bne.n	800551e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e07f      	b.n	80055ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d003      	beq.n	80054fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	d107      	bne.n	800550e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054fe:	4b3f      	ldr	r3, [pc, #252]	; (80055fc <HAL_RCC_ClockConfig+0x1bc>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e06f      	b.n	80055ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800550e:	4b3b      	ldr	r3, [pc, #236]	; (80055fc <HAL_RCC_ClockConfig+0x1bc>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e067      	b.n	80055ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800551e:	4b37      	ldr	r3, [pc, #220]	; (80055fc <HAL_RCC_ClockConfig+0x1bc>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f023 0203 	bic.w	r2, r3, #3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	4934      	ldr	r1, [pc, #208]	; (80055fc <HAL_RCC_ClockConfig+0x1bc>)
 800552c:	4313      	orrs	r3, r2
 800552e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005530:	f7fb fdcc 	bl	80010cc <HAL_GetTick>
 8005534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005536:	e00a      	b.n	800554e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005538:	f7fb fdc8 	bl	80010cc <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	f241 3288 	movw	r2, #5000	; 0x1388
 8005546:	4293      	cmp	r3, r2
 8005548:	d901      	bls.n	800554e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e04f      	b.n	80055ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800554e:	4b2b      	ldr	r3, [pc, #172]	; (80055fc <HAL_RCC_ClockConfig+0x1bc>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 020c 	and.w	r2, r3, #12
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	429a      	cmp	r2, r3
 800555e:	d1eb      	bne.n	8005538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005560:	4b25      	ldr	r3, [pc, #148]	; (80055f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d20c      	bcs.n	8005588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556e:	4b22      	ldr	r3, [pc, #136]	; (80055f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005576:	4b20      	ldr	r3, [pc, #128]	; (80055f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	429a      	cmp	r2, r3
 8005582:	d001      	beq.n	8005588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e032      	b.n	80055ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	d008      	beq.n	80055a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005594:	4b19      	ldr	r3, [pc, #100]	; (80055fc <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	4916      	ldr	r1, [pc, #88]	; (80055fc <HAL_RCC_ClockConfig+0x1bc>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d009      	beq.n	80055c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055b2:	4b12      	ldr	r3, [pc, #72]	; (80055fc <HAL_RCC_ClockConfig+0x1bc>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	490e      	ldr	r1, [pc, #56]	; (80055fc <HAL_RCC_ClockConfig+0x1bc>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055c6:	f000 f821 	bl	800560c <HAL_RCC_GetSysClockFreq>
 80055ca:	4602      	mov	r2, r0
 80055cc:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <HAL_RCC_ClockConfig+0x1bc>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	091b      	lsrs	r3, r3, #4
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	490a      	ldr	r1, [pc, #40]	; (8005600 <HAL_RCC_ClockConfig+0x1c0>)
 80055d8:	5ccb      	ldrb	r3, [r1, r3]
 80055da:	fa22 f303 	lsr.w	r3, r2, r3
 80055de:	4a09      	ldr	r2, [pc, #36]	; (8005604 <HAL_RCC_ClockConfig+0x1c4>)
 80055e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055e2:	4b09      	ldr	r3, [pc, #36]	; (8005608 <HAL_RCC_ClockConfig+0x1c8>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fb fd2c 	bl	8001044 <HAL_InitTick>

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	40023c00 	.word	0x40023c00
 80055fc:	40023800 	.word	0x40023800
 8005600:	0800c184 	.word	0x0800c184
 8005604:	20000000 	.word	0x20000000
 8005608:	20000004 	.word	0x20000004

0800560c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800560c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005610:	b094      	sub	sp, #80	; 0x50
 8005612:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	647b      	str	r3, [r7, #68]	; 0x44
 8005618:	2300      	movs	r3, #0
 800561a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800561c:	2300      	movs	r3, #0
 800561e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005624:	4b79      	ldr	r3, [pc, #484]	; (800580c <HAL_RCC_GetSysClockFreq+0x200>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 030c 	and.w	r3, r3, #12
 800562c:	2b08      	cmp	r3, #8
 800562e:	d00d      	beq.n	800564c <HAL_RCC_GetSysClockFreq+0x40>
 8005630:	2b08      	cmp	r3, #8
 8005632:	f200 80e1 	bhi.w	80057f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <HAL_RCC_GetSysClockFreq+0x34>
 800563a:	2b04      	cmp	r3, #4
 800563c:	d003      	beq.n	8005646 <HAL_RCC_GetSysClockFreq+0x3a>
 800563e:	e0db      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005640:	4b73      	ldr	r3, [pc, #460]	; (8005810 <HAL_RCC_GetSysClockFreq+0x204>)
 8005642:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005644:	e0db      	b.n	80057fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005646:	4b73      	ldr	r3, [pc, #460]	; (8005814 <HAL_RCC_GetSysClockFreq+0x208>)
 8005648:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800564a:	e0d8      	b.n	80057fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800564c:	4b6f      	ldr	r3, [pc, #444]	; (800580c <HAL_RCC_GetSysClockFreq+0x200>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005654:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005656:	4b6d      	ldr	r3, [pc, #436]	; (800580c <HAL_RCC_GetSysClockFreq+0x200>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d063      	beq.n	800572a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005662:	4b6a      	ldr	r3, [pc, #424]	; (800580c <HAL_RCC_GetSysClockFreq+0x200>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	099b      	lsrs	r3, r3, #6
 8005668:	2200      	movs	r2, #0
 800566a:	63bb      	str	r3, [r7, #56]	; 0x38
 800566c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800566e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005674:	633b      	str	r3, [r7, #48]	; 0x30
 8005676:	2300      	movs	r3, #0
 8005678:	637b      	str	r3, [r7, #52]	; 0x34
 800567a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800567e:	4622      	mov	r2, r4
 8005680:	462b      	mov	r3, r5
 8005682:	f04f 0000 	mov.w	r0, #0
 8005686:	f04f 0100 	mov.w	r1, #0
 800568a:	0159      	lsls	r1, r3, #5
 800568c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005690:	0150      	lsls	r0, r2, #5
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4621      	mov	r1, r4
 8005698:	1a51      	subs	r1, r2, r1
 800569a:	6139      	str	r1, [r7, #16]
 800569c:	4629      	mov	r1, r5
 800569e:	eb63 0301 	sbc.w	r3, r3, r1
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056b0:	4659      	mov	r1, fp
 80056b2:	018b      	lsls	r3, r1, #6
 80056b4:	4651      	mov	r1, sl
 80056b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056ba:	4651      	mov	r1, sl
 80056bc:	018a      	lsls	r2, r1, #6
 80056be:	4651      	mov	r1, sl
 80056c0:	ebb2 0801 	subs.w	r8, r2, r1
 80056c4:	4659      	mov	r1, fp
 80056c6:	eb63 0901 	sbc.w	r9, r3, r1
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056de:	4690      	mov	r8, r2
 80056e0:	4699      	mov	r9, r3
 80056e2:	4623      	mov	r3, r4
 80056e4:	eb18 0303 	adds.w	r3, r8, r3
 80056e8:	60bb      	str	r3, [r7, #8]
 80056ea:	462b      	mov	r3, r5
 80056ec:	eb49 0303 	adc.w	r3, r9, r3
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056fe:	4629      	mov	r1, r5
 8005700:	024b      	lsls	r3, r1, #9
 8005702:	4621      	mov	r1, r4
 8005704:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005708:	4621      	mov	r1, r4
 800570a:	024a      	lsls	r2, r1, #9
 800570c:	4610      	mov	r0, r2
 800570e:	4619      	mov	r1, r3
 8005710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005712:	2200      	movs	r2, #0
 8005714:	62bb      	str	r3, [r7, #40]	; 0x28
 8005716:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005718:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800571c:	f7fa fd54 	bl	80001c8 <__aeabi_uldivmod>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4613      	mov	r3, r2
 8005726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005728:	e058      	b.n	80057dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800572a:	4b38      	ldr	r3, [pc, #224]	; (800580c <HAL_RCC_GetSysClockFreq+0x200>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	099b      	lsrs	r3, r3, #6
 8005730:	2200      	movs	r2, #0
 8005732:	4618      	mov	r0, r3
 8005734:	4611      	mov	r1, r2
 8005736:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800573a:	623b      	str	r3, [r7, #32]
 800573c:	2300      	movs	r3, #0
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
 8005740:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005744:	4642      	mov	r2, r8
 8005746:	464b      	mov	r3, r9
 8005748:	f04f 0000 	mov.w	r0, #0
 800574c:	f04f 0100 	mov.w	r1, #0
 8005750:	0159      	lsls	r1, r3, #5
 8005752:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005756:	0150      	lsls	r0, r2, #5
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4641      	mov	r1, r8
 800575e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005762:	4649      	mov	r1, r9
 8005764:	eb63 0b01 	sbc.w	fp, r3, r1
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005774:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005778:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800577c:	ebb2 040a 	subs.w	r4, r2, sl
 8005780:	eb63 050b 	sbc.w	r5, r3, fp
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	00eb      	lsls	r3, r5, #3
 800578e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005792:	00e2      	lsls	r2, r4, #3
 8005794:	4614      	mov	r4, r2
 8005796:	461d      	mov	r5, r3
 8005798:	4643      	mov	r3, r8
 800579a:	18e3      	adds	r3, r4, r3
 800579c:	603b      	str	r3, [r7, #0]
 800579e:	464b      	mov	r3, r9
 80057a0:	eb45 0303 	adc.w	r3, r5, r3
 80057a4:	607b      	str	r3, [r7, #4]
 80057a6:	f04f 0200 	mov.w	r2, #0
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057b2:	4629      	mov	r1, r5
 80057b4:	028b      	lsls	r3, r1, #10
 80057b6:	4621      	mov	r1, r4
 80057b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057bc:	4621      	mov	r1, r4
 80057be:	028a      	lsls	r2, r1, #10
 80057c0:	4610      	mov	r0, r2
 80057c2:	4619      	mov	r1, r3
 80057c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c6:	2200      	movs	r2, #0
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	61fa      	str	r2, [r7, #28]
 80057cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057d0:	f7fa fcfa 	bl	80001c8 <__aeabi_uldivmod>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4613      	mov	r3, r2
 80057da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057dc:	4b0b      	ldr	r3, [pc, #44]	; (800580c <HAL_RCC_GetSysClockFreq+0x200>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	0c1b      	lsrs	r3, r3, #16
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	3301      	adds	r3, #1
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80057ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057f6:	e002      	b.n	80057fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057f8:	4b05      	ldr	r3, [pc, #20]	; (8005810 <HAL_RCC_GetSysClockFreq+0x204>)
 80057fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005800:	4618      	mov	r0, r3
 8005802:	3750      	adds	r7, #80	; 0x50
 8005804:	46bd      	mov	sp, r7
 8005806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800580a:	bf00      	nop
 800580c:	40023800 	.word	0x40023800
 8005810:	00f42400 	.word	0x00f42400
 8005814:	007a1200 	.word	0x007a1200

08005818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800581c:	4b03      	ldr	r3, [pc, #12]	; (800582c <HAL_RCC_GetHCLKFreq+0x14>)
 800581e:	681b      	ldr	r3, [r3, #0]
}
 8005820:	4618      	mov	r0, r3
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	20000000 	.word	0x20000000

08005830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005834:	f7ff fff0 	bl	8005818 <HAL_RCC_GetHCLKFreq>
 8005838:	4602      	mov	r2, r0
 800583a:	4b05      	ldr	r3, [pc, #20]	; (8005850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	0a9b      	lsrs	r3, r3, #10
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	4903      	ldr	r1, [pc, #12]	; (8005854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005846:	5ccb      	ldrb	r3, [r1, r3]
 8005848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800584c:	4618      	mov	r0, r3
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40023800 	.word	0x40023800
 8005854:	0800c194 	.word	0x0800c194

08005858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800585c:	f7ff ffdc 	bl	8005818 <HAL_RCC_GetHCLKFreq>
 8005860:	4602      	mov	r2, r0
 8005862:	4b05      	ldr	r3, [pc, #20]	; (8005878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	0b5b      	lsrs	r3, r3, #13
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	4903      	ldr	r1, [pc, #12]	; (800587c <HAL_RCC_GetPCLK2Freq+0x24>)
 800586e:	5ccb      	ldrb	r3, [r1, r3]
 8005870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005874:	4618      	mov	r0, r3
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40023800 	.word	0x40023800
 800587c:	0800c194 	.word	0x0800c194

08005880 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e07b      	b.n	800598a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	2b00      	cmp	r3, #0
 8005898:	d108      	bne.n	80058ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058a2:	d009      	beq.n	80058b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	61da      	str	r2, [r3, #28]
 80058aa:	e005      	b.n	80058b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fb f848 	bl	8000968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	431a      	orrs	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593c:	ea42 0103 	orr.w	r1, r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005944:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	0c1b      	lsrs	r3, r3, #16
 8005956:	f003 0104 	and.w	r1, r3, #4
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	f003 0210 	and.w	r2, r3, #16
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005978:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b088      	sub	sp, #32
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	603b      	str	r3, [r7, #0]
 800599e:	4613      	mov	r3, r2
 80059a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d101      	bne.n	80059b4 <HAL_SPI_Transmit+0x22>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e126      	b.n	8005c02 <HAL_SPI_Transmit+0x270>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059bc:	f7fb fb86 	bl	80010cc <HAL_GetTick>
 80059c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d002      	beq.n	80059d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80059d2:	2302      	movs	r3, #2
 80059d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059d6:	e10b      	b.n	8005bf0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <HAL_SPI_Transmit+0x52>
 80059de:	88fb      	ldrh	r3, [r7, #6]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d102      	bne.n	80059ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059e8:	e102      	b.n	8005bf0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2203      	movs	r2, #3
 80059ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	88fa      	ldrh	r2, [r7, #6]
 8005a02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	88fa      	ldrh	r2, [r7, #6]
 8005a08:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a30:	d10f      	bne.n	8005a52 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5c:	2b40      	cmp	r3, #64	; 0x40
 8005a5e:	d007      	beq.n	8005a70 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a78:	d14b      	bne.n	8005b12 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_SPI_Transmit+0xf6>
 8005a82:	8afb      	ldrh	r3, [r7, #22]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d13e      	bne.n	8005b06 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	881a      	ldrh	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a98:	1c9a      	adds	r2, r3, #2
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005aac:	e02b      	b.n	8005b06 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d112      	bne.n	8005ae2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	881a      	ldrh	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005acc:	1c9a      	adds	r2, r3, #2
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ae0:	e011      	b.n	8005b06 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ae2:	f7fb faf3 	bl	80010cc <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d803      	bhi.n	8005afa <HAL_SPI_Transmit+0x168>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af8:	d102      	bne.n	8005b00 <HAL_SPI_Transmit+0x16e>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d102      	bne.n	8005b06 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b04:	e074      	b.n	8005bf0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1ce      	bne.n	8005aae <HAL_SPI_Transmit+0x11c>
 8005b10:	e04c      	b.n	8005bac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <HAL_SPI_Transmit+0x18e>
 8005b1a:	8afb      	ldrh	r3, [r7, #22]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d140      	bne.n	8005ba2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	330c      	adds	r3, #12
 8005b2a:	7812      	ldrb	r2, [r2, #0]
 8005b2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b46:	e02c      	b.n	8005ba2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d113      	bne.n	8005b7e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	330c      	adds	r3, #12
 8005b60:	7812      	ldrb	r2, [r2, #0]
 8005b62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b7c:	e011      	b.n	8005ba2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b7e:	f7fb faa5 	bl	80010cc <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d803      	bhi.n	8005b96 <HAL_SPI_Transmit+0x204>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b94:	d102      	bne.n	8005b9c <HAL_SPI_Transmit+0x20a>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d102      	bne.n	8005ba2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ba0:	e026      	b.n	8005bf0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1cd      	bne.n	8005b48 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	6839      	ldr	r1, [r7, #0]
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 fce9 	bl	8006588 <SPI_EndRxTxTransaction>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bca:	2300      	movs	r3, #0
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	613b      	str	r3, [r7, #16]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	77fb      	strb	r3, [r7, #31]
 8005bec:	e000      	b.n	8005bf0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005bee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c00:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3720      	adds	r7, #32
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b088      	sub	sp, #32
 8005c0e:	af02      	add	r7, sp, #8
 8005c10:	60f8      	str	r0, [r7, #12]
 8005c12:	60b9      	str	r1, [r7, #8]
 8005c14:	603b      	str	r3, [r7, #0]
 8005c16:	4613      	mov	r3, r2
 8005c18:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c26:	d112      	bne.n	8005c4e <HAL_SPI_Receive+0x44>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10e      	bne.n	8005c4e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2204      	movs	r2, #4
 8005c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c38:	88fa      	ldrh	r2, [r7, #6]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f8f1 	bl	8005e2c <HAL_SPI_TransmitReceive>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	e0ea      	b.n	8005e24 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d101      	bne.n	8005c5c <HAL_SPI_Receive+0x52>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e0e3      	b.n	8005e24 <HAL_SPI_Receive+0x21a>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c64:	f7fb fa32 	bl	80010cc <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d002      	beq.n	8005c7c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005c76:	2302      	movs	r3, #2
 8005c78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c7a:	e0ca      	b.n	8005e12 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_SPI_Receive+0x7e>
 8005c82:	88fb      	ldrh	r3, [r7, #6]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d102      	bne.n	8005c8e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c8c:	e0c1      	b.n	8005e12 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2204      	movs	r2, #4
 8005c92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	88fa      	ldrh	r2, [r7, #6]
 8005ca6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	88fa      	ldrh	r2, [r7, #6]
 8005cac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd4:	d10f      	bne.n	8005cf6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cf4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d00:	2b40      	cmp	r3, #64	; 0x40
 8005d02:	d007      	beq.n	8005d14 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d12:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d162      	bne.n	8005de2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d1c:	e02e      	b.n	8005d7c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d115      	bne.n	8005d58 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f103 020c 	add.w	r2, r3, #12
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	7812      	ldrb	r2, [r2, #0]
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d56:	e011      	b.n	8005d7c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d58:	f7fb f9b8 	bl	80010cc <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d803      	bhi.n	8005d70 <HAL_SPI_Receive+0x166>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6e:	d102      	bne.n	8005d76 <HAL_SPI_Receive+0x16c>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d102      	bne.n	8005d7c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d7a:	e04a      	b.n	8005e12 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1cb      	bne.n	8005d1e <HAL_SPI_Receive+0x114>
 8005d86:	e031      	b.n	8005dec <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d113      	bne.n	8005dbe <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	b292      	uxth	r2, r2
 8005da2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	1c9a      	adds	r2, r3, #2
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dbc:	e011      	b.n	8005de2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dbe:	f7fb f985 	bl	80010cc <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d803      	bhi.n	8005dd6 <HAL_SPI_Receive+0x1cc>
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd4:	d102      	bne.n	8005ddc <HAL_SPI_Receive+0x1d2>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d102      	bne.n	8005de2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005de0:	e017      	b.n	8005e12 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1cd      	bne.n	8005d88 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	6839      	ldr	r1, [r7, #0]
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 fb63 	bl	80064bc <SPI_EndRxTransaction>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	75fb      	strb	r3, [r7, #23]
 8005e0e:	e000      	b.n	8005e12 <HAL_SPI_Receive+0x208>
  }

error :
 8005e10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08c      	sub	sp, #48	; 0x30
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_SPI_TransmitReceive+0x26>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e18a      	b.n	8006168 <HAL_SPI_TransmitReceive+0x33c>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e5a:	f7fb f937 	bl	80010cc <HAL_GetTick>
 8005e5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e70:	887b      	ldrh	r3, [r7, #2]
 8005e72:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d00f      	beq.n	8005e9c <HAL_SPI_TransmitReceive+0x70>
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e82:	d107      	bne.n	8005e94 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d103      	bne.n	8005e94 <HAL_SPI_TransmitReceive+0x68>
 8005e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d003      	beq.n	8005e9c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e94:	2302      	movs	r3, #2
 8005e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e9a:	e15b      	b.n	8006154 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d005      	beq.n	8005eae <HAL_SPI_TransmitReceive+0x82>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <HAL_SPI_TransmitReceive+0x82>
 8005ea8:	887b      	ldrh	r3, [r7, #2]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005eb4:	e14e      	b.n	8006154 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d003      	beq.n	8005eca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2205      	movs	r2, #5
 8005ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	887a      	ldrh	r2, [r7, #2]
 8005eda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	887a      	ldrh	r2, [r7, #2]
 8005ee0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	887a      	ldrh	r2, [r7, #2]
 8005eec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	887a      	ldrh	r2, [r7, #2]
 8005ef2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0a:	2b40      	cmp	r3, #64	; 0x40
 8005f0c:	d007      	beq.n	8005f1e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f26:	d178      	bne.n	800601a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <HAL_SPI_TransmitReceive+0x10a>
 8005f30:	8b7b      	ldrh	r3, [r7, #26]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d166      	bne.n	8006004 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	881a      	ldrh	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	1c9a      	adds	r2, r3, #2
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f5a:	e053      	b.n	8006004 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d11b      	bne.n	8005fa2 <HAL_SPI_TransmitReceive+0x176>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d016      	beq.n	8005fa2 <HAL_SPI_TransmitReceive+0x176>
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d113      	bne.n	8005fa2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	881a      	ldrh	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8a:	1c9a      	adds	r2, r3, #2
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d119      	bne.n	8005fe4 <HAL_SPI_TransmitReceive+0x1b8>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d014      	beq.n	8005fe4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	b292      	uxth	r2, r2
 8005fc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	1c9a      	adds	r2, r3, #2
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fe4:	f7fb f872 	bl	80010cc <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d807      	bhi.n	8006004 <HAL_SPI_TransmitReceive+0x1d8>
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffa:	d003      	beq.n	8006004 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006002:	e0a7      	b.n	8006154 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1a6      	bne.n	8005f5c <HAL_SPI_TransmitReceive+0x130>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006012:	b29b      	uxth	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1a1      	bne.n	8005f5c <HAL_SPI_TransmitReceive+0x130>
 8006018:	e07c      	b.n	8006114 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <HAL_SPI_TransmitReceive+0x1fc>
 8006022:	8b7b      	ldrh	r3, [r7, #26]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d16b      	bne.n	8006100 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	7812      	ldrb	r2, [r2, #0]
 8006034:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006044:	b29b      	uxth	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	b29a      	uxth	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800604e:	e057      	b.n	8006100 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b02      	cmp	r3, #2
 800605c:	d11c      	bne.n	8006098 <HAL_SPI_TransmitReceive+0x26c>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d017      	beq.n	8006098 <HAL_SPI_TransmitReceive+0x26c>
 8006068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606a:	2b01      	cmp	r3, #1
 800606c:	d114      	bne.n	8006098 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	330c      	adds	r3, #12
 8006078:	7812      	ldrb	r2, [r2, #0]
 800607a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800608a:	b29b      	uxth	r3, r3
 800608c:	3b01      	subs	r3, #1
 800608e:	b29a      	uxth	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d119      	bne.n	80060da <HAL_SPI_TransmitReceive+0x2ae>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d014      	beq.n	80060da <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060d6:	2301      	movs	r3, #1
 80060d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060da:	f7fa fff7 	bl	80010cc <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d803      	bhi.n	80060f2 <HAL_SPI_TransmitReceive+0x2c6>
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f0:	d102      	bne.n	80060f8 <HAL_SPI_TransmitReceive+0x2cc>
 80060f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d103      	bne.n	8006100 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80060fe:	e029      	b.n	8006154 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1a2      	bne.n	8006050 <HAL_SPI_TransmitReceive+0x224>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d19d      	bne.n	8006050 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006116:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fa35 	bl	8006588 <SPI_EndRxTxTransaction>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d006      	beq.n	8006132 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2220      	movs	r2, #32
 800612e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006130:	e010      	b.n	8006154 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10b      	bne.n	8006152 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	617b      	str	r3, [r7, #20]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	e000      	b.n	8006154 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006152:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006164:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006168:	4618      	mov	r0, r3
 800616a:	3730      	adds	r7, #48	; 0x30
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	099b      	lsrs	r3, r3, #6
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10f      	bne.n	80061b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	099b      	lsrs	r3, r3, #6
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d004      	beq.n	80061b4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	4798      	blx	r3
    return;
 80061b2:	e0d7      	b.n	8006364 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	085b      	lsrs	r3, r3, #1
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <HAL_SPI_IRQHandler+0x66>
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	09db      	lsrs	r3, r3, #7
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	4798      	blx	r3
    return;
 80061d4:	e0c6      	b.n	8006364 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10c      	bne.n	80061fc <HAL_SPI_IRQHandler+0x8c>
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	099b      	lsrs	r3, r3, #6
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d106      	bne.n	80061fc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	0a1b      	lsrs	r3, r3, #8
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 80b4 	beq.w	8006364 <HAL_SPI_IRQHandler+0x1f4>
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 80ad 	beq.w	8006364 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	099b      	lsrs	r3, r3, #6
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d023      	beq.n	800625e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b03      	cmp	r3, #3
 8006220:	d011      	beq.n	8006246 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006226:	f043 0204 	orr.w	r2, r3, #4
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	617b      	str	r3, [r7, #20]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	e00b      	b.n	800625e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006246:	2300      	movs	r3, #0
 8006248:	613b      	str	r3, [r7, #16]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	613b      	str	r3, [r7, #16]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	693b      	ldr	r3, [r7, #16]
        return;
 800625c:	e082      	b.n	8006364 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d014      	beq.n	8006294 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626e:	f043 0201 	orr.w	r2, r3, #1
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	0a1b      	lsrs	r3, r3, #8
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00c      	beq.n	80062ba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a4:	f043 0208 	orr.w	r2, r3, #8
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80062ac:	2300      	movs	r3, #0
 80062ae:	60bb      	str	r3, [r7, #8]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	60bb      	str	r3, [r7, #8]
 80062b8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d04f      	beq.n	8006362 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062d0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d104      	bne.n	80062ee <HAL_SPI_IRQHandler+0x17e>
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d034      	beq.n	8006358 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0203 	bic.w	r2, r2, #3
 80062fc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006302:	2b00      	cmp	r3, #0
 8006304:	d011      	beq.n	800632a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800630a:	4a18      	ldr	r2, [pc, #96]	; (800636c <HAL_SPI_IRQHandler+0x1fc>)
 800630c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006312:	4618      	mov	r0, r3
 8006314:	f7fb f93a 	bl	800158c <HAL_DMA_Abort_IT>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d005      	beq.n	800632a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006322:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800632e:	2b00      	cmp	r3, #0
 8006330:	d016      	beq.n	8006360 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006336:	4a0d      	ldr	r2, [pc, #52]	; (800636c <HAL_SPI_IRQHandler+0x1fc>)
 8006338:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800633e:	4618      	mov	r0, r3
 8006340:	f7fb f924 	bl	800158c <HAL_DMA_Abort_IT>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006356:	e003      	b.n	8006360 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f809 	bl	8006370 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800635e:	e000      	b.n	8006362 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006360:	bf00      	nop
    return;
 8006362:	bf00      	nop
  }
}
 8006364:	3720      	adds	r7, #32
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	08006385 	.word	0x08006385

08006370 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f7ff ffe6 	bl	8006370 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063a4:	bf00      	nop
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063bc:	f7fa fe86 	bl	80010cc <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c4:	1a9b      	subs	r3, r3, r2
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	4413      	add	r3, r2
 80063ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063cc:	f7fa fe7e 	bl	80010cc <HAL_GetTick>
 80063d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063d2:	4b39      	ldr	r3, [pc, #228]	; (80064b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	015b      	lsls	r3, r3, #5
 80063d8:	0d1b      	lsrs	r3, r3, #20
 80063da:	69fa      	ldr	r2, [r7, #28]
 80063dc:	fb02 f303 	mul.w	r3, r2, r3
 80063e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063e2:	e054      	b.n	800648e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ea:	d050      	beq.n	800648e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063ec:	f7fa fe6e 	bl	80010cc <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	69fa      	ldr	r2, [r7, #28]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d902      	bls.n	8006402 <SPI_WaitFlagStateUntilTimeout+0x56>
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d13d      	bne.n	800647e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006410:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800641a:	d111      	bne.n	8006440 <SPI_WaitFlagStateUntilTimeout+0x94>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006424:	d004      	beq.n	8006430 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800642e:	d107      	bne.n	8006440 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800643e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006448:	d10f      	bne.n	800646a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006468:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e017      	b.n	80064ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	3b01      	subs	r3, #1
 800648c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4013      	ands	r3, r2
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	429a      	cmp	r2, r3
 800649c:	bf0c      	ite	eq
 800649e:	2301      	moveq	r3, #1
 80064a0:	2300      	movne	r3, #0
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	461a      	mov	r2, r3
 80064a6:	79fb      	ldrb	r3, [r7, #7]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d19b      	bne.n	80063e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3720      	adds	r7, #32
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20000000 	.word	0x20000000

080064bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af02      	add	r7, sp, #8
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064d0:	d111      	bne.n	80064f6 <SPI_EndRxTransaction+0x3a>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064da:	d004      	beq.n	80064e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e4:	d107      	bne.n	80064f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064f4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064fe:	d12a      	bne.n	8006556 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006508:	d012      	beq.n	8006530 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2200      	movs	r2, #0
 8006512:	2180      	movs	r1, #128	; 0x80
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f7ff ff49 	bl	80063ac <SPI_WaitFlagStateUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d02d      	beq.n	800657c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006524:	f043 0220 	orr.w	r2, r3, #32
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e026      	b.n	800657e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2200      	movs	r2, #0
 8006538:	2101      	movs	r1, #1
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f7ff ff36 	bl	80063ac <SPI_WaitFlagStateUntilTimeout>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d01a      	beq.n	800657c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654a:	f043 0220 	orr.w	r2, r3, #32
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e013      	b.n	800657e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2200      	movs	r2, #0
 800655e:	2101      	movs	r1, #1
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f7ff ff23 	bl	80063ac <SPI_WaitFlagStateUntilTimeout>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d007      	beq.n	800657c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006570:	f043 0220 	orr.w	r2, r3, #32
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e000      	b.n	800657e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b088      	sub	sp, #32
 800658c:	af02      	add	r7, sp, #8
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006594:	4b1b      	ldr	r3, [pc, #108]	; (8006604 <SPI_EndRxTxTransaction+0x7c>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a1b      	ldr	r2, [pc, #108]	; (8006608 <SPI_EndRxTxTransaction+0x80>)
 800659a:	fba2 2303 	umull	r2, r3, r2, r3
 800659e:	0d5b      	lsrs	r3, r3, #21
 80065a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065a4:	fb02 f303 	mul.w	r3, r2, r3
 80065a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065b2:	d112      	bne.n	80065da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2200      	movs	r2, #0
 80065bc:	2180      	movs	r1, #128	; 0x80
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f7ff fef4 	bl	80063ac <SPI_WaitFlagStateUntilTimeout>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d016      	beq.n	80065f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ce:	f043 0220 	orr.w	r2, r3, #32
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e00f      	b.n	80065fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f0:	2b80      	cmp	r3, #128	; 0x80
 80065f2:	d0f2      	beq.n	80065da <SPI_EndRxTxTransaction+0x52>
 80065f4:	e000      	b.n	80065f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80065f6:	bf00      	nop
  }

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20000000 	.word	0x20000000
 8006608:	165e9f81 	.word	0x165e9f81

0800660c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e041      	b.n	80066a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d106      	bne.n	8006638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7fa fbb2 	bl	8000d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3304      	adds	r3, #4
 8006648:	4619      	mov	r1, r3
 800664a:	4610      	mov	r0, r2
 800664c:	f000 f98a 	bl	8006964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b082      	sub	sp, #8
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e041      	b.n	8006740 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d106      	bne.n	80066d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f839 	bl	8006748 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2202      	movs	r2, #2
 80066da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	3304      	adds	r3, #4
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f000 f93b 	bl	8006964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006776:	2302      	movs	r3, #2
 8006778:	e0ae      	b.n	80068d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b0c      	cmp	r3, #12
 8006786:	f200 809f 	bhi.w	80068c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800678a:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800678c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006790:	080067c5 	.word	0x080067c5
 8006794:	080068c9 	.word	0x080068c9
 8006798:	080068c9 	.word	0x080068c9
 800679c:	080068c9 	.word	0x080068c9
 80067a0:	08006805 	.word	0x08006805
 80067a4:	080068c9 	.word	0x080068c9
 80067a8:	080068c9 	.word	0x080068c9
 80067ac:	080068c9 	.word	0x080068c9
 80067b0:	08006847 	.word	0x08006847
 80067b4:	080068c9 	.word	0x080068c9
 80067b8:	080068c9 	.word	0x080068c9
 80067bc:	080068c9 	.word	0x080068c9
 80067c0:	08006887 	.word	0x08006887
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 f96a 	bl	8006aa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0208 	orr.w	r2, r2, #8
 80067de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	699a      	ldr	r2, [r3, #24]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0204 	bic.w	r2, r2, #4
 80067ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6999      	ldr	r1, [r3, #24]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	691a      	ldr	r2, [r3, #16]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	619a      	str	r2, [r3, #24]
      break;
 8006802:	e064      	b.n	80068ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68b9      	ldr	r1, [r7, #8]
 800680a:	4618      	mov	r0, r3
 800680c:	f000 f9ba 	bl	8006b84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800681e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699a      	ldr	r2, [r3, #24]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800682e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6999      	ldr	r1, [r3, #24]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	021a      	lsls	r2, r3, #8
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	619a      	str	r2, [r3, #24]
      break;
 8006844:	e043      	b.n	80068ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	4618      	mov	r0, r3
 800684e:	f000 fa0f 	bl	8006c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69da      	ldr	r2, [r3, #28]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f042 0208 	orr.w	r2, r2, #8
 8006860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0204 	bic.w	r2, r2, #4
 8006870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69d9      	ldr	r1, [r3, #28]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	691a      	ldr	r2, [r3, #16]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	61da      	str	r2, [r3, #28]
      break;
 8006884:	e023      	b.n	80068ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	4618      	mov	r0, r3
 800688e:	f000 fa63 	bl	8006d58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69da      	ldr	r2, [r3, #28]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69da      	ldr	r2, [r3, #28]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69d9      	ldr	r1, [r3, #28]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	021a      	lsls	r2, r3, #8
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	61da      	str	r2, [r3, #28]
      break;
 80068c6:	e002      	b.n	80068ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	75fb      	strb	r3, [r7, #23]
      break;
 80068cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3718      	adds	r7, #24
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e031      	b.n	800695c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006908:	6839      	ldr	r1, [r7, #0]
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fa7a 	bl	8006e04 <TIM_SlaveTimer_SetConfig>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d009      	beq.n	800692a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e018      	b.n	800695c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006938:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006948:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a40      	ldr	r2, [pc, #256]	; (8006a78 <TIM_Base_SetConfig+0x114>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d013      	beq.n	80069a4 <TIM_Base_SetConfig+0x40>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006982:	d00f      	beq.n	80069a4 <TIM_Base_SetConfig+0x40>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a3d      	ldr	r2, [pc, #244]	; (8006a7c <TIM_Base_SetConfig+0x118>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00b      	beq.n	80069a4 <TIM_Base_SetConfig+0x40>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a3c      	ldr	r2, [pc, #240]	; (8006a80 <TIM_Base_SetConfig+0x11c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d007      	beq.n	80069a4 <TIM_Base_SetConfig+0x40>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a3b      	ldr	r2, [pc, #236]	; (8006a84 <TIM_Base_SetConfig+0x120>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d003      	beq.n	80069a4 <TIM_Base_SetConfig+0x40>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a3a      	ldr	r2, [pc, #232]	; (8006a88 <TIM_Base_SetConfig+0x124>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d108      	bne.n	80069b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a2f      	ldr	r2, [pc, #188]	; (8006a78 <TIM_Base_SetConfig+0x114>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d02b      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c4:	d027      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a2c      	ldr	r2, [pc, #176]	; (8006a7c <TIM_Base_SetConfig+0x118>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d023      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a2b      	ldr	r2, [pc, #172]	; (8006a80 <TIM_Base_SetConfig+0x11c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d01f      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a2a      	ldr	r2, [pc, #168]	; (8006a84 <TIM_Base_SetConfig+0x120>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d01b      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a29      	ldr	r2, [pc, #164]	; (8006a88 <TIM_Base_SetConfig+0x124>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d017      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a28      	ldr	r2, [pc, #160]	; (8006a8c <TIM_Base_SetConfig+0x128>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d013      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a27      	ldr	r2, [pc, #156]	; (8006a90 <TIM_Base_SetConfig+0x12c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d00f      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a26      	ldr	r2, [pc, #152]	; (8006a94 <TIM_Base_SetConfig+0x130>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00b      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a25      	ldr	r2, [pc, #148]	; (8006a98 <TIM_Base_SetConfig+0x134>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d007      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a24      	ldr	r2, [pc, #144]	; (8006a9c <TIM_Base_SetConfig+0x138>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d003      	beq.n	8006a16 <TIM_Base_SetConfig+0xb2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a23      	ldr	r2, [pc, #140]	; (8006aa0 <TIM_Base_SetConfig+0x13c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d108      	bne.n	8006a28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a0a      	ldr	r2, [pc, #40]	; (8006a78 <TIM_Base_SetConfig+0x114>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d003      	beq.n	8006a5c <TIM_Base_SetConfig+0xf8>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a0c      	ldr	r2, [pc, #48]	; (8006a88 <TIM_Base_SetConfig+0x124>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d103      	bne.n	8006a64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	615a      	str	r2, [r3, #20]
}
 8006a6a:	bf00      	nop
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	40010000 	.word	0x40010000
 8006a7c:	40000400 	.word	0x40000400
 8006a80:	40000800 	.word	0x40000800
 8006a84:	40000c00 	.word	0x40000c00
 8006a88:	40010400 	.word	0x40010400
 8006a8c:	40014000 	.word	0x40014000
 8006a90:	40014400 	.word	0x40014400
 8006a94:	40014800 	.word	0x40014800
 8006a98:	40001800 	.word	0x40001800
 8006a9c:	40001c00 	.word	0x40001c00
 8006aa0:	40002000 	.word	0x40002000

08006aa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	f023 0201 	bic.w	r2, r3, #1
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 0303 	bic.w	r3, r3, #3
 8006ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f023 0302 	bic.w	r3, r3, #2
 8006aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a20      	ldr	r2, [pc, #128]	; (8006b7c <TIM_OC1_SetConfig+0xd8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d003      	beq.n	8006b08 <TIM_OC1_SetConfig+0x64>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a1f      	ldr	r2, [pc, #124]	; (8006b80 <TIM_OC1_SetConfig+0xdc>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d10c      	bne.n	8006b22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f023 0308 	bic.w	r3, r3, #8
 8006b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f023 0304 	bic.w	r3, r3, #4
 8006b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a15      	ldr	r2, [pc, #84]	; (8006b7c <TIM_OC1_SetConfig+0xd8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d003      	beq.n	8006b32 <TIM_OC1_SetConfig+0x8e>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a14      	ldr	r2, [pc, #80]	; (8006b80 <TIM_OC1_SetConfig+0xdc>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d111      	bne.n	8006b56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	621a      	str	r2, [r3, #32]
}
 8006b70:	bf00      	nop
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	40010000 	.word	0x40010000
 8006b80:	40010400 	.word	0x40010400

08006b84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	f023 0210 	bic.w	r2, r3, #16
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	021b      	lsls	r3, r3, #8
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f023 0320 	bic.w	r3, r3, #32
 8006bce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a22      	ldr	r2, [pc, #136]	; (8006c68 <TIM_OC2_SetConfig+0xe4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d003      	beq.n	8006bec <TIM_OC2_SetConfig+0x68>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a21      	ldr	r2, [pc, #132]	; (8006c6c <TIM_OC2_SetConfig+0xe8>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d10d      	bne.n	8006c08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a17      	ldr	r2, [pc, #92]	; (8006c68 <TIM_OC2_SetConfig+0xe4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d003      	beq.n	8006c18 <TIM_OC2_SetConfig+0x94>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a16      	ldr	r2, [pc, #88]	; (8006c6c <TIM_OC2_SetConfig+0xe8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d113      	bne.n	8006c40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	621a      	str	r2, [r3, #32]
}
 8006c5a:	bf00      	nop
 8006c5c:	371c      	adds	r7, #28
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	40010000 	.word	0x40010000
 8006c6c:	40010400 	.word	0x40010400

08006c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f023 0303 	bic.w	r3, r3, #3
 8006ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	021b      	lsls	r3, r3, #8
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a21      	ldr	r2, [pc, #132]	; (8006d50 <TIM_OC3_SetConfig+0xe0>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d003      	beq.n	8006cd6 <TIM_OC3_SetConfig+0x66>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a20      	ldr	r2, [pc, #128]	; (8006d54 <TIM_OC3_SetConfig+0xe4>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d10d      	bne.n	8006cf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	021b      	lsls	r3, r3, #8
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a16      	ldr	r2, [pc, #88]	; (8006d50 <TIM_OC3_SetConfig+0xe0>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d003      	beq.n	8006d02 <TIM_OC3_SetConfig+0x92>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a15      	ldr	r2, [pc, #84]	; (8006d54 <TIM_OC3_SetConfig+0xe4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d113      	bne.n	8006d2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	011b      	lsls	r3, r3, #4
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	621a      	str	r2, [r3, #32]
}
 8006d44:	bf00      	nop
 8006d46:	371c      	adds	r7, #28
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	40010000 	.word	0x40010000
 8006d54:	40010400 	.word	0x40010400

08006d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	021b      	lsls	r3, r3, #8
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	031b      	lsls	r3, r3, #12
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a12      	ldr	r2, [pc, #72]	; (8006dfc <TIM_OC4_SetConfig+0xa4>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d003      	beq.n	8006dc0 <TIM_OC4_SetConfig+0x68>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a11      	ldr	r2, [pc, #68]	; (8006e00 <TIM_OC4_SetConfig+0xa8>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d109      	bne.n	8006dd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	019b      	lsls	r3, r3, #6
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	621a      	str	r2, [r3, #32]
}
 8006dee:	bf00      	nop
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	40010000 	.word	0x40010000
 8006e00:	40010400 	.word	0x40010400

08006e04 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e20:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f023 0307 	bic.w	r3, r3, #7
 8006e32:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	2b70      	cmp	r3, #112	; 0x70
 8006e4c:	d01a      	beq.n	8006e84 <TIM_SlaveTimer_SetConfig+0x80>
 8006e4e:	2b70      	cmp	r3, #112	; 0x70
 8006e50:	d860      	bhi.n	8006f14 <TIM_SlaveTimer_SetConfig+0x110>
 8006e52:	2b60      	cmp	r3, #96	; 0x60
 8006e54:	d054      	beq.n	8006f00 <TIM_SlaveTimer_SetConfig+0xfc>
 8006e56:	2b60      	cmp	r3, #96	; 0x60
 8006e58:	d85c      	bhi.n	8006f14 <TIM_SlaveTimer_SetConfig+0x110>
 8006e5a:	2b50      	cmp	r3, #80	; 0x50
 8006e5c:	d046      	beq.n	8006eec <TIM_SlaveTimer_SetConfig+0xe8>
 8006e5e:	2b50      	cmp	r3, #80	; 0x50
 8006e60:	d858      	bhi.n	8006f14 <TIM_SlaveTimer_SetConfig+0x110>
 8006e62:	2b40      	cmp	r3, #64	; 0x40
 8006e64:	d019      	beq.n	8006e9a <TIM_SlaveTimer_SetConfig+0x96>
 8006e66:	2b40      	cmp	r3, #64	; 0x40
 8006e68:	d854      	bhi.n	8006f14 <TIM_SlaveTimer_SetConfig+0x110>
 8006e6a:	2b30      	cmp	r3, #48	; 0x30
 8006e6c:	d055      	beq.n	8006f1a <TIM_SlaveTimer_SetConfig+0x116>
 8006e6e:	2b30      	cmp	r3, #48	; 0x30
 8006e70:	d850      	bhi.n	8006f14 <TIM_SlaveTimer_SetConfig+0x110>
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	d051      	beq.n	8006f1a <TIM_SlaveTimer_SetConfig+0x116>
 8006e76:	2b20      	cmp	r3, #32
 8006e78:	d84c      	bhi.n	8006f14 <TIM_SlaveTimer_SetConfig+0x110>
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d04d      	beq.n	8006f1a <TIM_SlaveTimer_SetConfig+0x116>
 8006e7e:	2b10      	cmp	r3, #16
 8006e80:	d04b      	beq.n	8006f1a <TIM_SlaveTimer_SetConfig+0x116>
 8006e82:	e047      	b.n	8006f14 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6818      	ldr	r0, [r3, #0]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	68d9      	ldr	r1, [r3, #12]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f000 f8a6 	bl	8006fe4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006e98:	e040      	b.n	8006f1c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b05      	cmp	r3, #5
 8006ea0:	d101      	bne.n	8006ea6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e03b      	b.n	8006f1e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6a1a      	ldr	r2, [r3, #32]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 0201 	bic.w	r2, r2, #1
 8006ebc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ecc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	621a      	str	r2, [r3, #32]
      break;
 8006eea:	e017      	b.n	8006f1c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6818      	ldr	r0, [r3, #0]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	6899      	ldr	r1, [r3, #8]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	f000 f814 	bl	8006f26 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006efe:	e00d      	b.n	8006f1c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6818      	ldr	r0, [r3, #0]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	6899      	ldr	r1, [r3, #8]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	f000 f839 	bl	8006f84 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006f12:	e003      	b.n	8006f1c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	75fb      	strb	r3, [r7, #23]
      break;
 8006f18:	e000      	b.n	8006f1c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006f1a:	bf00      	nop
  }

  return status;
 8006f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b087      	sub	sp, #28
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	f023 0201 	bic.w	r2, r3, #1
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	011b      	lsls	r3, r3, #4
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f023 030a 	bic.w	r3, r3, #10
 8006f62:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	621a      	str	r2, [r3, #32]
}
 8006f78:	bf00      	nop
 8006f7a:	371c      	adds	r7, #28
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	f023 0210 	bic.w	r2, r3, #16
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	031b      	lsls	r3, r3, #12
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	621a      	str	r2, [r3, #32]
}
 8006fd8:	bf00      	nop
 8006fda:	371c      	adds	r7, #28
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	021a      	lsls	r2, r3, #8
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	431a      	orrs	r2, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	4313      	orrs	r3, r2
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	4313      	orrs	r3, r2
 8007010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	609a      	str	r2, [r3, #8]
}
 8007018:	bf00      	nop
 800701a:	371c      	adds	r7, #28
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007034:	2b01      	cmp	r3, #1
 8007036:	d101      	bne.n	800703c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007038:	2302      	movs	r3, #2
 800703a:	e05a      	b.n	80070f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a21      	ldr	r2, [pc, #132]	; (8007100 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d022      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007088:	d01d      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a1d      	ldr	r2, [pc, #116]	; (8007104 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d018      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a1b      	ldr	r2, [pc, #108]	; (8007108 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d013      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a1a      	ldr	r2, [pc, #104]	; (800710c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d00e      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a18      	ldr	r2, [pc, #96]	; (8007110 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d009      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a17      	ldr	r2, [pc, #92]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d004      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a15      	ldr	r2, [pc, #84]	; (8007118 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d10c      	bne.n	80070e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	40010000 	.word	0x40010000
 8007104:	40000400 	.word	0x40000400
 8007108:	40000800 	.word	0x40000800
 800710c:	40000c00 	.word	0x40000c00
 8007110:	40010400 	.word	0x40010400
 8007114:	40014000 	.word	0x40014000
 8007118:	40001800 	.word	0x40001800

0800711c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e03f      	b.n	80071ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d106      	bne.n	8007148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7f9 feb0 	bl	8000ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2224      	movs	r2, #36	; 0x24
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800715e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fc7b 	bl	8007a5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	691a      	ldr	r2, [r3, #16]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	695a      	ldr	r2, [r3, #20]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007184:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007194:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2220      	movs	r2, #32
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
	...

080071b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b0ba      	sub	sp, #232	; 0xe8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80071de:	2300      	movs	r3, #0
 80071e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ee:	f003 030f 	and.w	r3, r3, #15
 80071f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80071f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10f      	bne.n	800721e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007202:	f003 0320 	and.w	r3, r3, #32
 8007206:	2b00      	cmp	r3, #0
 8007208:	d009      	beq.n	800721e <HAL_UART_IRQHandler+0x66>
 800720a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fb65 	bl	80078e6 <UART_Receive_IT>
      return;
 800721c:	e256      	b.n	80076cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800721e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 80de 	beq.w	80073e4 <HAL_UART_IRQHandler+0x22c>
 8007228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	2b00      	cmp	r3, #0
 8007232:	d106      	bne.n	8007242 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007238:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80d1 	beq.w	80073e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00b      	beq.n	8007266 <HAL_UART_IRQHandler+0xae>
 800724e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007256:	2b00      	cmp	r3, #0
 8007258:	d005      	beq.n	8007266 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725e:	f043 0201 	orr.w	r2, r3, #1
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726a:	f003 0304 	and.w	r3, r3, #4
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00b      	beq.n	800728a <HAL_UART_IRQHandler+0xd2>
 8007272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	d005      	beq.n	800728a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	f043 0202 	orr.w	r2, r3, #2
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800728a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00b      	beq.n	80072ae <HAL_UART_IRQHandler+0xf6>
 8007296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d005      	beq.n	80072ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a6:	f043 0204 	orr.w	r2, r3, #4
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80072ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b2:	f003 0308 	and.w	r3, r3, #8
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d011      	beq.n	80072de <HAL_UART_IRQHandler+0x126>
 80072ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072be:	f003 0320 	and.w	r3, r3, #32
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d105      	bne.n	80072d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80072c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d005      	beq.n	80072de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	f043 0208 	orr.w	r2, r3, #8
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 81ed 	beq.w	80076c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d008      	beq.n	8007306 <HAL_UART_IRQHandler+0x14e>
 80072f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f8:	f003 0320 	and.w	r3, r3, #32
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 faf0 	bl	80078e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007310:	2b40      	cmp	r3, #64	; 0x40
 8007312:	bf0c      	ite	eq
 8007314:	2301      	moveq	r3, #1
 8007316:	2300      	movne	r3, #0
 8007318:	b2db      	uxtb	r3, r3
 800731a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	f003 0308 	and.w	r3, r3, #8
 8007326:	2b00      	cmp	r3, #0
 8007328:	d103      	bne.n	8007332 <HAL_UART_IRQHandler+0x17a>
 800732a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800732e:	2b00      	cmp	r3, #0
 8007330:	d04f      	beq.n	80073d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f9f8 	bl	8007728 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007342:	2b40      	cmp	r3, #64	; 0x40
 8007344:	d141      	bne.n	80073ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3314      	adds	r3, #20
 800734c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007350:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007354:	e853 3f00 	ldrex	r3, [r3]
 8007358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800735c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3314      	adds	r3, #20
 800736e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007372:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800737e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800738a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1d9      	bne.n	8007346 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	2b00      	cmp	r3, #0
 8007398:	d013      	beq.n	80073c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	4a7d      	ldr	r2, [pc, #500]	; (8007594 <HAL_UART_IRQHandler+0x3dc>)
 80073a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fa f8f0 	bl	800158c <HAL_DMA_Abort_IT>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d016      	beq.n	80073e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073bc:	4610      	mov	r0, r2
 80073be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c0:	e00e      	b.n	80073e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f99a 	bl	80076fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c8:	e00a      	b.n	80073e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f996 	bl	80076fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d0:	e006      	b.n	80073e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f992 	bl	80076fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80073de:	e170      	b.n	80076c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e0:	bf00      	nop
    return;
 80073e2:	e16e      	b.n	80076c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	f040 814a 	bne.w	8007682 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f2:	f003 0310 	and.w	r3, r3, #16
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 8143 	beq.w	8007682 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007400:	f003 0310 	and.w	r3, r3, #16
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 813c 	beq.w	8007682 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800740a:	2300      	movs	r3, #0
 800740c:	60bb      	str	r3, [r7, #8]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	60bb      	str	r3, [r7, #8]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	60bb      	str	r3, [r7, #8]
 800741e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742a:	2b40      	cmp	r3, #64	; 0x40
 800742c:	f040 80b4 	bne.w	8007598 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800743c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 8140 	beq.w	80076c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800744a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800744e:	429a      	cmp	r2, r3
 8007450:	f080 8139 	bcs.w	80076c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800745a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007466:	f000 8088 	beq.w	800757a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	330c      	adds	r3, #12
 8007470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007488:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	330c      	adds	r3, #12
 8007492:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007496:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800749a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1d9      	bne.n	800746a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3314      	adds	r3, #20
 80074bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074c0:	e853 3f00 	ldrex	r3, [r3]
 80074c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074c8:	f023 0301 	bic.w	r3, r3, #1
 80074cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3314      	adds	r3, #20
 80074d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e1      	bne.n	80074b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3314      	adds	r3, #20
 80074f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007508:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3314      	adds	r3, #20
 8007512:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007516:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007518:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800751c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e3      	bne.n	80074f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2220      	movs	r2, #32
 800752e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	330c      	adds	r3, #12
 800753e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007542:	e853 3f00 	ldrex	r3, [r3]
 8007546:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754a:	f023 0310 	bic.w	r3, r3, #16
 800754e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	330c      	adds	r3, #12
 8007558:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800755c:	65ba      	str	r2, [r7, #88]	; 0x58
 800755e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007562:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007564:	e841 2300 	strex	r3, r2, [r1]
 8007568:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800756a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e3      	bne.n	8007538 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007574:	4618      	mov	r0, r3
 8007576:	f7f9 ff99 	bl	80014ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007582:	b29b      	uxth	r3, r3
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	b29b      	uxth	r3, r3
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f8c0 	bl	8007710 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007590:	e099      	b.n	80076c6 <HAL_UART_IRQHandler+0x50e>
 8007592:	bf00      	nop
 8007594:	080077ef 	.word	0x080077ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 808b 	beq.w	80076ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80075b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8086 	beq.w	80076ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	330c      	adds	r3, #12
 80075c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	330c      	adds	r3, #12
 80075de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80075e2:	647a      	str	r2, [r7, #68]	; 0x44
 80075e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075ea:	e841 2300 	strex	r3, r2, [r1]
 80075ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1e3      	bne.n	80075be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3314      	adds	r3, #20
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	623b      	str	r3, [r7, #32]
   return(result);
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	f023 0301 	bic.w	r3, r3, #1
 800760c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3314      	adds	r3, #20
 8007616:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800761a:	633a      	str	r2, [r7, #48]	; 0x30
 800761c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007622:	e841 2300 	strex	r3, r2, [r1]
 8007626:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e3      	bne.n	80075f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2220      	movs	r2, #32
 8007632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	330c      	adds	r3, #12
 8007642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	e853 3f00 	ldrex	r3, [r3]
 800764a:	60fb      	str	r3, [r7, #12]
   return(result);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0310 	bic.w	r3, r3, #16
 8007652:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	330c      	adds	r3, #12
 800765c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007660:	61fa      	str	r2, [r7, #28]
 8007662:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	69b9      	ldr	r1, [r7, #24]
 8007666:	69fa      	ldr	r2, [r7, #28]
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	617b      	str	r3, [r7, #20]
   return(result);
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e3      	bne.n	800763c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007674:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f848 	bl	8007710 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007680:	e023      	b.n	80076ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768a:	2b00      	cmp	r3, #0
 800768c:	d009      	beq.n	80076a2 <HAL_UART_IRQHandler+0x4ea>
 800768e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f8bb 	bl	8007816 <UART_Transmit_IT>
    return;
 80076a0:	e014      	b.n	80076cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80076a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00e      	beq.n	80076cc <HAL_UART_IRQHandler+0x514>
 80076ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d008      	beq.n	80076cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f8fb 	bl	80078b6 <UART_EndTransmit_IT>
    return;
 80076c0:	e004      	b.n	80076cc <HAL_UART_IRQHandler+0x514>
    return;
 80076c2:	bf00      	nop
 80076c4:	e002      	b.n	80076cc <HAL_UART_IRQHandler+0x514>
      return;
 80076c6:	bf00      	nop
 80076c8:	e000      	b.n	80076cc <HAL_UART_IRQHandler+0x514>
      return;
 80076ca:	bf00      	nop
  }
}
 80076cc:	37e8      	adds	r7, #232	; 0xe8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop

080076d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b095      	sub	sp, #84	; 0x54
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	330c      	adds	r3, #12
 8007736:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007742:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	330c      	adds	r3, #12
 800774e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007750:	643a      	str	r2, [r7, #64]	; 0x40
 8007752:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007756:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800775e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e5      	bne.n	8007730 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3314      	adds	r3, #20
 800776a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	e853 3f00 	ldrex	r3, [r3]
 8007772:	61fb      	str	r3, [r7, #28]
   return(result);
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	f023 0301 	bic.w	r3, r3, #1
 800777a:	64bb      	str	r3, [r7, #72]	; 0x48
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3314      	adds	r3, #20
 8007782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007784:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800778a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e5      	bne.n	8007764 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779c:	2b01      	cmp	r3, #1
 800779e:	d119      	bne.n	80077d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	330c      	adds	r3, #12
 80077a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	e853 3f00 	ldrex	r3, [r3]
 80077ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f023 0310 	bic.w	r3, r3, #16
 80077b6:	647b      	str	r3, [r7, #68]	; 0x44
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	330c      	adds	r3, #12
 80077be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077c0:	61ba      	str	r2, [r7, #24]
 80077c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c4:	6979      	ldr	r1, [r7, #20]
 80077c6:	69ba      	ldr	r2, [r7, #24]
 80077c8:	e841 2300 	strex	r3, r2, [r1]
 80077cc:	613b      	str	r3, [r7, #16]
   return(result);
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e5      	bne.n	80077a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077e2:	bf00      	nop
 80077e4:	3754      	adds	r7, #84	; 0x54
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b084      	sub	sp, #16
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f7ff ff77 	bl	80076fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800780e:	bf00      	nop
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007816:	b480      	push	{r7}
 8007818:	b085      	sub	sp, #20
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b21      	cmp	r3, #33	; 0x21
 8007828:	d13e      	bne.n	80078a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007832:	d114      	bne.n	800785e <UART_Transmit_IT+0x48>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d110      	bne.n	800785e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007850:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	1c9a      	adds	r2, r3, #2
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	621a      	str	r2, [r3, #32]
 800785c:	e008      	b.n	8007870 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	1c59      	adds	r1, r3, #1
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	6211      	str	r1, [r2, #32]
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007874:	b29b      	uxth	r3, r3
 8007876:	3b01      	subs	r3, #1
 8007878:	b29b      	uxth	r3, r3
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	4619      	mov	r1, r3
 800787e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10f      	bne.n	80078a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68da      	ldr	r2, [r3, #12]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007892:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68da      	ldr	r2, [r3, #12]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	e000      	b.n	80078aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078a8:	2302      	movs	r3, #2
  }
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b082      	sub	sp, #8
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff fefc 	bl	80076d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b08c      	sub	sp, #48	; 0x30
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b22      	cmp	r3, #34	; 0x22
 80078f8:	f040 80ab 	bne.w	8007a52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007904:	d117      	bne.n	8007936 <UART_Receive_IT+0x50>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d113      	bne.n	8007936 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800790e:	2300      	movs	r3, #0
 8007910:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007916:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	b29b      	uxth	r3, r3
 8007920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007924:	b29a      	uxth	r2, r3
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792e:	1c9a      	adds	r2, r3, #2
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	629a      	str	r2, [r3, #40]	; 0x28
 8007934:	e026      	b.n	8007984 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800793c:	2300      	movs	r3, #0
 800793e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007948:	d007      	beq.n	800795a <UART_Receive_IT+0x74>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10a      	bne.n	8007968 <UART_Receive_IT+0x82>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	b2da      	uxtb	r2, r3
 8007962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	e008      	b.n	800797a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	b2db      	uxtb	r3, r3
 8007970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007974:	b2da      	uxtb	r2, r3
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007988:	b29b      	uxth	r3, r3
 800798a:	3b01      	subs	r3, #1
 800798c:	b29b      	uxth	r3, r3
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	4619      	mov	r1, r3
 8007992:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007994:	2b00      	cmp	r3, #0
 8007996:	d15a      	bne.n	8007a4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68da      	ldr	r2, [r3, #12]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0220 	bic.w	r2, r2, #32
 80079a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68da      	ldr	r2, [r3, #12]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	695a      	ldr	r2, [r3, #20]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 0201 	bic.w	r2, r2, #1
 80079c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2220      	movs	r2, #32
 80079cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d135      	bne.n	8007a44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	330c      	adds	r3, #12
 80079e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	613b      	str	r3, [r7, #16]
   return(result);
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f023 0310 	bic.w	r3, r3, #16
 80079f4:	627b      	str	r3, [r7, #36]	; 0x24
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	330c      	adds	r3, #12
 80079fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fe:	623a      	str	r2, [r7, #32]
 8007a00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a02:	69f9      	ldr	r1, [r7, #28]
 8007a04:	6a3a      	ldr	r2, [r7, #32]
 8007a06:	e841 2300 	strex	r3, r2, [r1]
 8007a0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1e5      	bne.n	80079de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0310 	and.w	r3, r3, #16
 8007a1c:	2b10      	cmp	r3, #16
 8007a1e:	d10a      	bne.n	8007a36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a20:	2300      	movs	r3, #0
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f7ff fe67 	bl	8007710 <HAL_UARTEx_RxEventCallback>
 8007a42:	e002      	b.n	8007a4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7ff fe4f 	bl	80076e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e002      	b.n	8007a54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	e000      	b.n	8007a54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007a52:	2302      	movs	r3, #2
  }
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3730      	adds	r7, #48	; 0x30
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a60:	b0c0      	sub	sp, #256	; 0x100
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a78:	68d9      	ldr	r1, [r3, #12]
 8007a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	ea40 0301 	orr.w	r3, r0, r1
 8007a84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	431a      	orrs	r2, r3
 8007a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ab4:	f021 010c 	bic.w	r1, r1, #12
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ac2:	430b      	orrs	r3, r1
 8007ac4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad6:	6999      	ldr	r1, [r3, #24]
 8007ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	ea40 0301 	orr.w	r3, r0, r1
 8007ae2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	4b8f      	ldr	r3, [pc, #572]	; (8007d28 <UART_SetConfig+0x2cc>)
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d005      	beq.n	8007afc <UART_SetConfig+0xa0>
 8007af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	4b8d      	ldr	r3, [pc, #564]	; (8007d2c <UART_SetConfig+0x2d0>)
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d104      	bne.n	8007b06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007afc:	f7fd feac 	bl	8005858 <HAL_RCC_GetPCLK2Freq>
 8007b00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b04:	e003      	b.n	8007b0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b06:	f7fd fe93 	bl	8005830 <HAL_RCC_GetPCLK1Freq>
 8007b0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b18:	f040 810c 	bne.w	8007d34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b20:	2200      	movs	r2, #0
 8007b22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007b2e:	4622      	mov	r2, r4
 8007b30:	462b      	mov	r3, r5
 8007b32:	1891      	adds	r1, r2, r2
 8007b34:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b36:	415b      	adcs	r3, r3
 8007b38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b3e:	4621      	mov	r1, r4
 8007b40:	eb12 0801 	adds.w	r8, r2, r1
 8007b44:	4629      	mov	r1, r5
 8007b46:	eb43 0901 	adc.w	r9, r3, r1
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	f04f 0300 	mov.w	r3, #0
 8007b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b5e:	4690      	mov	r8, r2
 8007b60:	4699      	mov	r9, r3
 8007b62:	4623      	mov	r3, r4
 8007b64:	eb18 0303 	adds.w	r3, r8, r3
 8007b68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b6c:	462b      	mov	r3, r5
 8007b6e:	eb49 0303 	adc.w	r3, r9, r3
 8007b72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	18db      	adds	r3, r3, r3
 8007b8e:	653b      	str	r3, [r7, #80]	; 0x50
 8007b90:	4613      	mov	r3, r2
 8007b92:	eb42 0303 	adc.w	r3, r2, r3
 8007b96:	657b      	str	r3, [r7, #84]	; 0x54
 8007b98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007ba0:	f7f8 fb12 	bl	80001c8 <__aeabi_uldivmod>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	4b61      	ldr	r3, [pc, #388]	; (8007d30 <UART_SetConfig+0x2d4>)
 8007baa:	fba3 2302 	umull	r2, r3, r3, r2
 8007bae:	095b      	lsrs	r3, r3, #5
 8007bb0:	011c      	lsls	r4, r3, #4
 8007bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007bc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007bc4:	4642      	mov	r2, r8
 8007bc6:	464b      	mov	r3, r9
 8007bc8:	1891      	adds	r1, r2, r2
 8007bca:	64b9      	str	r1, [r7, #72]	; 0x48
 8007bcc:	415b      	adcs	r3, r3
 8007bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007bd4:	4641      	mov	r1, r8
 8007bd6:	eb12 0a01 	adds.w	sl, r2, r1
 8007bda:	4649      	mov	r1, r9
 8007bdc:	eb43 0b01 	adc.w	fp, r3, r1
 8007be0:	f04f 0200 	mov.w	r2, #0
 8007be4:	f04f 0300 	mov.w	r3, #0
 8007be8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007bec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007bf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bf4:	4692      	mov	sl, r2
 8007bf6:	469b      	mov	fp, r3
 8007bf8:	4643      	mov	r3, r8
 8007bfa:	eb1a 0303 	adds.w	r3, sl, r3
 8007bfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c02:	464b      	mov	r3, r9
 8007c04:	eb4b 0303 	adc.w	r3, fp, r3
 8007c08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c20:	460b      	mov	r3, r1
 8007c22:	18db      	adds	r3, r3, r3
 8007c24:	643b      	str	r3, [r7, #64]	; 0x40
 8007c26:	4613      	mov	r3, r2
 8007c28:	eb42 0303 	adc.w	r3, r2, r3
 8007c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c36:	f7f8 fac7 	bl	80001c8 <__aeabi_uldivmod>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4b3b      	ldr	r3, [pc, #236]	; (8007d30 <UART_SetConfig+0x2d4>)
 8007c42:	fba3 2301 	umull	r2, r3, r3, r1
 8007c46:	095b      	lsrs	r3, r3, #5
 8007c48:	2264      	movs	r2, #100	; 0x64
 8007c4a:	fb02 f303 	mul.w	r3, r2, r3
 8007c4e:	1acb      	subs	r3, r1, r3
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c56:	4b36      	ldr	r3, [pc, #216]	; (8007d30 <UART_SetConfig+0x2d4>)
 8007c58:	fba3 2302 	umull	r2, r3, r3, r2
 8007c5c:	095b      	lsrs	r3, r3, #5
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c64:	441c      	add	r4, r3
 8007c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c78:	4642      	mov	r2, r8
 8007c7a:	464b      	mov	r3, r9
 8007c7c:	1891      	adds	r1, r2, r2
 8007c7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c80:	415b      	adcs	r3, r3
 8007c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c88:	4641      	mov	r1, r8
 8007c8a:	1851      	adds	r1, r2, r1
 8007c8c:	6339      	str	r1, [r7, #48]	; 0x30
 8007c8e:	4649      	mov	r1, r9
 8007c90:	414b      	adcs	r3, r1
 8007c92:	637b      	str	r3, [r7, #52]	; 0x34
 8007c94:	f04f 0200 	mov.w	r2, #0
 8007c98:	f04f 0300 	mov.w	r3, #0
 8007c9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ca0:	4659      	mov	r1, fp
 8007ca2:	00cb      	lsls	r3, r1, #3
 8007ca4:	4651      	mov	r1, sl
 8007ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007caa:	4651      	mov	r1, sl
 8007cac:	00ca      	lsls	r2, r1, #3
 8007cae:	4610      	mov	r0, r2
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	189b      	adds	r3, r3, r2
 8007cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cbc:	464b      	mov	r3, r9
 8007cbe:	460a      	mov	r2, r1
 8007cc0:	eb42 0303 	adc.w	r3, r2, r3
 8007cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007cd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007cd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007cdc:	460b      	mov	r3, r1
 8007cde:	18db      	adds	r3, r3, r3
 8007ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	eb42 0303 	adc.w	r3, r2, r3
 8007ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007cf2:	f7f8 fa69 	bl	80001c8 <__aeabi_uldivmod>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4b0d      	ldr	r3, [pc, #52]	; (8007d30 <UART_SetConfig+0x2d4>)
 8007cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8007d00:	095b      	lsrs	r3, r3, #5
 8007d02:	2164      	movs	r1, #100	; 0x64
 8007d04:	fb01 f303 	mul.w	r3, r1, r3
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	00db      	lsls	r3, r3, #3
 8007d0c:	3332      	adds	r3, #50	; 0x32
 8007d0e:	4a08      	ldr	r2, [pc, #32]	; (8007d30 <UART_SetConfig+0x2d4>)
 8007d10:	fba2 2303 	umull	r2, r3, r2, r3
 8007d14:	095b      	lsrs	r3, r3, #5
 8007d16:	f003 0207 	and.w	r2, r3, #7
 8007d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4422      	add	r2, r4
 8007d22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d24:	e105      	b.n	8007f32 <UART_SetConfig+0x4d6>
 8007d26:	bf00      	nop
 8007d28:	40011000 	.word	0x40011000
 8007d2c:	40011400 	.word	0x40011400
 8007d30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d46:	4642      	mov	r2, r8
 8007d48:	464b      	mov	r3, r9
 8007d4a:	1891      	adds	r1, r2, r2
 8007d4c:	6239      	str	r1, [r7, #32]
 8007d4e:	415b      	adcs	r3, r3
 8007d50:	627b      	str	r3, [r7, #36]	; 0x24
 8007d52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d56:	4641      	mov	r1, r8
 8007d58:	1854      	adds	r4, r2, r1
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	eb43 0501 	adc.w	r5, r3, r1
 8007d60:	f04f 0200 	mov.w	r2, #0
 8007d64:	f04f 0300 	mov.w	r3, #0
 8007d68:	00eb      	lsls	r3, r5, #3
 8007d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d6e:	00e2      	lsls	r2, r4, #3
 8007d70:	4614      	mov	r4, r2
 8007d72:	461d      	mov	r5, r3
 8007d74:	4643      	mov	r3, r8
 8007d76:	18e3      	adds	r3, r4, r3
 8007d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d7c:	464b      	mov	r3, r9
 8007d7e:	eb45 0303 	adc.w	r3, r5, r3
 8007d82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d96:	f04f 0200 	mov.w	r2, #0
 8007d9a:	f04f 0300 	mov.w	r3, #0
 8007d9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007da2:	4629      	mov	r1, r5
 8007da4:	008b      	lsls	r3, r1, #2
 8007da6:	4621      	mov	r1, r4
 8007da8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dac:	4621      	mov	r1, r4
 8007dae:	008a      	lsls	r2, r1, #2
 8007db0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007db4:	f7f8 fa08 	bl	80001c8 <__aeabi_uldivmod>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4b60      	ldr	r3, [pc, #384]	; (8007f40 <UART_SetConfig+0x4e4>)
 8007dbe:	fba3 2302 	umull	r2, r3, r3, r2
 8007dc2:	095b      	lsrs	r3, r3, #5
 8007dc4:	011c      	lsls	r4, r3, #4
 8007dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007dd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007dd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007dd8:	4642      	mov	r2, r8
 8007dda:	464b      	mov	r3, r9
 8007ddc:	1891      	adds	r1, r2, r2
 8007dde:	61b9      	str	r1, [r7, #24]
 8007de0:	415b      	adcs	r3, r3
 8007de2:	61fb      	str	r3, [r7, #28]
 8007de4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007de8:	4641      	mov	r1, r8
 8007dea:	1851      	adds	r1, r2, r1
 8007dec:	6139      	str	r1, [r7, #16]
 8007dee:	4649      	mov	r1, r9
 8007df0:	414b      	adcs	r3, r1
 8007df2:	617b      	str	r3, [r7, #20]
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	f04f 0300 	mov.w	r3, #0
 8007dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e00:	4659      	mov	r1, fp
 8007e02:	00cb      	lsls	r3, r1, #3
 8007e04:	4651      	mov	r1, sl
 8007e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e0a:	4651      	mov	r1, sl
 8007e0c:	00ca      	lsls	r2, r1, #3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	4619      	mov	r1, r3
 8007e12:	4603      	mov	r3, r0
 8007e14:	4642      	mov	r2, r8
 8007e16:	189b      	adds	r3, r3, r2
 8007e18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e1c:	464b      	mov	r3, r9
 8007e1e:	460a      	mov	r2, r1
 8007e20:	eb42 0303 	adc.w	r3, r2, r3
 8007e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e34:	f04f 0200 	mov.w	r2, #0
 8007e38:	f04f 0300 	mov.w	r3, #0
 8007e3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e40:	4649      	mov	r1, r9
 8007e42:	008b      	lsls	r3, r1, #2
 8007e44:	4641      	mov	r1, r8
 8007e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e4a:	4641      	mov	r1, r8
 8007e4c:	008a      	lsls	r2, r1, #2
 8007e4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e52:	f7f8 f9b9 	bl	80001c8 <__aeabi_uldivmod>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4b39      	ldr	r3, [pc, #228]	; (8007f40 <UART_SetConfig+0x4e4>)
 8007e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e60:	095b      	lsrs	r3, r3, #5
 8007e62:	2164      	movs	r1, #100	; 0x64
 8007e64:	fb01 f303 	mul.w	r3, r1, r3
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	011b      	lsls	r3, r3, #4
 8007e6c:	3332      	adds	r3, #50	; 0x32
 8007e6e:	4a34      	ldr	r2, [pc, #208]	; (8007f40 <UART_SetConfig+0x4e4>)
 8007e70:	fba2 2303 	umull	r2, r3, r2, r3
 8007e74:	095b      	lsrs	r3, r3, #5
 8007e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e7a:	441c      	add	r4, r3
 8007e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e80:	2200      	movs	r2, #0
 8007e82:	673b      	str	r3, [r7, #112]	; 0x70
 8007e84:	677a      	str	r2, [r7, #116]	; 0x74
 8007e86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e8a:	4642      	mov	r2, r8
 8007e8c:	464b      	mov	r3, r9
 8007e8e:	1891      	adds	r1, r2, r2
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	415b      	adcs	r3, r3
 8007e94:	60fb      	str	r3, [r7, #12]
 8007e96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e9a:	4641      	mov	r1, r8
 8007e9c:	1851      	adds	r1, r2, r1
 8007e9e:	6039      	str	r1, [r7, #0]
 8007ea0:	4649      	mov	r1, r9
 8007ea2:	414b      	adcs	r3, r1
 8007ea4:	607b      	str	r3, [r7, #4]
 8007ea6:	f04f 0200 	mov.w	r2, #0
 8007eaa:	f04f 0300 	mov.w	r3, #0
 8007eae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007eb2:	4659      	mov	r1, fp
 8007eb4:	00cb      	lsls	r3, r1, #3
 8007eb6:	4651      	mov	r1, sl
 8007eb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ebc:	4651      	mov	r1, sl
 8007ebe:	00ca      	lsls	r2, r1, #3
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	4642      	mov	r2, r8
 8007ec8:	189b      	adds	r3, r3, r2
 8007eca:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ecc:	464b      	mov	r3, r9
 8007ece:	460a      	mov	r2, r1
 8007ed0:	eb42 0303 	adc.w	r3, r2, r3
 8007ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	663b      	str	r3, [r7, #96]	; 0x60
 8007ee0:	667a      	str	r2, [r7, #100]	; 0x64
 8007ee2:	f04f 0200 	mov.w	r2, #0
 8007ee6:	f04f 0300 	mov.w	r3, #0
 8007eea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007eee:	4649      	mov	r1, r9
 8007ef0:	008b      	lsls	r3, r1, #2
 8007ef2:	4641      	mov	r1, r8
 8007ef4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ef8:	4641      	mov	r1, r8
 8007efa:	008a      	lsls	r2, r1, #2
 8007efc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f00:	f7f8 f962 	bl	80001c8 <__aeabi_uldivmod>
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	4b0d      	ldr	r3, [pc, #52]	; (8007f40 <UART_SetConfig+0x4e4>)
 8007f0a:	fba3 1302 	umull	r1, r3, r3, r2
 8007f0e:	095b      	lsrs	r3, r3, #5
 8007f10:	2164      	movs	r1, #100	; 0x64
 8007f12:	fb01 f303 	mul.w	r3, r1, r3
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	011b      	lsls	r3, r3, #4
 8007f1a:	3332      	adds	r3, #50	; 0x32
 8007f1c:	4a08      	ldr	r2, [pc, #32]	; (8007f40 <UART_SetConfig+0x4e4>)
 8007f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f22:	095b      	lsrs	r3, r3, #5
 8007f24:	f003 020f 	and.w	r2, r3, #15
 8007f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4422      	add	r2, r4
 8007f30:	609a      	str	r2, [r3, #8]
}
 8007f32:	bf00      	nop
 8007f34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f3e:	bf00      	nop
 8007f40:	51eb851f 	.word	0x51eb851f

08007f44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f44:	b084      	sub	sp, #16
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b084      	sub	sp, #16
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	f107 001c 	add.w	r0, r7, #28
 8007f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d122      	bne.n	8007fa2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d105      	bne.n	8007f96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f001 fbee 	bl	8009778 <USB_CoreReset>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	73fb      	strb	r3, [r7, #15]
 8007fa0:	e01a      	b.n	8007fd8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 fbe2 	bl	8009778 <USB_CoreReset>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d106      	bne.n	8007fcc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	639a      	str	r2, [r3, #56]	; 0x38
 8007fca:	e005      	b.n	8007fd8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d10b      	bne.n	8007ff6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f043 0206 	orr.w	r2, r3, #6
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f043 0220 	orr.w	r2, r3, #32
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008002:	b004      	add	sp, #16
 8008004:	4770      	bx	lr
	...

08008008 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008008:	b480      	push	{r7}
 800800a:	b087      	sub	sp, #28
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	4613      	mov	r3, r2
 8008014:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	2b02      	cmp	r3, #2
 800801a:	d165      	bne.n	80080e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	4a41      	ldr	r2, [pc, #260]	; (8008124 <USB_SetTurnaroundTime+0x11c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d906      	bls.n	8008032 <USB_SetTurnaroundTime+0x2a>
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	4a40      	ldr	r2, [pc, #256]	; (8008128 <USB_SetTurnaroundTime+0x120>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d202      	bcs.n	8008032 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800802c:	230f      	movs	r3, #15
 800802e:	617b      	str	r3, [r7, #20]
 8008030:	e062      	b.n	80080f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	4a3c      	ldr	r2, [pc, #240]	; (8008128 <USB_SetTurnaroundTime+0x120>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d306      	bcc.n	8008048 <USB_SetTurnaroundTime+0x40>
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	4a3b      	ldr	r2, [pc, #236]	; (800812c <USB_SetTurnaroundTime+0x124>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d202      	bcs.n	8008048 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008042:	230e      	movs	r3, #14
 8008044:	617b      	str	r3, [r7, #20]
 8008046:	e057      	b.n	80080f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	4a38      	ldr	r2, [pc, #224]	; (800812c <USB_SetTurnaroundTime+0x124>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d306      	bcc.n	800805e <USB_SetTurnaroundTime+0x56>
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	4a37      	ldr	r2, [pc, #220]	; (8008130 <USB_SetTurnaroundTime+0x128>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d202      	bcs.n	800805e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008058:	230d      	movs	r3, #13
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	e04c      	b.n	80080f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	4a33      	ldr	r2, [pc, #204]	; (8008130 <USB_SetTurnaroundTime+0x128>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d306      	bcc.n	8008074 <USB_SetTurnaroundTime+0x6c>
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	4a32      	ldr	r2, [pc, #200]	; (8008134 <USB_SetTurnaroundTime+0x12c>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d802      	bhi.n	8008074 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800806e:	230c      	movs	r3, #12
 8008070:	617b      	str	r3, [r7, #20]
 8008072:	e041      	b.n	80080f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	4a2f      	ldr	r2, [pc, #188]	; (8008134 <USB_SetTurnaroundTime+0x12c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d906      	bls.n	800808a <USB_SetTurnaroundTime+0x82>
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	4a2e      	ldr	r2, [pc, #184]	; (8008138 <USB_SetTurnaroundTime+0x130>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d802      	bhi.n	800808a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008084:	230b      	movs	r3, #11
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	e036      	b.n	80080f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	4a2a      	ldr	r2, [pc, #168]	; (8008138 <USB_SetTurnaroundTime+0x130>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d906      	bls.n	80080a0 <USB_SetTurnaroundTime+0x98>
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	4a29      	ldr	r2, [pc, #164]	; (800813c <USB_SetTurnaroundTime+0x134>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d802      	bhi.n	80080a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800809a:	230a      	movs	r3, #10
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	e02b      	b.n	80080f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4a26      	ldr	r2, [pc, #152]	; (800813c <USB_SetTurnaroundTime+0x134>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d906      	bls.n	80080b6 <USB_SetTurnaroundTime+0xae>
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	4a25      	ldr	r2, [pc, #148]	; (8008140 <USB_SetTurnaroundTime+0x138>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d202      	bcs.n	80080b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80080b0:	2309      	movs	r3, #9
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	e020      	b.n	80080f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	4a21      	ldr	r2, [pc, #132]	; (8008140 <USB_SetTurnaroundTime+0x138>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d306      	bcc.n	80080cc <USB_SetTurnaroundTime+0xc4>
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	4a20      	ldr	r2, [pc, #128]	; (8008144 <USB_SetTurnaroundTime+0x13c>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d802      	bhi.n	80080cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80080c6:	2308      	movs	r3, #8
 80080c8:	617b      	str	r3, [r7, #20]
 80080ca:	e015      	b.n	80080f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4a1d      	ldr	r2, [pc, #116]	; (8008144 <USB_SetTurnaroundTime+0x13c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d906      	bls.n	80080e2 <USB_SetTurnaroundTime+0xda>
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	4a1c      	ldr	r2, [pc, #112]	; (8008148 <USB_SetTurnaroundTime+0x140>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d202      	bcs.n	80080e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80080dc:	2307      	movs	r3, #7
 80080de:	617b      	str	r3, [r7, #20]
 80080e0:	e00a      	b.n	80080f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80080e2:	2306      	movs	r3, #6
 80080e4:	617b      	str	r3, [r7, #20]
 80080e6:	e007      	b.n	80080f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d102      	bne.n	80080f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80080ee:	2309      	movs	r3, #9
 80080f0:	617b      	str	r3, [r7, #20]
 80080f2:	e001      	b.n	80080f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80080f4:	2309      	movs	r3, #9
 80080f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	68da      	ldr	r2, [r3, #12]
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	029b      	lsls	r3, r3, #10
 800810c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008110:	431a      	orrs	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	371c      	adds	r7, #28
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	00d8acbf 	.word	0x00d8acbf
 8008128:	00e4e1c0 	.word	0x00e4e1c0
 800812c:	00f42400 	.word	0x00f42400
 8008130:	01067380 	.word	0x01067380
 8008134:	011a499f 	.word	0x011a499f
 8008138:	01312cff 	.word	0x01312cff
 800813c:	014ca43f 	.word	0x014ca43f
 8008140:	016e3600 	.word	0x016e3600
 8008144:	01a6ab1f 	.word	0x01a6ab1f
 8008148:	01e84800 	.word	0x01e84800

0800814c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f043 0201 	orr.w	r2, r3, #1
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800816e:	b480      	push	{r7}
 8008170:	b083      	sub	sp, #12
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f023 0201 	bic.w	r2, r3, #1
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d115      	bne.n	80081de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081be:	2001      	movs	r0, #1
 80081c0:	f7f8 ff90 	bl	80010e4 <HAL_Delay>
      ms++;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	3301      	adds	r3, #1
 80081c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 fa45 	bl	800965a <USB_GetMode>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d01e      	beq.n	8008214 <USB_SetCurrentMode+0x84>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b31      	cmp	r3, #49	; 0x31
 80081da:	d9f0      	bls.n	80081be <USB_SetCurrentMode+0x2e>
 80081dc:	e01a      	b.n	8008214 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80081de:	78fb      	ldrb	r3, [r7, #3]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d115      	bne.n	8008210 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081f0:	2001      	movs	r0, #1
 80081f2:	f7f8 ff77 	bl	80010e4 <HAL_Delay>
      ms++;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3301      	adds	r3, #1
 80081fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f001 fa2c 	bl	800965a <USB_GetMode>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d005      	beq.n	8008214 <USB_SetCurrentMode+0x84>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b31      	cmp	r3, #49	; 0x31
 800820c:	d9f0      	bls.n	80081f0 <USB_SetCurrentMode+0x60>
 800820e:	e001      	b.n	8008214 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e005      	b.n	8008220 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2b32      	cmp	r3, #50	; 0x32
 8008218:	d101      	bne.n	800821e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e000      	b.n	8008220 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008228:	b084      	sub	sp, #16
 800822a:	b580      	push	{r7, lr}
 800822c:	b086      	sub	sp, #24
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800823a:	2300      	movs	r3, #0
 800823c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008242:	2300      	movs	r3, #0
 8008244:	613b      	str	r3, [r7, #16]
 8008246:	e009      	b.n	800825c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	3340      	adds	r3, #64	; 0x40
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	2200      	movs	r2, #0
 8008254:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	3301      	adds	r3, #1
 800825a:	613b      	str	r3, [r7, #16]
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	2b0e      	cmp	r3, #14
 8008260:	d9f2      	bls.n	8008248 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008264:	2b00      	cmp	r3, #0
 8008266:	d11c      	bne.n	80082a2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008276:	f043 0302 	orr.w	r3, r3, #2
 800827a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008280:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008298:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	639a      	str	r2, [r3, #56]	; 0x38
 80082a0:	e00b      	b.n	80082ba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082c0:	461a      	mov	r2, r3
 80082c2:	2300      	movs	r3, #0
 80082c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082cc:	4619      	mov	r1, r3
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d4:	461a      	mov	r2, r3
 80082d6:	680b      	ldr	r3, [r1, #0]
 80082d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d10c      	bne.n	80082fa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80082e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d104      	bne.n	80082f0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80082e6:	2100      	movs	r1, #0
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f965 	bl	80085b8 <USB_SetDevSpeed>
 80082ee:	e008      	b.n	8008302 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80082f0:	2101      	movs	r1, #1
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f960 	bl	80085b8 <USB_SetDevSpeed>
 80082f8:	e003      	b.n	8008302 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80082fa:	2103      	movs	r1, #3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f95b 	bl	80085b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008302:	2110      	movs	r1, #16
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f8f3 	bl	80084f0 <USB_FlushTxFifo>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f91f 	bl	8008558 <USB_FlushRxFifo>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832a:	461a      	mov	r2, r3
 800832c:	2300      	movs	r3, #0
 800832e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008336:	461a      	mov	r2, r3
 8008338:	2300      	movs	r3, #0
 800833a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008342:	461a      	mov	r2, r3
 8008344:	2300      	movs	r3, #0
 8008346:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008348:	2300      	movs	r3, #0
 800834a:	613b      	str	r3, [r7, #16]
 800834c:	e043      	b.n	80083d6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	015a      	lsls	r2, r3, #5
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	4413      	add	r3, r2
 8008356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008360:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008364:	d118      	bne.n	8008398 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10a      	bne.n	8008382 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008378:	461a      	mov	r2, r3
 800837a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	e013      	b.n	80083aa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	015a      	lsls	r2, r3, #5
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4413      	add	r3, r2
 800838a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800838e:	461a      	mov	r2, r3
 8008390:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008394:	6013      	str	r3, [r2, #0]
 8008396:	e008      	b.n	80083aa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a4:	461a      	mov	r2, r3
 80083a6:	2300      	movs	r3, #0
 80083a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b6:	461a      	mov	r2, r3
 80083b8:	2300      	movs	r3, #0
 80083ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c8:	461a      	mov	r2, r3
 80083ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80083ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	3301      	adds	r3, #1
 80083d4:	613b      	str	r3, [r7, #16]
 80083d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d3b7      	bcc.n	800834e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083de:	2300      	movs	r3, #0
 80083e0:	613b      	str	r3, [r7, #16]
 80083e2:	e043      	b.n	800846c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083fa:	d118      	bne.n	800842e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10a      	bne.n	8008418 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	015a      	lsls	r2, r3, #5
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	4413      	add	r3, r2
 800840a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840e:	461a      	mov	r2, r3
 8008410:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008414:	6013      	str	r3, [r2, #0]
 8008416:	e013      	b.n	8008440 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4413      	add	r3, r2
 8008420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008424:	461a      	mov	r2, r3
 8008426:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	e008      	b.n	8008440 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	4413      	add	r3, r2
 8008436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843a:	461a      	mov	r2, r3
 800843c:	2300      	movs	r3, #0
 800843e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	4413      	add	r3, r2
 8008448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844c:	461a      	mov	r2, r3
 800844e:	2300      	movs	r3, #0
 8008450:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	4413      	add	r3, r2
 800845a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800845e:	461a      	mov	r2, r3
 8008460:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008464:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	3301      	adds	r3, #1
 800846a:	613b      	str	r3, [r7, #16]
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	429a      	cmp	r2, r3
 8008472:	d3b7      	bcc.n	80083e4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008482:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008486:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008494:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	2b00      	cmp	r3, #0
 800849a:	d105      	bne.n	80084a8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	f043 0210 	orr.w	r2, r3, #16
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	699a      	ldr	r2, [r3, #24]
 80084ac:	4b0f      	ldr	r3, [pc, #60]	; (80084ec <USB_DevInit+0x2c4>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80084b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d005      	beq.n	80084c6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	f043 0208 	orr.w	r2, r3, #8
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80084c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d107      	bne.n	80084dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084d4:	f043 0304 	orr.w	r3, r3, #4
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084e8:	b004      	add	sp, #16
 80084ea:	4770      	bx	lr
 80084ec:	803c3800 	.word	0x803c3800

080084f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3301      	adds	r3, #1
 8008502:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4a13      	ldr	r2, [pc, #76]	; (8008554 <USB_FlushTxFifo+0x64>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d901      	bls.n	8008510 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e01b      	b.n	8008548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	daf2      	bge.n	80084fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	019b      	lsls	r3, r3, #6
 8008520:	f043 0220 	orr.w	r2, r3, #32
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3301      	adds	r3, #1
 800852c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	4a08      	ldr	r2, [pc, #32]	; (8008554 <USB_FlushTxFifo+0x64>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d901      	bls.n	800853a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e006      	b.n	8008548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	f003 0320 	and.w	r3, r3, #32
 8008542:	2b20      	cmp	r3, #32
 8008544:	d0f0      	beq.n	8008528 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	00030d40 	.word	0x00030d40

08008558 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008560:	2300      	movs	r3, #0
 8008562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3301      	adds	r3, #1
 8008568:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	4a11      	ldr	r2, [pc, #68]	; (80085b4 <USB_FlushRxFifo+0x5c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d901      	bls.n	8008576 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e018      	b.n	80085a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	daf2      	bge.n	8008564 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2210      	movs	r2, #16
 8008586:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	3301      	adds	r3, #1
 800858c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	4a08      	ldr	r2, [pc, #32]	; (80085b4 <USB_FlushRxFifo+0x5c>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d901      	bls.n	800859a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e006      	b.n	80085a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	f003 0310 	and.w	r3, r3, #16
 80085a2:	2b10      	cmp	r3, #16
 80085a4:	d0f0      	beq.n	8008588 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	00030d40 	.word	0x00030d40

080085b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	460b      	mov	r3, r1
 80085c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	68f9      	ldr	r1, [r7, #12]
 80085d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085d8:	4313      	orrs	r3, r2
 80085da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b087      	sub	sp, #28
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f003 0306 	and.w	r3, r3, #6
 8008602:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d102      	bne.n	8008610 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800860a:	2300      	movs	r3, #0
 800860c:	75fb      	strb	r3, [r7, #23]
 800860e:	e00a      	b.n	8008626 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2b02      	cmp	r3, #2
 8008614:	d002      	beq.n	800861c <USB_GetDevSpeed+0x32>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2b06      	cmp	r3, #6
 800861a:	d102      	bne.n	8008622 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800861c:	2302      	movs	r3, #2
 800861e:	75fb      	strb	r3, [r7, #23]
 8008620:	e001      	b.n	8008626 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008622:	230f      	movs	r3, #15
 8008624:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008626:	7dfb      	ldrb	r3, [r7, #23]
}
 8008628:	4618      	mov	r0, r3
 800862a:	371c      	adds	r7, #28
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	785b      	ldrb	r3, [r3, #1]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d13a      	bne.n	80086c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008656:	69da      	ldr	r2, [r3, #28]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	f003 030f 	and.w	r3, r3, #15
 8008660:	2101      	movs	r1, #1
 8008662:	fa01 f303 	lsl.w	r3, r1, r3
 8008666:	b29b      	uxth	r3, r3
 8008668:	68f9      	ldr	r1, [r7, #12]
 800866a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800866e:	4313      	orrs	r3, r2
 8008670:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d155      	bne.n	8008734 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	791b      	ldrb	r3, [r3, #4]
 80086a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	059b      	lsls	r3, r3, #22
 80086aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086ac:	4313      	orrs	r3, r2
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	0151      	lsls	r1, r2, #5
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	440a      	add	r2, r1
 80086b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	e036      	b.n	8008734 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086cc:	69da      	ldr	r2, [r3, #28]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	f003 030f 	and.w	r3, r3, #15
 80086d6:	2101      	movs	r1, #1
 80086d8:	fa01 f303 	lsl.w	r3, r1, r3
 80086dc:	041b      	lsls	r3, r3, #16
 80086de:	68f9      	ldr	r1, [r7, #12]
 80086e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086e4:	4313      	orrs	r3, r2
 80086e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d11a      	bne.n	8008734 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	4413      	add	r3, r2
 8008706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	791b      	ldrb	r3, [r3, #4]
 8008718:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800871a:	430b      	orrs	r3, r1
 800871c:	4313      	orrs	r3, r2
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	0151      	lsls	r1, r2, #5
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	440a      	add	r2, r1
 8008726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800872a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800872e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008732:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
	...

08008744 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	785b      	ldrb	r3, [r3, #1]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d161      	bne.n	8008824 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	4413      	add	r3, r2
 8008768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008776:	d11f      	bne.n	80087b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	0151      	lsls	r1, r2, #5
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	440a      	add	r2, r1
 800878e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008792:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008796:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	0151      	lsls	r1, r2, #5
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	440a      	add	r2, r1
 80087ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	f003 030f 	and.w	r3, r3, #15
 80087c8:	2101      	movs	r1, #1
 80087ca:	fa01 f303 	lsl.w	r3, r1, r3
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	43db      	mvns	r3, r3
 80087d2:	68f9      	ldr	r1, [r7, #12]
 80087d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087d8:	4013      	ands	r3, r2
 80087da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e2:	69da      	ldr	r2, [r3, #28]
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	f003 030f 	and.w	r3, r3, #15
 80087ec:	2101      	movs	r1, #1
 80087ee:	fa01 f303 	lsl.w	r3, r1, r3
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	43db      	mvns	r3, r3
 80087f6:	68f9      	ldr	r1, [r7, #12]
 80087f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087fc:	4013      	ands	r3, r2
 80087fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	0159      	lsls	r1, r3, #5
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	440b      	add	r3, r1
 8008816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800881a:	4619      	mov	r1, r3
 800881c:	4b35      	ldr	r3, [pc, #212]	; (80088f4 <USB_DeactivateEndpoint+0x1b0>)
 800881e:	4013      	ands	r3, r2
 8008820:	600b      	str	r3, [r1, #0]
 8008822:	e060      	b.n	80088e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800883a:	d11f      	bne.n	800887c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	015a      	lsls	r2, r3, #5
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4413      	add	r3, r2
 8008844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	0151      	lsls	r1, r2, #5
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	440a      	add	r2, r1
 8008852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008856:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800885a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	0151      	lsls	r1, r2, #5
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	440a      	add	r2, r1
 8008872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008876:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800887a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	f003 030f 	and.w	r3, r3, #15
 800888c:	2101      	movs	r1, #1
 800888e:	fa01 f303 	lsl.w	r3, r1, r3
 8008892:	041b      	lsls	r3, r3, #16
 8008894:	43db      	mvns	r3, r3
 8008896:	68f9      	ldr	r1, [r7, #12]
 8008898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800889c:	4013      	ands	r3, r2
 800889e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088a6:	69da      	ldr	r2, [r3, #28]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	f003 030f 	and.w	r3, r3, #15
 80088b0:	2101      	movs	r1, #1
 80088b2:	fa01 f303 	lsl.w	r3, r1, r3
 80088b6:	041b      	lsls	r3, r3, #16
 80088b8:	43db      	mvns	r3, r3
 80088ba:	68f9      	ldr	r1, [r7, #12]
 80088bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088c0:	4013      	ands	r3, r2
 80088c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	0159      	lsls	r1, r3, #5
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	440b      	add	r3, r1
 80088da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088de:	4619      	mov	r1, r3
 80088e0:	4b05      	ldr	r3, [pc, #20]	; (80088f8 <USB_DeactivateEndpoint+0x1b4>)
 80088e2:	4013      	ands	r3, r2
 80088e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr
 80088f4:	ec337800 	.word	0xec337800
 80088f8:	eff37800 	.word	0xeff37800

080088fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08a      	sub	sp, #40	; 0x28
 8008900:	af02      	add	r7, sp, #8
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	4613      	mov	r3, r2
 8008908:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	785b      	ldrb	r3, [r3, #1]
 8008918:	2b01      	cmp	r3, #1
 800891a:	f040 815c 	bne.w	8008bd6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d132      	bne.n	800898c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	015a      	lsls	r2, r3, #5
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	4413      	add	r3, r2
 800892e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	0151      	lsls	r1, r2, #5
 8008938:	69fa      	ldr	r2, [r7, #28]
 800893a:	440a      	add	r2, r1
 800893c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008940:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008944:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008948:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	0151      	lsls	r1, r2, #5
 800895c:	69fa      	ldr	r2, [r7, #28]
 800895e:	440a      	add	r2, r1
 8008960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008968:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	015a      	lsls	r2, r3, #5
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	4413      	add	r3, r2
 8008972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	69ba      	ldr	r2, [r7, #24]
 800897a:	0151      	lsls	r1, r2, #5
 800897c:	69fa      	ldr	r2, [r7, #28]
 800897e:	440a      	add	r2, r1
 8008980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008984:	0cdb      	lsrs	r3, r3, #19
 8008986:	04db      	lsls	r3, r3, #19
 8008988:	6113      	str	r3, [r2, #16]
 800898a:	e074      	b.n	8008a76 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	0151      	lsls	r1, r2, #5
 800899e:	69fa      	ldr	r2, [r7, #28]
 80089a0:	440a      	add	r2, r1
 80089a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089a6:	0cdb      	lsrs	r3, r3, #19
 80089a8:	04db      	lsls	r3, r3, #19
 80089aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	69ba      	ldr	r2, [r7, #24]
 80089bc:	0151      	lsls	r1, r2, #5
 80089be:	69fa      	ldr	r2, [r7, #28]
 80089c0:	440a      	add	r2, r1
 80089c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089dc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	6999      	ldr	r1, [r3, #24]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	440b      	add	r3, r1
 80089e8:	1e59      	subs	r1, r3, #1
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80089f2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80089f4:	4b9d      	ldr	r3, [pc, #628]	; (8008c6c <USB_EPStartXfer+0x370>)
 80089f6:	400b      	ands	r3, r1
 80089f8:	69b9      	ldr	r1, [r7, #24]
 80089fa:	0148      	lsls	r0, r1, #5
 80089fc:	69f9      	ldr	r1, [r7, #28]
 80089fe:	4401      	add	r1, r0
 8008a00:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a04:	4313      	orrs	r3, r2
 8008a06:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	015a      	lsls	r2, r3, #5
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	4413      	add	r3, r2
 8008a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a14:	691a      	ldr	r2, [r3, #16]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a1e:	69b9      	ldr	r1, [r7, #24]
 8008a20:	0148      	lsls	r0, r1, #5
 8008a22:	69f9      	ldr	r1, [r7, #28]
 8008a24:	4401      	add	r1, r0
 8008a26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	791b      	ldrb	r3, [r3, #4]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d11f      	bne.n	8008a76 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	0151      	lsls	r1, r2, #5
 8008a48:	69fa      	ldr	r2, [r7, #28]
 8008a4a:	440a      	add	r2, r1
 8008a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008a54:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	0151      	lsls	r1, r2, #5
 8008a68:	69fa      	ldr	r2, [r7, #28]
 8008a6a:	440a      	add	r2, r1
 8008a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a74:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008a76:	79fb      	ldrb	r3, [r7, #7]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d14b      	bne.n	8008b14 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d009      	beq.n	8008a98 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a90:	461a      	mov	r2, r3
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	791b      	ldrb	r3, [r3, #4]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d128      	bne.n	8008af2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d110      	bne.n	8008ad2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	0151      	lsls	r1, r2, #5
 8008ac2:	69fa      	ldr	r2, [r7, #28]
 8008ac4:	440a      	add	r2, r1
 8008ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	e00f      	b.n	8008af2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	0151      	lsls	r1, r2, #5
 8008ae4:	69fa      	ldr	r2, [r7, #28]
 8008ae6:	440a      	add	r2, r1
 8008ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008af0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	015a      	lsls	r2, r3, #5
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	4413      	add	r3, r2
 8008afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	69ba      	ldr	r2, [r7, #24]
 8008b02:	0151      	lsls	r1, r2, #5
 8008b04:	69fa      	ldr	r2, [r7, #28]
 8008b06:	440a      	add	r2, r1
 8008b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	e133      	b.n	8008d7c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	015a      	lsls	r2, r3, #5
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	69ba      	ldr	r2, [r7, #24]
 8008b24:	0151      	lsls	r1, r2, #5
 8008b26:	69fa      	ldr	r2, [r7, #28]
 8008b28:	440a      	add	r2, r1
 8008b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b32:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	791b      	ldrb	r3, [r3, #4]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d015      	beq.n	8008b68 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 811b 	beq.w	8008d7c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	f003 030f 	and.w	r3, r3, #15
 8008b56:	2101      	movs	r1, #1
 8008b58:	fa01 f303 	lsl.w	r3, r1, r3
 8008b5c:	69f9      	ldr	r1, [r7, #28]
 8008b5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b62:	4313      	orrs	r3, r2
 8008b64:	634b      	str	r3, [r1, #52]	; 0x34
 8008b66:	e109      	b.n	8008d7c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d110      	bne.n	8008b9a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	69ba      	ldr	r2, [r7, #24]
 8008b88:	0151      	lsls	r1, r2, #5
 8008b8a:	69fa      	ldr	r2, [r7, #28]
 8008b8c:	440a      	add	r2, r1
 8008b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b96:	6013      	str	r3, [r2, #0]
 8008b98:	e00f      	b.n	8008bba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	015a      	lsls	r2, r3, #5
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	69ba      	ldr	r2, [r7, #24]
 8008baa:	0151      	lsls	r1, r2, #5
 8008bac:	69fa      	ldr	r2, [r7, #28]
 8008bae:	440a      	add	r2, r1
 8008bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bb8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	6919      	ldr	r1, [r3, #16]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	781a      	ldrb	r2, [r3, #0]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	b298      	uxth	r0, r3
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	4603      	mov	r3, r0
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 fade 	bl	8009190 <USB_WritePacket>
 8008bd4:	e0d2      	b.n	8008d7c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	015a      	lsls	r2, r3, #5
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	4413      	add	r3, r2
 8008bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	69ba      	ldr	r2, [r7, #24]
 8008be6:	0151      	lsls	r1, r2, #5
 8008be8:	69fa      	ldr	r2, [r7, #28]
 8008bea:	440a      	add	r2, r1
 8008bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bf0:	0cdb      	lsrs	r3, r3, #19
 8008bf2:	04db      	lsls	r3, r3, #19
 8008bf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	0151      	lsls	r1, r2, #5
 8008c08:	69fa      	ldr	r2, [r7, #28]
 8008c0a:	440a      	add	r2, r1
 8008c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d126      	bne.n	8008c70 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2e:	691a      	ldr	r2, [r3, #16]
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c38:	69b9      	ldr	r1, [r7, #24]
 8008c3a:	0148      	lsls	r0, r1, #5
 8008c3c:	69f9      	ldr	r1, [r7, #28]
 8008c3e:	4401      	add	r1, r0
 8008c40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c44:	4313      	orrs	r3, r2
 8008c46:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	0151      	lsls	r1, r2, #5
 8008c5a:	69fa      	ldr	r2, [r7, #28]
 8008c5c:	440a      	add	r2, r1
 8008c5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c66:	6113      	str	r3, [r2, #16]
 8008c68:	e03a      	b.n	8008ce0 <USB_EPStartXfer+0x3e4>
 8008c6a:	bf00      	nop
 8008c6c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	699a      	ldr	r2, [r3, #24]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	4413      	add	r3, r2
 8008c7a:	1e5a      	subs	r2, r3, #1
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c84:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	8afa      	ldrh	r2, [r7, #22]
 8008c8c:	fb03 f202 	mul.w	r2, r3, r2
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca0:	691a      	ldr	r2, [r3, #16]
 8008ca2:	8afb      	ldrh	r3, [r7, #22]
 8008ca4:	04d9      	lsls	r1, r3, #19
 8008ca6:	4b38      	ldr	r3, [pc, #224]	; (8008d88 <USB_EPStartXfer+0x48c>)
 8008ca8:	400b      	ands	r3, r1
 8008caa:	69b9      	ldr	r1, [r7, #24]
 8008cac:	0148      	lsls	r0, r1, #5
 8008cae:	69f9      	ldr	r1, [r7, #28]
 8008cb0:	4401      	add	r1, r0
 8008cb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc6:	691a      	ldr	r2, [r3, #16]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	69db      	ldr	r3, [r3, #28]
 8008ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cd0:	69b9      	ldr	r1, [r7, #24]
 8008cd2:	0148      	lsls	r0, r1, #5
 8008cd4:	69f9      	ldr	r1, [r7, #28]
 8008cd6:	4401      	add	r1, r0
 8008cd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008ce0:	79fb      	ldrb	r3, [r7, #7]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d10d      	bne.n	8008d02 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d009      	beq.n	8008d02 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	6919      	ldr	r1, [r3, #16]
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfe:	460a      	mov	r2, r1
 8008d00:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	791b      	ldrb	r3, [r3, #4]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d128      	bne.n	8008d5c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d110      	bne.n	8008d3c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	015a      	lsls	r2, r3, #5
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	4413      	add	r3, r2
 8008d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	69ba      	ldr	r2, [r7, #24]
 8008d2a:	0151      	lsls	r1, r2, #5
 8008d2c:	69fa      	ldr	r2, [r7, #28]
 8008d2e:	440a      	add	r2, r1
 8008d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d38:	6013      	str	r3, [r2, #0]
 8008d3a:	e00f      	b.n	8008d5c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	69ba      	ldr	r2, [r7, #24]
 8008d4c:	0151      	lsls	r1, r2, #5
 8008d4e:	69fa      	ldr	r2, [r7, #28]
 8008d50:	440a      	add	r2, r1
 8008d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d5a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	015a      	lsls	r2, r3, #5
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	69ba      	ldr	r2, [r7, #24]
 8008d6c:	0151      	lsls	r1, r2, #5
 8008d6e:	69fa      	ldr	r2, [r7, #28]
 8008d70:	440a      	add	r2, r1
 8008d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3720      	adds	r7, #32
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	1ff80000 	.word	0x1ff80000

08008d8c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	4613      	mov	r3, r2
 8008d98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	785b      	ldrb	r3, [r3, #1]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	f040 80ce 	bne.w	8008f4a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d132      	bne.n	8008e1c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	0151      	lsls	r1, r2, #5
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	440a      	add	r2, r1
 8008dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008dd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008dd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	015a      	lsls	r2, r3, #5
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	4413      	add	r3, r2
 8008de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	0151      	lsls	r1, r2, #5
 8008dec:	697a      	ldr	r2, [r7, #20]
 8008dee:	440a      	add	r2, r1
 8008df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008df4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008df8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	015a      	lsls	r2, r3, #5
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	693a      	ldr	r2, [r7, #16]
 8008e0a:	0151      	lsls	r1, r2, #5
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	440a      	add	r2, r1
 8008e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e14:	0cdb      	lsrs	r3, r3, #19
 8008e16:	04db      	lsls	r3, r3, #19
 8008e18:	6113      	str	r3, [r2, #16]
 8008e1a:	e04e      	b.n	8008eba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	0151      	lsls	r1, r2, #5
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	440a      	add	r2, r1
 8008e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e36:	0cdb      	lsrs	r3, r3, #19
 8008e38:	04db      	lsls	r3, r3, #19
 8008e3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	0151      	lsls	r1, r2, #5
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	440a      	add	r2, r1
 8008e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e5e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	699a      	ldr	r2, [r3, #24]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d903      	bls.n	8008e74 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	68da      	ldr	r2, [r3, #12]
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	0151      	lsls	r1, r2, #5
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	440a      	add	r2, r1
 8008e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea0:	691a      	ldr	r2, [r3, #16]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008eaa:	6939      	ldr	r1, [r7, #16]
 8008eac:	0148      	lsls	r0, r1, #5
 8008eae:	6979      	ldr	r1, [r7, #20]
 8008eb0:	4401      	add	r1, r0
 8008eb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008eba:	79fb      	ldrb	r3, [r7, #7]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d11e      	bne.n	8008efe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d009      	beq.n	8008edc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	0151      	lsls	r1, r2, #5
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	440a      	add	r2, r1
 8008ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ef6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008efa:	6013      	str	r3, [r2, #0]
 8008efc:	e097      	b.n	800902e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	015a      	lsls	r2, r3, #5
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	4413      	add	r3, r2
 8008f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	0151      	lsls	r1, r2, #5
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	440a      	add	r2, r1
 8008f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f1c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f000 8083 	beq.w	800902e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	f003 030f 	and.w	r3, r3, #15
 8008f38:	2101      	movs	r1, #1
 8008f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f3e:	6979      	ldr	r1, [r7, #20]
 8008f40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f44:	4313      	orrs	r3, r2
 8008f46:	634b      	str	r3, [r1, #52]	; 0x34
 8008f48:	e071      	b.n	800902e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	0151      	lsls	r1, r2, #5
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	440a      	add	r2, r1
 8008f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f64:	0cdb      	lsrs	r3, r3, #19
 8008f66:	04db      	lsls	r3, r3, #19
 8008f68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	0151      	lsls	r1, r2, #5
 8008f7c:	697a      	ldr	r2, [r7, #20]
 8008f7e:	440a      	add	r2, r1
 8008f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f8c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d003      	beq.n	8008f9e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	68da      	ldr	r2, [r3, #12]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	68da      	ldr	r2, [r3, #12]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	0151      	lsls	r1, r2, #5
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	440a      	add	r2, r1
 8008fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	015a      	lsls	r2, r3, #5
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	4413      	add	r3, r2
 8008fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd2:	691a      	ldr	r2, [r3, #16]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	69db      	ldr	r3, [r3, #28]
 8008fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fdc:	6939      	ldr	r1, [r7, #16]
 8008fde:	0148      	lsls	r0, r1, #5
 8008fe0:	6979      	ldr	r1, [r7, #20]
 8008fe2:	4401      	add	r1, r0
 8008fe4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008fec:	79fb      	ldrb	r3, [r7, #7]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d10d      	bne.n	800900e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d009      	beq.n	800900e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	6919      	ldr	r1, [r3, #16]
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	015a      	lsls	r2, r3, #5
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	4413      	add	r3, r2
 8009006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800900a:	460a      	mov	r2, r1
 800900c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	015a      	lsls	r2, r3, #5
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	4413      	add	r3, r2
 8009016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	0151      	lsls	r1, r2, #5
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	440a      	add	r2, r1
 8009024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009028:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800902c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	371c      	adds	r7, #28
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800903c:	b480      	push	{r7}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009046:	2300      	movs	r3, #0
 8009048:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800904a:	2300      	movs	r3, #0
 800904c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	785b      	ldrb	r3, [r3, #1]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d14a      	bne.n	80090f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	015a      	lsls	r2, r3, #5
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	4413      	add	r3, r2
 8009064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800906e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009072:	f040 8086 	bne.w	8009182 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	015a      	lsls	r2, r3, #5
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	4413      	add	r3, r2
 8009080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	7812      	ldrb	r2, [r2, #0]
 800908a:	0151      	lsls	r1, r2, #5
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	440a      	add	r2, r1
 8009090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009094:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009098:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	015a      	lsls	r2, r3, #5
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	4413      	add	r3, r2
 80090a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	7812      	ldrb	r2, [r2, #0]
 80090ae:	0151      	lsls	r1, r2, #5
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	440a      	add	r2, r1
 80090b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	3301      	adds	r3, #1
 80090c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d902      	bls.n	80090d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	75fb      	strb	r3, [r7, #23]
          break;
 80090d2:	e056      	b.n	8009182 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090ec:	d0e7      	beq.n	80090be <USB_EPStopXfer+0x82>
 80090ee:	e048      	b.n	8009182 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009108:	d13b      	bne.n	8009182 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	015a      	lsls	r2, r3, #5
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	4413      	add	r3, r2
 8009114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	7812      	ldrb	r2, [r2, #0]
 800911e:	0151      	lsls	r1, r2, #5
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	440a      	add	r2, r1
 8009124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009128:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800912c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	7812      	ldrb	r2, [r2, #0]
 8009142:	0151      	lsls	r1, r2, #5
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	440a      	add	r2, r1
 8009148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800914c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009150:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	3301      	adds	r3, #1
 8009156:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f242 7210 	movw	r2, #10000	; 0x2710
 800915e:	4293      	cmp	r3, r2
 8009160:	d902      	bls.n	8009168 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	75fb      	strb	r3, [r7, #23]
          break;
 8009166:	e00c      	b.n	8009182 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	015a      	lsls	r2, r3, #5
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	4413      	add	r3, r2
 8009172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800917c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009180:	d0e7      	beq.n	8009152 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009182:	7dfb      	ldrb	r3, [r7, #23]
}
 8009184:	4618      	mov	r0, r3
 8009186:	371c      	adds	r7, #28
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009190:	b480      	push	{r7}
 8009192:	b089      	sub	sp, #36	; 0x24
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	4611      	mov	r1, r2
 800919c:	461a      	mov	r2, r3
 800919e:	460b      	mov	r3, r1
 80091a0:	71fb      	strb	r3, [r7, #7]
 80091a2:	4613      	mov	r3, r2
 80091a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80091ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d123      	bne.n	80091fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80091b6:	88bb      	ldrh	r3, [r7, #4]
 80091b8:	3303      	adds	r3, #3
 80091ba:	089b      	lsrs	r3, r3, #2
 80091bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80091be:	2300      	movs	r3, #0
 80091c0:	61bb      	str	r3, [r7, #24]
 80091c2:	e018      	b.n	80091f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	031a      	lsls	r2, r3, #12
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	4413      	add	r3, r2
 80091cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091d0:	461a      	mov	r2, r3
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	3301      	adds	r3, #1
 80091dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	3301      	adds	r3, #1
 80091e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	3301      	adds	r3, #1
 80091e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	3301      	adds	r3, #1
 80091ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	3301      	adds	r3, #1
 80091f4:	61bb      	str	r3, [r7, #24]
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d3e2      	bcc.n	80091c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3724      	adds	r7, #36	; 0x24
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800920c:	b480      	push	{r7}
 800920e:	b08b      	sub	sp, #44	; 0x2c
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	4613      	mov	r3, r2
 8009218:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009222:	88fb      	ldrh	r3, [r7, #6]
 8009224:	089b      	lsrs	r3, r3, #2
 8009226:	b29b      	uxth	r3, r3
 8009228:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800922a:	88fb      	ldrh	r3, [r7, #6]
 800922c:	f003 0303 	and.w	r3, r3, #3
 8009230:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009232:	2300      	movs	r3, #0
 8009234:	623b      	str	r3, [r7, #32]
 8009236:	e014      	b.n	8009262 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	601a      	str	r2, [r3, #0]
    pDest++;
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009246:	3301      	adds	r3, #1
 8009248:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	3301      	adds	r3, #1
 800924e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	3301      	adds	r3, #1
 8009254:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009258:	3301      	adds	r3, #1
 800925a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800925c:	6a3b      	ldr	r3, [r7, #32]
 800925e:	3301      	adds	r3, #1
 8009260:	623b      	str	r3, [r7, #32]
 8009262:	6a3a      	ldr	r2, [r7, #32]
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	429a      	cmp	r2, r3
 8009268:	d3e6      	bcc.n	8009238 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800926a:	8bfb      	ldrh	r3, [r7, #30]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d01e      	beq.n	80092ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800927a:	461a      	mov	r2, r3
 800927c:	f107 0310 	add.w	r3, r7, #16
 8009280:	6812      	ldr	r2, [r2, #0]
 8009282:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009284:	693a      	ldr	r2, [r7, #16]
 8009286:	6a3b      	ldr	r3, [r7, #32]
 8009288:	b2db      	uxtb	r3, r3
 800928a:	00db      	lsls	r3, r3, #3
 800928c:	fa22 f303 	lsr.w	r3, r2, r3
 8009290:	b2da      	uxtb	r2, r3
 8009292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009294:	701a      	strb	r2, [r3, #0]
      i++;
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	3301      	adds	r3, #1
 800929a:	623b      	str	r3, [r7, #32]
      pDest++;
 800929c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929e:	3301      	adds	r3, #1
 80092a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80092a2:	8bfb      	ldrh	r3, [r7, #30]
 80092a4:	3b01      	subs	r3, #1
 80092a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80092a8:	8bfb      	ldrh	r3, [r7, #30]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1ea      	bne.n	8009284 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	372c      	adds	r7, #44	; 0x2c
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	785b      	ldrb	r3, [r3, #1]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d12c      	bne.n	8009332 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	db12      	blt.n	8009310 <USB_EPSetStall+0x54>
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00f      	beq.n	8009310 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	015a      	lsls	r2, r3, #5
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	0151      	lsls	r1, r2, #5
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	440a      	add	r2, r1
 8009306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800930a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800930e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	015a      	lsls	r2, r3, #5
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4413      	add	r3, r2
 8009318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	0151      	lsls	r1, r2, #5
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	440a      	add	r2, r1
 8009326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800932a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800932e:	6013      	str	r3, [r2, #0]
 8009330:	e02b      	b.n	800938a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	015a      	lsls	r2, r3, #5
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	4413      	add	r3, r2
 800933a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	db12      	blt.n	800936a <USB_EPSetStall+0xae>
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00f      	beq.n	800936a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	015a      	lsls	r2, r3, #5
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	4413      	add	r3, r2
 8009352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	0151      	lsls	r1, r2, #5
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	440a      	add	r2, r1
 8009360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009364:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009368:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68ba      	ldr	r2, [r7, #8]
 800937a:	0151      	lsls	r1, r2, #5
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	440a      	add	r2, r1
 8009380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009384:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009388:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3714      	adds	r7, #20
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	785b      	ldrb	r3, [r3, #1]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d128      	bne.n	8009406 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	015a      	lsls	r2, r3, #5
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4413      	add	r3, r2
 80093bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	0151      	lsls	r1, r2, #5
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	440a      	add	r2, r1
 80093ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	791b      	ldrb	r3, [r3, #4]
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d003      	beq.n	80093e4 <USB_EPClearStall+0x4c>
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	791b      	ldrb	r3, [r3, #4]
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d138      	bne.n	8009456 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	015a      	lsls	r2, r3, #5
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	4413      	add	r3, r2
 80093ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	0151      	lsls	r1, r2, #5
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	440a      	add	r2, r1
 80093fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	e027      	b.n	8009456 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	4413      	add	r3, r2
 800940e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	0151      	lsls	r1, r2, #5
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	440a      	add	r2, r1
 800941c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009420:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009424:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	791b      	ldrb	r3, [r3, #4]
 800942a:	2b03      	cmp	r3, #3
 800942c:	d003      	beq.n	8009436 <USB_EPClearStall+0x9e>
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	791b      	ldrb	r3, [r3, #4]
 8009432:	2b02      	cmp	r3, #2
 8009434:	d10f      	bne.n	8009456 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	015a      	lsls	r2, r3, #5
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	4413      	add	r3, r2
 800943e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	0151      	lsls	r1, r2, #5
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	440a      	add	r2, r1
 800944c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009454:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009482:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009486:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	78fb      	ldrb	r3, [r7, #3]
 8009492:	011b      	lsls	r3, r3, #4
 8009494:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009498:	68f9      	ldr	r1, [r7, #12]
 800949a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800949e:	4313      	orrs	r3, r2
 80094a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094ca:	f023 0303 	bic.w	r3, r3, #3
 80094ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094de:	f023 0302 	bic.w	r3, r3, #2
 80094e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3714      	adds	r7, #20
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80094f2:	b480      	push	{r7}
 80094f4:	b085      	sub	sp, #20
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800950c:	f023 0303 	bic.w	r3, r3, #3
 8009510:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009520:	f043 0302 	orr.w	r3, r3, #2
 8009524:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	4013      	ands	r3, r2
 800954a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800954c:	68fb      	ldr	r3, [r7, #12]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800955a:	b480      	push	{r7}
 800955c:	b085      	sub	sp, #20
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009576:	69db      	ldr	r3, [r3, #28]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	4013      	ands	r3, r2
 800957c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	0c1b      	lsrs	r3, r3, #16
}
 8009582:	4618      	mov	r0, r3
 8009584:	3714      	adds	r7, #20
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800958e:	b480      	push	{r7}
 8009590:	b085      	sub	sp, #20
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095aa:	69db      	ldr	r3, [r3, #28]
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	4013      	ands	r3, r2
 80095b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	b29b      	uxth	r3, r3
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80095c2:	b480      	push	{r7}
 80095c4:	b085      	sub	sp, #20
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	460b      	mov	r3, r1
 80095cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80095d2:	78fb      	ldrb	r3, [r7, #3]
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095e8:	695b      	ldr	r3, [r3, #20]
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	4013      	ands	r3, r2
 80095ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80095f0:	68bb      	ldr	r3, [r7, #8]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80095fe:	b480      	push	{r7}
 8009600:	b087      	sub	sp, #28
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	460b      	mov	r3, r1
 8009608:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800961e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009620:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009622:	78fb      	ldrb	r3, [r7, #3]
 8009624:	f003 030f 	and.w	r3, r3, #15
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	fa22 f303 	lsr.w	r3, r2, r3
 800962e:	01db      	lsls	r3, r3, #7
 8009630:	b2db      	uxtb	r3, r3
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	4313      	orrs	r3, r2
 8009636:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009638:	78fb      	ldrb	r3, [r7, #3]
 800963a:	015a      	lsls	r2, r3, #5
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	4413      	add	r3, r2
 8009640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	693a      	ldr	r2, [r7, #16]
 8009648:	4013      	ands	r3, r2
 800964a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800964c:	68bb      	ldr	r3, [r7, #8]
}
 800964e:	4618      	mov	r0, r3
 8009650:	371c      	adds	r7, #28
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	f003 0301 	and.w	r3, r3, #1
}
 800966a:	4618      	mov	r0, r3
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009676:	b480      	push	{r7}
 8009678:	b085      	sub	sp, #20
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009690:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009694:	f023 0307 	bic.w	r3, r3, #7
 8009698:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3714      	adds	r7, #20
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	460b      	mov	r3, r1
 80096c6:	607a      	str	r2, [r7, #4]
 80096c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	333c      	adds	r3, #60	; 0x3c
 80096d2:	3304      	adds	r3, #4
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	4a26      	ldr	r2, [pc, #152]	; (8009774 <USB_EP0_OutStart+0xb8>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d90a      	bls.n	80096f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096f0:	d101      	bne.n	80096f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80096f2:	2300      	movs	r3, #0
 80096f4:	e037      	b.n	8009766 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fc:	461a      	mov	r2, r3
 80096fe:	2300      	movs	r3, #0
 8009700:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	697a      	ldr	r2, [r7, #20]
 800970c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009710:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009714:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009724:	f043 0318 	orr.w	r3, r3, #24
 8009728:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009738:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800973c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800973e:	7afb      	ldrb	r3, [r7, #11]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d10f      	bne.n	8009764 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800974a:	461a      	mov	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	697a      	ldr	r2, [r7, #20]
 800975a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800975e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009762:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	371c      	adds	r7, #28
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	4f54300a 	.word	0x4f54300a

08009778 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009780:	2300      	movs	r3, #0
 8009782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	3301      	adds	r3, #1
 8009788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4a13      	ldr	r2, [pc, #76]	; (80097dc <USB_CoreReset+0x64>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d901      	bls.n	8009796 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009792:	2303      	movs	r3, #3
 8009794:	e01b      	b.n	80097ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	2b00      	cmp	r3, #0
 800979c:	daf2      	bge.n	8009784 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800979e:	2300      	movs	r3, #0
 80097a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	f043 0201 	orr.w	r2, r3, #1
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3301      	adds	r3, #1
 80097b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4a09      	ldr	r2, [pc, #36]	; (80097dc <USB_CoreReset+0x64>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d901      	bls.n	80097c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80097bc:	2303      	movs	r3, #3
 80097be:	e006      	b.n	80097ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d0f0      	beq.n	80097ae <USB_CoreReset+0x36>

  return HAL_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3714      	adds	r7, #20
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	00030d40 	.word	0x00030d40

080097e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	460b      	mov	r3, r1
 80097ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80097ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80097f0:	f002 fc28 	bl	800c044 <USBD_static_malloc>
 80097f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d109      	bne.n	8009810 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	32b0      	adds	r2, #176	; 0xb0
 8009806:	2100      	movs	r1, #0
 8009808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800980c:	2302      	movs	r3, #2
 800980e:	e0d4      	b.n	80099ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009810:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009814:	2100      	movs	r1, #0
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f002 fc7c 	bl	800c114 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	32b0      	adds	r2, #176	; 0xb0
 8009826:	68f9      	ldr	r1, [r7, #12]
 8009828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	32b0      	adds	r2, #176	; 0xb0
 8009836:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	7c1b      	ldrb	r3, [r3, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d138      	bne.n	80098ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009848:	4b5e      	ldr	r3, [pc, #376]	; (80099c4 <USBD_CDC_Init+0x1e4>)
 800984a:	7819      	ldrb	r1, [r3, #0]
 800984c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009850:	2202      	movs	r2, #2
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f002 fad3 	bl	800bdfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009858:	4b5a      	ldr	r3, [pc, #360]	; (80099c4 <USBD_CDC_Init+0x1e4>)
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	f003 020f 	and.w	r2, r3, #15
 8009860:	6879      	ldr	r1, [r7, #4]
 8009862:	4613      	mov	r3, r2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4413      	add	r3, r2
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	440b      	add	r3, r1
 800986c:	3324      	adds	r3, #36	; 0x24
 800986e:	2201      	movs	r2, #1
 8009870:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009872:	4b55      	ldr	r3, [pc, #340]	; (80099c8 <USBD_CDC_Init+0x1e8>)
 8009874:	7819      	ldrb	r1, [r3, #0]
 8009876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800987a:	2202      	movs	r2, #2
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f002 fabe 	bl	800bdfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009882:	4b51      	ldr	r3, [pc, #324]	; (80099c8 <USBD_CDC_Init+0x1e8>)
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	f003 020f 	and.w	r2, r3, #15
 800988a:	6879      	ldr	r1, [r7, #4]
 800988c:	4613      	mov	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	440b      	add	r3, r1
 8009896:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800989a:	2201      	movs	r2, #1
 800989c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800989e:	4b4b      	ldr	r3, [pc, #300]	; (80099cc <USBD_CDC_Init+0x1ec>)
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	f003 020f 	and.w	r2, r3, #15
 80098a6:	6879      	ldr	r1, [r7, #4]
 80098a8:	4613      	mov	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	4413      	add	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	440b      	add	r3, r1
 80098b2:	3326      	adds	r3, #38	; 0x26
 80098b4:	2210      	movs	r2, #16
 80098b6:	801a      	strh	r2, [r3, #0]
 80098b8:	e035      	b.n	8009926 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80098ba:	4b42      	ldr	r3, [pc, #264]	; (80099c4 <USBD_CDC_Init+0x1e4>)
 80098bc:	7819      	ldrb	r1, [r3, #0]
 80098be:	2340      	movs	r3, #64	; 0x40
 80098c0:	2202      	movs	r2, #2
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f002 fa9b 	bl	800bdfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80098c8:	4b3e      	ldr	r3, [pc, #248]	; (80099c4 <USBD_CDC_Init+0x1e4>)
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	f003 020f 	and.w	r2, r3, #15
 80098d0:	6879      	ldr	r1, [r7, #4]
 80098d2:	4613      	mov	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	440b      	add	r3, r1
 80098dc:	3324      	adds	r3, #36	; 0x24
 80098de:	2201      	movs	r2, #1
 80098e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80098e2:	4b39      	ldr	r3, [pc, #228]	; (80099c8 <USBD_CDC_Init+0x1e8>)
 80098e4:	7819      	ldrb	r1, [r3, #0]
 80098e6:	2340      	movs	r3, #64	; 0x40
 80098e8:	2202      	movs	r2, #2
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f002 fa87 	bl	800bdfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80098f0:	4b35      	ldr	r3, [pc, #212]	; (80099c8 <USBD_CDC_Init+0x1e8>)
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	f003 020f 	and.w	r2, r3, #15
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	440b      	add	r3, r1
 8009904:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009908:	2201      	movs	r2, #1
 800990a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800990c:	4b2f      	ldr	r3, [pc, #188]	; (80099cc <USBD_CDC_Init+0x1ec>)
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	f003 020f 	and.w	r2, r3, #15
 8009914:	6879      	ldr	r1, [r7, #4]
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	440b      	add	r3, r1
 8009920:	3326      	adds	r3, #38	; 0x26
 8009922:	2210      	movs	r2, #16
 8009924:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009926:	4b29      	ldr	r3, [pc, #164]	; (80099cc <USBD_CDC_Init+0x1ec>)
 8009928:	7819      	ldrb	r1, [r3, #0]
 800992a:	2308      	movs	r3, #8
 800992c:	2203      	movs	r2, #3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f002 fa65 	bl	800bdfe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009934:	4b25      	ldr	r3, [pc, #148]	; (80099cc <USBD_CDC_Init+0x1ec>)
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	f003 020f 	and.w	r2, r3, #15
 800993c:	6879      	ldr	r1, [r7, #4]
 800993e:	4613      	mov	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	440b      	add	r3, r1
 8009948:	3324      	adds	r3, #36	; 0x24
 800994a:	2201      	movs	r2, #1
 800994c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	33b0      	adds	r3, #176	; 0xb0
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2200      	movs	r2, #0
 8009976:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009984:	2302      	movs	r3, #2
 8009986:	e018      	b.n	80099ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	7c1b      	ldrb	r3, [r3, #16]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10a      	bne.n	80099a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009990:	4b0d      	ldr	r3, [pc, #52]	; (80099c8 <USBD_CDC_Init+0x1e8>)
 8009992:	7819      	ldrb	r1, [r3, #0]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800999a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f002 fb1c 	bl	800bfdc <USBD_LL_PrepareReceive>
 80099a4:	e008      	b.n	80099b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80099a6:	4b08      	ldr	r3, [pc, #32]	; (80099c8 <USBD_CDC_Init+0x1e8>)
 80099a8:	7819      	ldrb	r1, [r3, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099b0:	2340      	movs	r3, #64	; 0x40
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f002 fb12 	bl	800bfdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	20000093 	.word	0x20000093
 80099c8:	20000094 	.word	0x20000094
 80099cc:	20000095 	.word	0x20000095

080099d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	460b      	mov	r3, r1
 80099da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80099dc:	4b3a      	ldr	r3, [pc, #232]	; (8009ac8 <USBD_CDC_DeInit+0xf8>)
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	4619      	mov	r1, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f002 fa31 	bl	800be4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80099e8:	4b37      	ldr	r3, [pc, #220]	; (8009ac8 <USBD_CDC_DeInit+0xf8>)
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	f003 020f 	and.w	r2, r3, #15
 80099f0:	6879      	ldr	r1, [r7, #4]
 80099f2:	4613      	mov	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4413      	add	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	440b      	add	r3, r1
 80099fc:	3324      	adds	r3, #36	; 0x24
 80099fe:	2200      	movs	r2, #0
 8009a00:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009a02:	4b32      	ldr	r3, [pc, #200]	; (8009acc <USBD_CDC_DeInit+0xfc>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f002 fa1e 	bl	800be4a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009a0e:	4b2f      	ldr	r3, [pc, #188]	; (8009acc <USBD_CDC_DeInit+0xfc>)
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	f003 020f 	and.w	r2, r3, #15
 8009a16:	6879      	ldr	r1, [r7, #4]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	440b      	add	r3, r1
 8009a22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009a26:	2200      	movs	r2, #0
 8009a28:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009a2a:	4b29      	ldr	r3, [pc, #164]	; (8009ad0 <USBD_CDC_DeInit+0x100>)
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f002 fa0a 	bl	800be4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009a36:	4b26      	ldr	r3, [pc, #152]	; (8009ad0 <USBD_CDC_DeInit+0x100>)
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	f003 020f 	and.w	r2, r3, #15
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	4613      	mov	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	440b      	add	r3, r1
 8009a4a:	3324      	adds	r3, #36	; 0x24
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009a50:	4b1f      	ldr	r3, [pc, #124]	; (8009ad0 <USBD_CDC_DeInit+0x100>)
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	f003 020f 	and.w	r2, r3, #15
 8009a58:	6879      	ldr	r1, [r7, #4]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4413      	add	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	440b      	add	r3, r1
 8009a64:	3326      	adds	r3, #38	; 0x26
 8009a66:	2200      	movs	r2, #0
 8009a68:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	32b0      	adds	r2, #176	; 0xb0
 8009a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d01f      	beq.n	8009abc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	33b0      	adds	r3, #176	; 0xb0
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	32b0      	adds	r2, #176	; 0xb0
 8009a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f002 fade 	bl	800c060 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	32b0      	adds	r2, #176	; 0xb0
 8009aae:	2100      	movs	r1, #0
 8009ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	20000093 	.word	0x20000093
 8009acc:	20000094 	.word	0x20000094
 8009ad0:	20000095 	.word	0x20000095

08009ad4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	32b0      	adds	r2, #176	; 0xb0
 8009ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009af2:	2300      	movs	r3, #0
 8009af4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d101      	bne.n	8009b04 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009b00:	2303      	movs	r3, #3
 8009b02:	e0bf      	b.n	8009c84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d050      	beq.n	8009bb2 <USBD_CDC_Setup+0xde>
 8009b10:	2b20      	cmp	r3, #32
 8009b12:	f040 80af 	bne.w	8009c74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	88db      	ldrh	r3, [r3, #6]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d03a      	beq.n	8009b94 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	b25b      	sxtb	r3, r3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	da1b      	bge.n	8009b60 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	33b0      	adds	r3, #176	; 0xb0
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	4413      	add	r3, r2
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009b3e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009b40:	683a      	ldr	r2, [r7, #0]
 8009b42:	88d2      	ldrh	r2, [r2, #6]
 8009b44:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	88db      	ldrh	r3, [r3, #6]
 8009b4a:	2b07      	cmp	r3, #7
 8009b4c:	bf28      	it	cs
 8009b4e:	2307      	movcs	r3, #7
 8009b50:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	89fa      	ldrh	r2, [r7, #14]
 8009b56:	4619      	mov	r1, r3
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f001 fd43 	bl	800b5e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009b5e:	e090      	b.n	8009c82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	785a      	ldrb	r2, [r3, #1]
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	88db      	ldrh	r3, [r3, #6]
 8009b6e:	2b3f      	cmp	r3, #63	; 0x3f
 8009b70:	d803      	bhi.n	8009b7a <USBD_CDC_Setup+0xa6>
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	88db      	ldrh	r3, [r3, #6]
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	e000      	b.n	8009b7c <USBD_CDC_Setup+0xa8>
 8009b7a:	2240      	movs	r2, #64	; 0x40
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009b82:	6939      	ldr	r1, [r7, #16]
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f001 fd55 	bl	800b63c <USBD_CtlPrepareRx>
      break;
 8009b92:	e076      	b.n	8009c82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	33b0      	adds	r3, #176	; 0xb0
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	4413      	add	r3, r2
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	683a      	ldr	r2, [r7, #0]
 8009ba8:	7850      	ldrb	r0, [r2, #1]
 8009baa:	2200      	movs	r2, #0
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	4798      	blx	r3
      break;
 8009bb0:	e067      	b.n	8009c82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	785b      	ldrb	r3, [r3, #1]
 8009bb6:	2b0b      	cmp	r3, #11
 8009bb8:	d851      	bhi.n	8009c5e <USBD_CDC_Setup+0x18a>
 8009bba:	a201      	add	r2, pc, #4	; (adr r2, 8009bc0 <USBD_CDC_Setup+0xec>)
 8009bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc0:	08009bf1 	.word	0x08009bf1
 8009bc4:	08009c6d 	.word	0x08009c6d
 8009bc8:	08009c5f 	.word	0x08009c5f
 8009bcc:	08009c5f 	.word	0x08009c5f
 8009bd0:	08009c5f 	.word	0x08009c5f
 8009bd4:	08009c5f 	.word	0x08009c5f
 8009bd8:	08009c5f 	.word	0x08009c5f
 8009bdc:	08009c5f 	.word	0x08009c5f
 8009be0:	08009c5f 	.word	0x08009c5f
 8009be4:	08009c5f 	.word	0x08009c5f
 8009be8:	08009c1b 	.word	0x08009c1b
 8009bec:	08009c45 	.word	0x08009c45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	2b03      	cmp	r3, #3
 8009bfa:	d107      	bne.n	8009c0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009bfc:	f107 030a 	add.w	r3, r7, #10
 8009c00:	2202      	movs	r2, #2
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f001 fced 	bl	800b5e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c0a:	e032      	b.n	8009c72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009c0c:	6839      	ldr	r1, [r7, #0]
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f001 fc77 	bl	800b502 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c14:	2303      	movs	r3, #3
 8009c16:	75fb      	strb	r3, [r7, #23]
          break;
 8009c18:	e02b      	b.n	8009c72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b03      	cmp	r3, #3
 8009c24:	d107      	bne.n	8009c36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009c26:	f107 030d 	add.w	r3, r7, #13
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f001 fcd8 	bl	800b5e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c34:	e01d      	b.n	8009c72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f001 fc62 	bl	800b502 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	75fb      	strb	r3, [r7, #23]
          break;
 8009c42:	e016      	b.n	8009c72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b03      	cmp	r3, #3
 8009c4e:	d00f      	beq.n	8009c70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f001 fc55 	bl	800b502 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009c5c:	e008      	b.n	8009c70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009c5e:	6839      	ldr	r1, [r7, #0]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f001 fc4e 	bl	800b502 <USBD_CtlError>
          ret = USBD_FAIL;
 8009c66:	2303      	movs	r3, #3
 8009c68:	75fb      	strb	r3, [r7, #23]
          break;
 8009c6a:	e002      	b.n	8009c72 <USBD_CDC_Setup+0x19e>
          break;
 8009c6c:	bf00      	nop
 8009c6e:	e008      	b.n	8009c82 <USBD_CDC_Setup+0x1ae>
          break;
 8009c70:	bf00      	nop
      }
      break;
 8009c72:	e006      	b.n	8009c82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f001 fc43 	bl	800b502 <USBD_CtlError>
      ret = USBD_FAIL;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c80:	bf00      	nop
  }

  return (uint8_t)ret;
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3718      	adds	r7, #24
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	32b0      	adds	r2, #176	; 0xb0
 8009caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d101      	bne.n	8009cb6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e065      	b.n	8009d82 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	32b0      	adds	r2, #176	; 0xb0
 8009cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009cc6:	78fb      	ldrb	r3, [r7, #3]
 8009cc8:	f003 020f 	and.w	r2, r3, #15
 8009ccc:	6879      	ldr	r1, [r7, #4]
 8009cce:	4613      	mov	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4413      	add	r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	440b      	add	r3, r1
 8009cd8:	3318      	adds	r3, #24
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d02f      	beq.n	8009d40 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009ce0:	78fb      	ldrb	r3, [r7, #3]
 8009ce2:	f003 020f 	and.w	r2, r3, #15
 8009ce6:	6879      	ldr	r1, [r7, #4]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4413      	add	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	440b      	add	r3, r1
 8009cf2:	3318      	adds	r3, #24
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	78fb      	ldrb	r3, [r7, #3]
 8009cf8:	f003 010f 	and.w	r1, r3, #15
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	460b      	mov	r3, r1
 8009d00:	00db      	lsls	r3, r3, #3
 8009d02:	440b      	add	r3, r1
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	4403      	add	r3, r0
 8009d08:	3348      	adds	r3, #72	; 0x48
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d10:	fb01 f303 	mul.w	r3, r1, r3
 8009d14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d112      	bne.n	8009d40 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009d1a:	78fb      	ldrb	r3, [r7, #3]
 8009d1c:	f003 020f 	and.w	r2, r3, #15
 8009d20:	6879      	ldr	r1, [r7, #4]
 8009d22:	4613      	mov	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	440b      	add	r3, r1
 8009d2c:	3318      	adds	r3, #24
 8009d2e:	2200      	movs	r2, #0
 8009d30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009d32:	78f9      	ldrb	r1, [r7, #3]
 8009d34:	2300      	movs	r3, #0
 8009d36:	2200      	movs	r2, #0
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f002 f92e 	bl	800bf9a <USBD_LL_Transmit>
 8009d3e:	e01f      	b.n	8009d80 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	33b0      	adds	r3, #176	; 0xb0
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d010      	beq.n	8009d80 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	33b0      	adds	r3, #176	; 0xb0
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4413      	add	r3, r2
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009d7c:	78fa      	ldrb	r2, [r7, #3]
 8009d7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b084      	sub	sp, #16
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	460b      	mov	r3, r1
 8009d94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	32b0      	adds	r2, #176	; 0xb0
 8009da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	32b0      	adds	r2, #176	; 0xb0
 8009db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d101      	bne.n	8009dbc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e01a      	b.n	8009df2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009dbc:	78fb      	ldrb	r3, [r7, #3]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f002 f92c 	bl	800c01e <USBD_LL_GetRxDataSize>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	33b0      	adds	r3, #176	; 0xb0
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009dec:	4611      	mov	r1, r2
 8009dee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b084      	sub	sp, #16
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	32b0      	adds	r2, #176	; 0xb0
 8009e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d101      	bne.n	8009e1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e025      	b.n	8009e68 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	33b0      	adds	r3, #176	; 0xb0
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d01a      	beq.n	8009e66 <USBD_CDC_EP0_RxReady+0x6c>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009e36:	2bff      	cmp	r3, #255	; 0xff
 8009e38:	d015      	beq.n	8009e66 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	33b0      	adds	r3, #176	; 0xb0
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009e52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009e5a:	b292      	uxth	r2, r2
 8009e5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	22ff      	movs	r2, #255	; 0xff
 8009e62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009e78:	2182      	movs	r1, #130	; 0x82
 8009e7a:	4818      	ldr	r0, [pc, #96]	; (8009edc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009e7c:	f000 fd09 	bl	800a892 <USBD_GetEpDesc>
 8009e80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009e82:	2101      	movs	r1, #1
 8009e84:	4815      	ldr	r0, [pc, #84]	; (8009edc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009e86:	f000 fd04 	bl	800a892 <USBD_GetEpDesc>
 8009e8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009e8c:	2181      	movs	r1, #129	; 0x81
 8009e8e:	4813      	ldr	r0, [pc, #76]	; (8009edc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009e90:	f000 fcff 	bl	800a892 <USBD_GetEpDesc>
 8009e94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	2210      	movs	r2, #16
 8009ea0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d006      	beq.n	8009eb6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009eb0:	711a      	strb	r2, [r3, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d006      	beq.n	8009eca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ec4:	711a      	strb	r2, [r3, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2243      	movs	r2, #67	; 0x43
 8009ece:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ed0:	4b02      	ldr	r3, [pc, #8]	; (8009edc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3718      	adds	r7, #24
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	20000050 	.word	0x20000050

08009ee0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ee8:	2182      	movs	r1, #130	; 0x82
 8009eea:	4818      	ldr	r0, [pc, #96]	; (8009f4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009eec:	f000 fcd1 	bl	800a892 <USBD_GetEpDesc>
 8009ef0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ef2:	2101      	movs	r1, #1
 8009ef4:	4815      	ldr	r0, [pc, #84]	; (8009f4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ef6:	f000 fccc 	bl	800a892 <USBD_GetEpDesc>
 8009efa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009efc:	2181      	movs	r1, #129	; 0x81
 8009efe:	4813      	ldr	r0, [pc, #76]	; (8009f4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f00:	f000 fcc7 	bl	800a892 <USBD_GetEpDesc>
 8009f04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	2210      	movs	r2, #16
 8009f10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d006      	beq.n	8009f26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	711a      	strb	r2, [r3, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f042 0202 	orr.w	r2, r2, #2
 8009f24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d006      	beq.n	8009f3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	711a      	strb	r2, [r3, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f042 0202 	orr.w	r2, r2, #2
 8009f38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2243      	movs	r2, #67	; 0x43
 8009f3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f40:	4b02      	ldr	r3, [pc, #8]	; (8009f4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3718      	adds	r7, #24
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	20000050 	.word	0x20000050

08009f50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f58:	2182      	movs	r1, #130	; 0x82
 8009f5a:	4818      	ldr	r0, [pc, #96]	; (8009fbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009f5c:	f000 fc99 	bl	800a892 <USBD_GetEpDesc>
 8009f60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f62:	2101      	movs	r1, #1
 8009f64:	4815      	ldr	r0, [pc, #84]	; (8009fbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009f66:	f000 fc94 	bl	800a892 <USBD_GetEpDesc>
 8009f6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f6c:	2181      	movs	r1, #129	; 0x81
 8009f6e:	4813      	ldr	r0, [pc, #76]	; (8009fbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009f70:	f000 fc8f 	bl	800a892 <USBD_GetEpDesc>
 8009f74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	2210      	movs	r2, #16
 8009f80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d006      	beq.n	8009f96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f90:	711a      	strb	r2, [r3, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d006      	beq.n	8009faa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fa4:	711a      	strb	r2, [r3, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2243      	movs	r2, #67	; 0x43
 8009fae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009fb0:	4b02      	ldr	r3, [pc, #8]	; (8009fbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3718      	adds	r7, #24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	20000050 	.word	0x20000050

08009fc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	220a      	movs	r2, #10
 8009fcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009fce:	4b03      	ldr	r3, [pc, #12]	; (8009fdc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	2000000c 	.word	0x2000000c

08009fe0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d101      	bne.n	8009ff4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	e009      	b.n	800a008 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	33b0      	adds	r3, #176	; 0xb0
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a014:	b480      	push	{r7}
 800a016:	b087      	sub	sp, #28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	32b0      	adds	r2, #176	; 0xb0
 800a02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a02e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d101      	bne.n	800a03a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a036:	2303      	movs	r3, #3
 800a038:	e008      	b.n	800a04c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	371c      	adds	r7, #28
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	32b0      	adds	r2, #176	; 0xb0
 800a06c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a070:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d101      	bne.n	800a07c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a078:	2303      	movs	r3, #3
 800a07a:	e004      	b.n	800a086 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
	...

0800a094 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	32b0      	adds	r2, #176	; 0xb0
 800a0a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0aa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	32b0      	adds	r2, #176	; 0xb0
 800a0b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e018      	b.n	800a0f4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	7c1b      	ldrb	r3, [r3, #16]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10a      	bne.n	800a0e0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a0ca:	4b0c      	ldr	r3, [pc, #48]	; (800a0fc <USBD_CDC_ReceivePacket+0x68>)
 800a0cc:	7819      	ldrb	r1, [r3, #0]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f001 ff7f 	bl	800bfdc <USBD_LL_PrepareReceive>
 800a0de:	e008      	b.n	800a0f2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a0e0:	4b06      	ldr	r3, [pc, #24]	; (800a0fc <USBD_CDC_ReceivePacket+0x68>)
 800a0e2:	7819      	ldrb	r1, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0ea:	2340      	movs	r3, #64	; 0x40
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f001 ff75 	bl	800bfdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	20000094 	.word	0x20000094

0800a100 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	4613      	mov	r3, r2
 800a10c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d101      	bne.n	800a118 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a114:	2303      	movs	r3, #3
 800a116:	e01f      	b.n	800a158 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d003      	beq.n	800a13e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2201      	movs	r2, #1
 800a142:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	79fa      	ldrb	r2, [r7, #7]
 800a14a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f001 fdef 	bl	800bd30 <USBD_LL_Init>
 800a152:	4603      	mov	r3, r0
 800a154:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a156:	7dfb      	ldrb	r3, [r7, #23]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a16a:	2300      	movs	r3, #0
 800a16c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d101      	bne.n	800a178 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a174:	2303      	movs	r3, #3
 800a176:	e025      	b.n	800a1c4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	32ae      	adds	r2, #174	; 0xae
 800a18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00f      	beq.n	800a1b4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	32ae      	adds	r2, #174	; 0xae
 800a19e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a4:	f107 020e 	add.w	r2, r7, #14
 800a1a8:	4610      	mov	r0, r2
 800a1aa:	4798      	blx	r3
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a1ba:	1c5a      	adds	r2, r3, #1
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f001 fdf7 	bl	800bdc8 <USBD_LL_Start>
 800a1da:	4603      	mov	r3, r0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a1ec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	370c      	adds	r7, #12
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr

0800a1fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b084      	sub	sp, #16
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
 800a202:	460b      	mov	r3, r1
 800a204:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a206:	2300      	movs	r3, #0
 800a208:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a210:	2b00      	cmp	r3, #0
 800a212:	d009      	beq.n	800a228 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	78fa      	ldrb	r2, [r7, #3]
 800a21e:	4611      	mov	r1, r2
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	4798      	blx	r3
 800a224:	4603      	mov	r3, r0
 800a226:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a228:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b084      	sub	sp, #16
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	460b      	mov	r3, r1
 800a23c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	78fa      	ldrb	r2, [r7, #3]
 800a24c:	4611      	mov	r1, r2
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	4798      	blx	r3
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d001      	beq.n	800a25c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a258:	2303      	movs	r3, #3
 800a25a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a276:	6839      	ldr	r1, [r7, #0]
 800a278:	4618      	mov	r0, r3
 800a27a:	f001 f908 	bl	800b48e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2201      	movs	r2, #1
 800a282:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a28c:	461a      	mov	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a29a:	f003 031f 	and.w	r3, r3, #31
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d01a      	beq.n	800a2d8 <USBD_LL_SetupStage+0x72>
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d822      	bhi.n	800a2ec <USBD_LL_SetupStage+0x86>
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d002      	beq.n	800a2b0 <USBD_LL_SetupStage+0x4a>
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d00a      	beq.n	800a2c4 <USBD_LL_SetupStage+0x5e>
 800a2ae:	e01d      	b.n	800a2ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 fb5f 	bl	800a97c <USBD_StdDevReq>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	73fb      	strb	r3, [r7, #15]
      break;
 800a2c2:	e020      	b.n	800a306 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 fbc7 	bl	800aa60 <USBD_StdItfReq>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	73fb      	strb	r3, [r7, #15]
      break;
 800a2d6:	e016      	b.n	800a306 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a2de:	4619      	mov	r1, r3
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fc29 	bl	800ab38 <USBD_StdEPReq>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	73fb      	strb	r3, [r7, #15]
      break;
 800a2ea:	e00c      	b.n	800a306 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a2f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f001 fdc4 	bl	800be88 <USBD_LL_StallEP>
 800a300:	4603      	mov	r3, r0
 800a302:	73fb      	strb	r3, [r7, #15]
      break;
 800a304:	bf00      	nop
  }

  return ret;
 800a306:	7bfb      	ldrb	r3, [r7, #15]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	460b      	mov	r3, r1
 800a31a:	607a      	str	r2, [r7, #4]
 800a31c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a322:	7afb      	ldrb	r3, [r7, #11]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d16e      	bne.n	800a406 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a32e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a336:	2b03      	cmp	r3, #3
 800a338:	f040 8098 	bne.w	800a46c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	689a      	ldr	r2, [r3, #8]
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	429a      	cmp	r2, r3
 800a346:	d913      	bls.n	800a370 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	689a      	ldr	r2, [r3, #8]
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	1ad2      	subs	r2, r2, r3
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	68da      	ldr	r2, [r3, #12]
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	4293      	cmp	r3, r2
 800a360:	bf28      	it	cs
 800a362:	4613      	movcs	r3, r2
 800a364:	461a      	mov	r2, r3
 800a366:	6879      	ldr	r1, [r7, #4]
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f001 f984 	bl	800b676 <USBD_CtlContinueRx>
 800a36e:	e07d      	b.n	800a46c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a376:	f003 031f 	and.w	r3, r3, #31
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d014      	beq.n	800a3a8 <USBD_LL_DataOutStage+0x98>
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d81d      	bhi.n	800a3be <USBD_LL_DataOutStage+0xae>
 800a382:	2b00      	cmp	r3, #0
 800a384:	d002      	beq.n	800a38c <USBD_LL_DataOutStage+0x7c>
 800a386:	2b01      	cmp	r3, #1
 800a388:	d003      	beq.n	800a392 <USBD_LL_DataOutStage+0x82>
 800a38a:	e018      	b.n	800a3be <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a38c:	2300      	movs	r3, #0
 800a38e:	75bb      	strb	r3, [r7, #22]
            break;
 800a390:	e018      	b.n	800a3c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	4619      	mov	r1, r3
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f000 fa5e 	bl	800a85e <USBD_CoreFindIF>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	75bb      	strb	r3, [r7, #22]
            break;
 800a3a6:	e00d      	b.n	800a3c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f000 fa60 	bl	800a878 <USBD_CoreFindEP>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	75bb      	strb	r3, [r7, #22]
            break;
 800a3bc:	e002      	b.n	800a3c4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	75bb      	strb	r3, [r7, #22]
            break;
 800a3c2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a3c4:	7dbb      	ldrb	r3, [r7, #22]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d119      	bne.n	800a3fe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d113      	bne.n	800a3fe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a3d6:	7dba      	ldrb	r2, [r7, #22]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	32ae      	adds	r2, #174	; 0xae
 800a3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00b      	beq.n	800a3fe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a3e6:	7dba      	ldrb	r2, [r7, #22]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a3ee:	7dba      	ldrb	r2, [r7, #22]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	32ae      	adds	r2, #174	; 0xae
 800a3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f001 f94a 	bl	800b698 <USBD_CtlSendStatus>
 800a404:	e032      	b.n	800a46c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a406:	7afb      	ldrb	r3, [r7, #11]
 800a408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	4619      	mov	r1, r3
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f000 fa31 	bl	800a878 <USBD_CoreFindEP>
 800a416:	4603      	mov	r3, r0
 800a418:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a41a:	7dbb      	ldrb	r3, [r7, #22]
 800a41c:	2bff      	cmp	r3, #255	; 0xff
 800a41e:	d025      	beq.n	800a46c <USBD_LL_DataOutStage+0x15c>
 800a420:	7dbb      	ldrb	r3, [r7, #22]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d122      	bne.n	800a46c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	2b03      	cmp	r3, #3
 800a430:	d117      	bne.n	800a462 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a432:	7dba      	ldrb	r2, [r7, #22]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	32ae      	adds	r2, #174	; 0xae
 800a438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00f      	beq.n	800a462 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a442:	7dba      	ldrb	r2, [r7, #22]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a44a:	7dba      	ldrb	r2, [r7, #22]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	32ae      	adds	r2, #174	; 0xae
 800a450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a454:	699b      	ldr	r3, [r3, #24]
 800a456:	7afa      	ldrb	r2, [r7, #11]
 800a458:	4611      	mov	r1, r2
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	4798      	blx	r3
 800a45e:	4603      	mov	r3, r0
 800a460:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a462:	7dfb      	ldrb	r3, [r7, #23]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a468:	7dfb      	ldrb	r3, [r7, #23]
 800a46a:	e000      	b.n	800a46e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3718      	adds	r7, #24
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b086      	sub	sp, #24
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	60f8      	str	r0, [r7, #12]
 800a47e:	460b      	mov	r3, r1
 800a480:	607a      	str	r2, [r7, #4]
 800a482:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a484:	7afb      	ldrb	r3, [r7, #11]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d16f      	bne.n	800a56a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	3314      	adds	r3, #20
 800a48e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a496:	2b02      	cmp	r3, #2
 800a498:	d15a      	bne.n	800a550 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	689a      	ldr	r2, [r3, #8]
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d914      	bls.n	800a4d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	689a      	ldr	r2, [r3, #8]
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	1ad2      	subs	r2, r2, r3
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	6879      	ldr	r1, [r7, #4]
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f001 f8ac 	bl	800b61a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f001 fd87 	bl	800bfdc <USBD_LL_PrepareReceive>
 800a4ce:	e03f      	b.n	800a550 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	68da      	ldr	r2, [r3, #12]
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d11c      	bne.n	800a516 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	685a      	ldr	r2, [r3, #4]
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d316      	bcc.n	800a516 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d20f      	bcs.n	800a516 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f001 f88d 	bl	800b61a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a508:	2300      	movs	r3, #0
 800a50a:	2200      	movs	r2, #0
 800a50c:	2100      	movs	r1, #0
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f001 fd64 	bl	800bfdc <USBD_LL_PrepareReceive>
 800a514:	e01c      	b.n	800a550 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b03      	cmp	r3, #3
 800a520:	d10f      	bne.n	800a542 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d009      	beq.n	800a542 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a542:	2180      	movs	r1, #128	; 0x80
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f001 fc9f 	bl	800be88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	f001 f8b7 	bl	800b6be <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d03a      	beq.n	800a5d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f7ff fe42 	bl	800a1e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a568:	e032      	b.n	800a5d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a56a:	7afb      	ldrb	r3, [r7, #11]
 800a56c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a570:	b2db      	uxtb	r3, r3
 800a572:	4619      	mov	r1, r3
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f000 f97f 	bl	800a878 <USBD_CoreFindEP>
 800a57a:	4603      	mov	r3, r0
 800a57c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a57e:	7dfb      	ldrb	r3, [r7, #23]
 800a580:	2bff      	cmp	r3, #255	; 0xff
 800a582:	d025      	beq.n	800a5d0 <USBD_LL_DataInStage+0x15a>
 800a584:	7dfb      	ldrb	r3, [r7, #23]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d122      	bne.n	800a5d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a590:	b2db      	uxtb	r3, r3
 800a592:	2b03      	cmp	r3, #3
 800a594:	d11c      	bne.n	800a5d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a596:	7dfa      	ldrb	r2, [r7, #23]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	32ae      	adds	r2, #174	; 0xae
 800a59c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d014      	beq.n	800a5d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a5a6:	7dfa      	ldrb	r2, [r7, #23]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a5ae:	7dfa      	ldrb	r2, [r7, #23]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	32ae      	adds	r2, #174	; 0xae
 800a5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b8:	695b      	ldr	r3, [r3, #20]
 800a5ba:	7afa      	ldrb	r2, [r7, #11]
 800a5bc:	4611      	mov	r1, r2
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	4798      	blx	r3
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a5c6:	7dbb      	ldrb	r3, [r7, #22]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a5cc:	7dbb      	ldrb	r3, [r7, #22]
 800a5ce:	e000      	b.n	800a5d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3718      	adds	r7, #24
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b084      	sub	sp, #16
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a612:	2b00      	cmp	r3, #0
 800a614:	d014      	beq.n	800a640 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00e      	beq.n	800a640 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	6852      	ldr	r2, [r2, #4]
 800a62e:	b2d2      	uxtb	r2, r2
 800a630:	4611      	mov	r1, r2
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	4798      	blx	r3
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d001      	beq.n	800a640 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a63c:	2303      	movs	r3, #3
 800a63e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a640:	2340      	movs	r3, #64	; 0x40
 800a642:	2200      	movs	r2, #0
 800a644:	2100      	movs	r1, #0
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f001 fbd9 	bl	800bdfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2240      	movs	r2, #64	; 0x40
 800a658:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a65c:	2340      	movs	r3, #64	; 0x40
 800a65e:	2200      	movs	r2, #0
 800a660:	2180      	movs	r1, #128	; 0x80
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f001 fbcb 	bl	800bdfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2240      	movs	r2, #64	; 0x40
 800a672:	621a      	str	r2, [r3, #32]

  return ret;
 800a674:	7bfb      	ldrb	r3, [r7, #15]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a67e:	b480      	push	{r7}
 800a680:	b083      	sub	sp, #12
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	460b      	mov	r3, r1
 800a688:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	78fa      	ldrb	r2, [r7, #3]
 800a68e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a69e:	b480      	push	{r7}
 800a6a0:	b083      	sub	sp, #12
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ac:	b2da      	uxtb	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2204      	movs	r2, #4
 800a6b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b083      	sub	sp, #12
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	2b04      	cmp	r3, #4
 800a6dc:	d106      	bne.n	800a6ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	370c      	adds	r7, #12
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr

0800a6fa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b082      	sub	sp, #8
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	2b03      	cmp	r3, #3
 800a70c:	d110      	bne.n	800a730 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00b      	beq.n	800a730 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a71e:	69db      	ldr	r3, [r3, #28]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d005      	beq.n	800a730 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a72a:	69db      	ldr	r3, [r3, #28]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b082      	sub	sp, #8
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	460b      	mov	r3, r1
 800a744:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	32ae      	adds	r2, #174	; 0xae
 800a750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d101      	bne.n	800a75c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a758:	2303      	movs	r3, #3
 800a75a:	e01c      	b.n	800a796 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a762:	b2db      	uxtb	r3, r3
 800a764:	2b03      	cmp	r3, #3
 800a766:	d115      	bne.n	800a794 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	32ae      	adds	r2, #174	; 0xae
 800a772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a776:	6a1b      	ldr	r3, [r3, #32]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00b      	beq.n	800a794 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	32ae      	adds	r2, #174	; 0xae
 800a786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a78a:	6a1b      	ldr	r3, [r3, #32]
 800a78c:	78fa      	ldrb	r2, [r7, #3]
 800a78e:	4611      	mov	r1, r2
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b082      	sub	sp, #8
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	32ae      	adds	r2, #174	; 0xae
 800a7b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d101      	bne.n	800a7c0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e01c      	b.n	800a7fa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	2b03      	cmp	r3, #3
 800a7ca:	d115      	bne.n	800a7f8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	32ae      	adds	r2, #174	; 0xae
 800a7d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00b      	beq.n	800a7f8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	32ae      	adds	r2, #174	; 0xae
 800a7ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	78fa      	ldrb	r2, [r7, #3]
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a802:	b480      	push	{r7}
 800a804:	b083      	sub	sp, #12
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a820:	2300      	movs	r3, #0
 800a822:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00e      	beq.n	800a854 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	6852      	ldr	r2, [r2, #4]
 800a842:	b2d2      	uxtb	r2, r2
 800a844:	4611      	mov	r1, r2
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	4798      	blx	r3
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d001      	beq.n	800a854 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a850:	2303      	movs	r3, #3
 800a852:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a854:	7bfb      	ldrb	r3, [r7, #15]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a85e:	b480      	push	{r7}
 800a860:	b083      	sub	sp, #12
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	460b      	mov	r3, r1
 800a868:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a86a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a884:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a886:	4618      	mov	r0, r3
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b086      	sub	sp, #24
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
 800a89a:	460b      	mov	r3, r1
 800a89c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	885b      	ldrh	r3, [r3, #2]
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d920      	bls.n	800a8fc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a8c2:	e013      	b.n	800a8ec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a8c4:	f107 030a 	add.w	r3, r7, #10
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6978      	ldr	r0, [r7, #20]
 800a8cc:	f000 f81b 	bl	800a906 <USBD_GetNextDesc>
 800a8d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	785b      	ldrb	r3, [r3, #1]
 800a8d6:	2b05      	cmp	r3, #5
 800a8d8:	d108      	bne.n	800a8ec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	789b      	ldrb	r3, [r3, #2]
 800a8e2:	78fa      	ldrb	r2, [r7, #3]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d008      	beq.n	800a8fa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	885b      	ldrh	r3, [r3, #2]
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	897b      	ldrh	r3, [r7, #10]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d8e5      	bhi.n	800a8c4 <USBD_GetEpDesc+0x32>
 800a8f8:	e000      	b.n	800a8fc <USBD_GetEpDesc+0x6a>
          break;
 800a8fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a8fc:	693b      	ldr	r3, [r7, #16]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3718      	adds	r7, #24
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a906:	b480      	push	{r7}
 800a908:	b085      	sub	sp, #20
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	881a      	ldrh	r2, [r3, #0]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	4413      	add	r3, r2
 800a920:	b29a      	uxth	r2, r3
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	461a      	mov	r2, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4413      	add	r3, r2
 800a930:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a932:	68fb      	ldr	r3, [r7, #12]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3714      	adds	r7, #20
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a940:	b480      	push	{r7}
 800a942:	b087      	sub	sp, #28
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	3301      	adds	r3, #1
 800a956:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a95e:	8a3b      	ldrh	r3, [r7, #16]
 800a960:	021b      	lsls	r3, r3, #8
 800a962:	b21a      	sxth	r2, r3
 800a964:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a968:	4313      	orrs	r3, r2
 800a96a:	b21b      	sxth	r3, r3
 800a96c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a96e:	89fb      	ldrh	r3, [r7, #14]
}
 800a970:	4618      	mov	r0, r3
 800a972:	371c      	adds	r7, #28
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a992:	2b40      	cmp	r3, #64	; 0x40
 800a994:	d005      	beq.n	800a9a2 <USBD_StdDevReq+0x26>
 800a996:	2b40      	cmp	r3, #64	; 0x40
 800a998:	d857      	bhi.n	800aa4a <USBD_StdDevReq+0xce>
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00f      	beq.n	800a9be <USBD_StdDevReq+0x42>
 800a99e:	2b20      	cmp	r3, #32
 800a9a0:	d153      	bne.n	800aa4a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	32ae      	adds	r2, #174	; 0xae
 800a9ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	6839      	ldr	r1, [r7, #0]
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	4798      	blx	r3
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	73fb      	strb	r3, [r7, #15]
      break;
 800a9bc:	e04a      	b.n	800aa54 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	785b      	ldrb	r3, [r3, #1]
 800a9c2:	2b09      	cmp	r3, #9
 800a9c4:	d83b      	bhi.n	800aa3e <USBD_StdDevReq+0xc2>
 800a9c6:	a201      	add	r2, pc, #4	; (adr r2, 800a9cc <USBD_StdDevReq+0x50>)
 800a9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9cc:	0800aa21 	.word	0x0800aa21
 800a9d0:	0800aa35 	.word	0x0800aa35
 800a9d4:	0800aa3f 	.word	0x0800aa3f
 800a9d8:	0800aa2b 	.word	0x0800aa2b
 800a9dc:	0800aa3f 	.word	0x0800aa3f
 800a9e0:	0800a9ff 	.word	0x0800a9ff
 800a9e4:	0800a9f5 	.word	0x0800a9f5
 800a9e8:	0800aa3f 	.word	0x0800aa3f
 800a9ec:	0800aa17 	.word	0x0800aa17
 800a9f0:	0800aa09 	.word	0x0800aa09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a9f4:	6839      	ldr	r1, [r7, #0]
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 fa3c 	bl	800ae74 <USBD_GetDescriptor>
          break;
 800a9fc:	e024      	b.n	800aa48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fba1 	bl	800b148 <USBD_SetAddress>
          break;
 800aa06:	e01f      	b.n	800aa48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fbe0 	bl	800b1d0 <USBD_SetConfig>
 800aa10:	4603      	mov	r3, r0
 800aa12:	73fb      	strb	r3, [r7, #15]
          break;
 800aa14:	e018      	b.n	800aa48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aa16:	6839      	ldr	r1, [r7, #0]
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fc83 	bl	800b324 <USBD_GetConfig>
          break;
 800aa1e:	e013      	b.n	800aa48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aa20:	6839      	ldr	r1, [r7, #0]
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 fcb4 	bl	800b390 <USBD_GetStatus>
          break;
 800aa28:	e00e      	b.n	800aa48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fce3 	bl	800b3f8 <USBD_SetFeature>
          break;
 800aa32:	e009      	b.n	800aa48 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aa34:	6839      	ldr	r1, [r7, #0]
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 fd07 	bl	800b44a <USBD_ClrFeature>
          break;
 800aa3c:	e004      	b.n	800aa48 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fd5e 	bl	800b502 <USBD_CtlError>
          break;
 800aa46:	bf00      	nop
      }
      break;
 800aa48:	e004      	b.n	800aa54 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fd58 	bl	800b502 <USBD_CtlError>
      break;
 800aa52:	bf00      	nop
  }

  return ret;
 800aa54:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop

0800aa60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa76:	2b40      	cmp	r3, #64	; 0x40
 800aa78:	d005      	beq.n	800aa86 <USBD_StdItfReq+0x26>
 800aa7a:	2b40      	cmp	r3, #64	; 0x40
 800aa7c:	d852      	bhi.n	800ab24 <USBD_StdItfReq+0xc4>
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d001      	beq.n	800aa86 <USBD_StdItfReq+0x26>
 800aa82:	2b20      	cmp	r3, #32
 800aa84:	d14e      	bne.n	800ab24 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	d840      	bhi.n	800ab16 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	889b      	ldrh	r3, [r3, #4]
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d836      	bhi.n	800ab0c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	889b      	ldrh	r3, [r3, #4]
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f7ff fed9 	bl	800a85e <USBD_CoreFindIF>
 800aaac:	4603      	mov	r3, r0
 800aaae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
 800aab2:	2bff      	cmp	r3, #255	; 0xff
 800aab4:	d01d      	beq.n	800aaf2 <USBD_StdItfReq+0x92>
 800aab6:	7bbb      	ldrb	r3, [r7, #14]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d11a      	bne.n	800aaf2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aabc:	7bba      	ldrb	r2, [r7, #14]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	32ae      	adds	r2, #174	; 0xae
 800aac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00f      	beq.n	800aaec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aacc:	7bba      	ldrb	r2, [r7, #14]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aad4:	7bba      	ldrb	r2, [r7, #14]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	32ae      	adds	r2, #174	; 0xae
 800aada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	6839      	ldr	r1, [r7, #0]
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	4798      	blx	r3
 800aae6:	4603      	mov	r3, r0
 800aae8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aaea:	e004      	b.n	800aaf6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aaec:	2303      	movs	r3, #3
 800aaee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aaf0:	e001      	b.n	800aaf6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aaf2:	2303      	movs	r3, #3
 800aaf4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	88db      	ldrh	r3, [r3, #6]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d110      	bne.n	800ab20 <USBD_StdItfReq+0xc0>
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d10d      	bne.n	800ab20 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fdc7 	bl	800b698 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ab0a:	e009      	b.n	800ab20 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 fcf7 	bl	800b502 <USBD_CtlError>
          break;
 800ab14:	e004      	b.n	800ab20 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ab16:	6839      	ldr	r1, [r7, #0]
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fcf2 	bl	800b502 <USBD_CtlError>
          break;
 800ab1e:	e000      	b.n	800ab22 <USBD_StdItfReq+0xc2>
          break;
 800ab20:	bf00      	nop
      }
      break;
 800ab22:	e004      	b.n	800ab2e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fceb 	bl	800b502 <USBD_CtlError>
      break;
 800ab2c:	bf00      	nop
  }

  return ret;
 800ab2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3710      	adds	r7, #16
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	889b      	ldrh	r3, [r3, #4]
 800ab4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab54:	2b40      	cmp	r3, #64	; 0x40
 800ab56:	d007      	beq.n	800ab68 <USBD_StdEPReq+0x30>
 800ab58:	2b40      	cmp	r3, #64	; 0x40
 800ab5a:	f200 817f 	bhi.w	800ae5c <USBD_StdEPReq+0x324>
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d02a      	beq.n	800abb8 <USBD_StdEPReq+0x80>
 800ab62:	2b20      	cmp	r3, #32
 800ab64:	f040 817a 	bne.w	800ae5c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ab68:	7bbb      	ldrb	r3, [r7, #14]
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f7ff fe83 	bl	800a878 <USBD_CoreFindEP>
 800ab72:	4603      	mov	r3, r0
 800ab74:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab76:	7b7b      	ldrb	r3, [r7, #13]
 800ab78:	2bff      	cmp	r3, #255	; 0xff
 800ab7a:	f000 8174 	beq.w	800ae66 <USBD_StdEPReq+0x32e>
 800ab7e:	7b7b      	ldrb	r3, [r7, #13]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f040 8170 	bne.w	800ae66 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ab86:	7b7a      	ldrb	r2, [r7, #13]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ab8e:	7b7a      	ldrb	r2, [r7, #13]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	32ae      	adds	r2, #174	; 0xae
 800ab94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f000 8163 	beq.w	800ae66 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aba0:	7b7a      	ldrb	r2, [r7, #13]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	32ae      	adds	r2, #174	; 0xae
 800aba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	6839      	ldr	r1, [r7, #0]
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	4798      	blx	r3
 800abb2:	4603      	mov	r3, r0
 800abb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800abb6:	e156      	b.n	800ae66 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	785b      	ldrb	r3, [r3, #1]
 800abbc:	2b03      	cmp	r3, #3
 800abbe:	d008      	beq.n	800abd2 <USBD_StdEPReq+0x9a>
 800abc0:	2b03      	cmp	r3, #3
 800abc2:	f300 8145 	bgt.w	800ae50 <USBD_StdEPReq+0x318>
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f000 809b 	beq.w	800ad02 <USBD_StdEPReq+0x1ca>
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d03c      	beq.n	800ac4a <USBD_StdEPReq+0x112>
 800abd0:	e13e      	b.n	800ae50 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d002      	beq.n	800abe4 <USBD_StdEPReq+0xac>
 800abde:	2b03      	cmp	r3, #3
 800abe0:	d016      	beq.n	800ac10 <USBD_StdEPReq+0xd8>
 800abe2:	e02c      	b.n	800ac3e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abe4:	7bbb      	ldrb	r3, [r7, #14]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00d      	beq.n	800ac06 <USBD_StdEPReq+0xce>
 800abea:	7bbb      	ldrb	r3, [r7, #14]
 800abec:	2b80      	cmp	r3, #128	; 0x80
 800abee:	d00a      	beq.n	800ac06 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800abf0:	7bbb      	ldrb	r3, [r7, #14]
 800abf2:	4619      	mov	r1, r3
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f001 f947 	bl	800be88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800abfa:	2180      	movs	r1, #128	; 0x80
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f001 f943 	bl	800be88 <USBD_LL_StallEP>
 800ac02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac04:	e020      	b.n	800ac48 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ac06:	6839      	ldr	r1, [r7, #0]
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 fc7a 	bl	800b502 <USBD_CtlError>
              break;
 800ac0e:	e01b      	b.n	800ac48 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	885b      	ldrh	r3, [r3, #2]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d10e      	bne.n	800ac36 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac18:	7bbb      	ldrb	r3, [r7, #14]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00b      	beq.n	800ac36 <USBD_StdEPReq+0xfe>
 800ac1e:	7bbb      	ldrb	r3, [r7, #14]
 800ac20:	2b80      	cmp	r3, #128	; 0x80
 800ac22:	d008      	beq.n	800ac36 <USBD_StdEPReq+0xfe>
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	88db      	ldrh	r3, [r3, #6]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d104      	bne.n	800ac36 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac2c:	7bbb      	ldrb	r3, [r7, #14]
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f001 f929 	bl	800be88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 fd2e 	bl	800b698 <USBD_CtlSendStatus>

              break;
 800ac3c:	e004      	b.n	800ac48 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ac3e:	6839      	ldr	r1, [r7, #0]
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 fc5e 	bl	800b502 <USBD_CtlError>
              break;
 800ac46:	bf00      	nop
          }
          break;
 800ac48:	e107      	b.n	800ae5a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d002      	beq.n	800ac5c <USBD_StdEPReq+0x124>
 800ac56:	2b03      	cmp	r3, #3
 800ac58:	d016      	beq.n	800ac88 <USBD_StdEPReq+0x150>
 800ac5a:	e04b      	b.n	800acf4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac5c:	7bbb      	ldrb	r3, [r7, #14]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00d      	beq.n	800ac7e <USBD_StdEPReq+0x146>
 800ac62:	7bbb      	ldrb	r3, [r7, #14]
 800ac64:	2b80      	cmp	r3, #128	; 0x80
 800ac66:	d00a      	beq.n	800ac7e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac68:	7bbb      	ldrb	r3, [r7, #14]
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f001 f90b 	bl	800be88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac72:	2180      	movs	r1, #128	; 0x80
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f001 f907 	bl	800be88 <USBD_LL_StallEP>
 800ac7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac7c:	e040      	b.n	800ad00 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ac7e:	6839      	ldr	r1, [r7, #0]
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fc3e 	bl	800b502 <USBD_CtlError>
              break;
 800ac86:	e03b      	b.n	800ad00 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	885b      	ldrh	r3, [r3, #2]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d136      	bne.n	800acfe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
 800ac92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d004      	beq.n	800aca4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ac9a:	7bbb      	ldrb	r3, [r7, #14]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f001 f911 	bl	800bec6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fcf7 	bl	800b698 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800acaa:	7bbb      	ldrb	r3, [r7, #14]
 800acac:	4619      	mov	r1, r3
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7ff fde2 	bl	800a878 <USBD_CoreFindEP>
 800acb4:	4603      	mov	r3, r0
 800acb6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acb8:	7b7b      	ldrb	r3, [r7, #13]
 800acba:	2bff      	cmp	r3, #255	; 0xff
 800acbc:	d01f      	beq.n	800acfe <USBD_StdEPReq+0x1c6>
 800acbe:	7b7b      	ldrb	r3, [r7, #13]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d11c      	bne.n	800acfe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800acc4:	7b7a      	ldrb	r2, [r7, #13]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800accc:	7b7a      	ldrb	r2, [r7, #13]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	32ae      	adds	r2, #174	; 0xae
 800acd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d010      	beq.n	800acfe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800acdc:	7b7a      	ldrb	r2, [r7, #13]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	32ae      	adds	r2, #174	; 0xae
 800ace2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	4798      	blx	r3
 800acee:	4603      	mov	r3, r0
 800acf0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800acf2:	e004      	b.n	800acfe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fc03 	bl	800b502 <USBD_CtlError>
              break;
 800acfc:	e000      	b.n	800ad00 <USBD_StdEPReq+0x1c8>
              break;
 800acfe:	bf00      	nop
          }
          break;
 800ad00:	e0ab      	b.n	800ae5a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d002      	beq.n	800ad14 <USBD_StdEPReq+0x1dc>
 800ad0e:	2b03      	cmp	r3, #3
 800ad10:	d032      	beq.n	800ad78 <USBD_StdEPReq+0x240>
 800ad12:	e097      	b.n	800ae44 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad14:	7bbb      	ldrb	r3, [r7, #14]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d007      	beq.n	800ad2a <USBD_StdEPReq+0x1f2>
 800ad1a:	7bbb      	ldrb	r3, [r7, #14]
 800ad1c:	2b80      	cmp	r3, #128	; 0x80
 800ad1e:	d004      	beq.n	800ad2a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ad20:	6839      	ldr	r1, [r7, #0]
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fbed 	bl	800b502 <USBD_CtlError>
                break;
 800ad28:	e091      	b.n	800ae4e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	da0b      	bge.n	800ad4a <USBD_StdEPReq+0x212>
 800ad32:	7bbb      	ldrb	r3, [r7, #14]
 800ad34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad38:	4613      	mov	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	4413      	add	r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	3310      	adds	r3, #16
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	4413      	add	r3, r2
 800ad46:	3304      	adds	r3, #4
 800ad48:	e00b      	b.n	800ad62 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad4a:	7bbb      	ldrb	r3, [r7, #14]
 800ad4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad50:	4613      	mov	r3, r2
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	4413      	add	r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	4413      	add	r3, r2
 800ad60:	3304      	adds	r3, #4
 800ad62:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	2200      	movs	r2, #0
 800ad68:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	2202      	movs	r2, #2
 800ad6e:	4619      	mov	r1, r3
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 fc37 	bl	800b5e4 <USBD_CtlSendData>
              break;
 800ad76:	e06a      	b.n	800ae4e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ad78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	da11      	bge.n	800ada4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ad80:	7bbb      	ldrb	r3, [r7, #14]
 800ad82:	f003 020f 	and.w	r2, r3, #15
 800ad86:	6879      	ldr	r1, [r7, #4]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4413      	add	r3, r2
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	440b      	add	r3, r1
 800ad92:	3324      	adds	r3, #36	; 0x24
 800ad94:	881b      	ldrh	r3, [r3, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d117      	bne.n	800adca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fbb0 	bl	800b502 <USBD_CtlError>
                  break;
 800ada2:	e054      	b.n	800ae4e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ada4:	7bbb      	ldrb	r3, [r7, #14]
 800ada6:	f003 020f 	and.w	r2, r3, #15
 800adaa:	6879      	ldr	r1, [r7, #4]
 800adac:	4613      	mov	r3, r2
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	4413      	add	r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	440b      	add	r3, r1
 800adb6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800adba:	881b      	ldrh	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d104      	bne.n	800adca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800adc0:	6839      	ldr	r1, [r7, #0]
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fb9d 	bl	800b502 <USBD_CtlError>
                  break;
 800adc8:	e041      	b.n	800ae4e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adce:	2b00      	cmp	r3, #0
 800add0:	da0b      	bge.n	800adea <USBD_StdEPReq+0x2b2>
 800add2:	7bbb      	ldrb	r3, [r7, #14]
 800add4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800add8:	4613      	mov	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	4413      	add	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	3310      	adds	r3, #16
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	4413      	add	r3, r2
 800ade6:	3304      	adds	r3, #4
 800ade8:	e00b      	b.n	800ae02 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800adea:	7bbb      	ldrb	r3, [r7, #14]
 800adec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adf0:	4613      	mov	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	4413      	add	r3, r2
 800ae00:	3304      	adds	r3, #4
 800ae02:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ae04:	7bbb      	ldrb	r3, [r7, #14]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d002      	beq.n	800ae10 <USBD_StdEPReq+0x2d8>
 800ae0a:	7bbb      	ldrb	r3, [r7, #14]
 800ae0c:	2b80      	cmp	r3, #128	; 0x80
 800ae0e:	d103      	bne.n	800ae18 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	2200      	movs	r2, #0
 800ae14:	601a      	str	r2, [r3, #0]
 800ae16:	e00e      	b.n	800ae36 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ae18:	7bbb      	ldrb	r3, [r7, #14]
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f001 f871 	bl	800bf04 <USBD_LL_IsStallEP>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d003      	beq.n	800ae30 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	601a      	str	r2, [r3, #0]
 800ae2e:	e002      	b.n	800ae36 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	2200      	movs	r2, #0
 800ae34:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	2202      	movs	r2, #2
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 fbd1 	bl	800b5e4 <USBD_CtlSendData>
              break;
 800ae42:	e004      	b.n	800ae4e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fb5b 	bl	800b502 <USBD_CtlError>
              break;
 800ae4c:	bf00      	nop
          }
          break;
 800ae4e:	e004      	b.n	800ae5a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ae50:	6839      	ldr	r1, [r7, #0]
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fb55 	bl	800b502 <USBD_CtlError>
          break;
 800ae58:	bf00      	nop
      }
      break;
 800ae5a:	e005      	b.n	800ae68 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ae5c:	6839      	ldr	r1, [r7, #0]
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fb4f 	bl	800b502 <USBD_CtlError>
      break;
 800ae64:	e000      	b.n	800ae68 <USBD_StdEPReq+0x330>
      break;
 800ae66:	bf00      	nop
  }

  return ret;
 800ae68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3710      	adds	r7, #16
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
	...

0800ae74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ae82:	2300      	movs	r3, #0
 800ae84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ae86:	2300      	movs	r3, #0
 800ae88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	885b      	ldrh	r3, [r3, #2]
 800ae8e:	0a1b      	lsrs	r3, r3, #8
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	3b01      	subs	r3, #1
 800ae94:	2b06      	cmp	r3, #6
 800ae96:	f200 8128 	bhi.w	800b0ea <USBD_GetDescriptor+0x276>
 800ae9a:	a201      	add	r2, pc, #4	; (adr r2, 800aea0 <USBD_GetDescriptor+0x2c>)
 800ae9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea0:	0800aebd 	.word	0x0800aebd
 800aea4:	0800aed5 	.word	0x0800aed5
 800aea8:	0800af15 	.word	0x0800af15
 800aeac:	0800b0eb 	.word	0x0800b0eb
 800aeb0:	0800b0eb 	.word	0x0800b0eb
 800aeb4:	0800b08b 	.word	0x0800b08b
 800aeb8:	0800b0b7 	.word	0x0800b0b7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	7c12      	ldrb	r2, [r2, #16]
 800aec8:	f107 0108 	add.w	r1, r7, #8
 800aecc:	4610      	mov	r0, r2
 800aece:	4798      	blx	r3
 800aed0:	60f8      	str	r0, [r7, #12]
      break;
 800aed2:	e112      	b.n	800b0fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	7c1b      	ldrb	r3, [r3, #16]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10d      	bne.n	800aef8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee4:	f107 0208 	add.w	r2, r7, #8
 800aee8:	4610      	mov	r0, r2
 800aeea:	4798      	blx	r3
 800aeec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	3301      	adds	r3, #1
 800aef2:	2202      	movs	r2, #2
 800aef4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aef6:	e100      	b.n	800b0fa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af00:	f107 0208 	add.w	r2, r7, #8
 800af04:	4610      	mov	r0, r2
 800af06:	4798      	blx	r3
 800af08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	3301      	adds	r3, #1
 800af0e:	2202      	movs	r2, #2
 800af10:	701a      	strb	r2, [r3, #0]
      break;
 800af12:	e0f2      	b.n	800b0fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	885b      	ldrh	r3, [r3, #2]
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b05      	cmp	r3, #5
 800af1c:	f200 80ac 	bhi.w	800b078 <USBD_GetDescriptor+0x204>
 800af20:	a201      	add	r2, pc, #4	; (adr r2, 800af28 <USBD_GetDescriptor+0xb4>)
 800af22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af26:	bf00      	nop
 800af28:	0800af41 	.word	0x0800af41
 800af2c:	0800af75 	.word	0x0800af75
 800af30:	0800afa9 	.word	0x0800afa9
 800af34:	0800afdd 	.word	0x0800afdd
 800af38:	0800b011 	.word	0x0800b011
 800af3c:	0800b045 	.word	0x0800b045
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00b      	beq.n	800af64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	7c12      	ldrb	r2, [r2, #16]
 800af58:	f107 0108 	add.w	r1, r7, #8
 800af5c:	4610      	mov	r0, r2
 800af5e:	4798      	blx	r3
 800af60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af62:	e091      	b.n	800b088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 facb 	bl	800b502 <USBD_CtlError>
            err++;
 800af6c:	7afb      	ldrb	r3, [r7, #11]
 800af6e:	3301      	adds	r3, #1
 800af70:	72fb      	strb	r3, [r7, #11]
          break;
 800af72:	e089      	b.n	800b088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00b      	beq.n	800af98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	7c12      	ldrb	r2, [r2, #16]
 800af8c:	f107 0108 	add.w	r1, r7, #8
 800af90:	4610      	mov	r0, r2
 800af92:	4798      	blx	r3
 800af94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af96:	e077      	b.n	800b088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fab1 	bl	800b502 <USBD_CtlError>
            err++;
 800afa0:	7afb      	ldrb	r3, [r7, #11]
 800afa2:	3301      	adds	r3, #1
 800afa4:	72fb      	strb	r3, [r7, #11]
          break;
 800afa6:	e06f      	b.n	800b088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00b      	beq.n	800afcc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	7c12      	ldrb	r2, [r2, #16]
 800afc0:	f107 0108 	add.w	r1, r7, #8
 800afc4:	4610      	mov	r0, r2
 800afc6:	4798      	blx	r3
 800afc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afca:	e05d      	b.n	800b088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 fa97 	bl	800b502 <USBD_CtlError>
            err++;
 800afd4:	7afb      	ldrb	r3, [r7, #11]
 800afd6:	3301      	adds	r3, #1
 800afd8:	72fb      	strb	r3, [r7, #11]
          break;
 800afda:	e055      	b.n	800b088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00b      	beq.n	800b000 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	7c12      	ldrb	r2, [r2, #16]
 800aff4:	f107 0108 	add.w	r1, r7, #8
 800aff8:	4610      	mov	r0, r2
 800affa:	4798      	blx	r3
 800affc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800affe:	e043      	b.n	800b088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fa7d 	bl	800b502 <USBD_CtlError>
            err++;
 800b008:	7afb      	ldrb	r3, [r7, #11]
 800b00a:	3301      	adds	r3, #1
 800b00c:	72fb      	strb	r3, [r7, #11]
          break;
 800b00e:	e03b      	b.n	800b088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00b      	beq.n	800b034 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b022:	695b      	ldr	r3, [r3, #20]
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	7c12      	ldrb	r2, [r2, #16]
 800b028:	f107 0108 	add.w	r1, r7, #8
 800b02c:	4610      	mov	r0, r2
 800b02e:	4798      	blx	r3
 800b030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b032:	e029      	b.n	800b088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fa63 	bl	800b502 <USBD_CtlError>
            err++;
 800b03c:	7afb      	ldrb	r3, [r7, #11]
 800b03e:	3301      	adds	r3, #1
 800b040:	72fb      	strb	r3, [r7, #11]
          break;
 800b042:	e021      	b.n	800b088 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00b      	beq.n	800b068 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b056:	699b      	ldr	r3, [r3, #24]
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	7c12      	ldrb	r2, [r2, #16]
 800b05c:	f107 0108 	add.w	r1, r7, #8
 800b060:	4610      	mov	r0, r2
 800b062:	4798      	blx	r3
 800b064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b066:	e00f      	b.n	800b088 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fa49 	bl	800b502 <USBD_CtlError>
            err++;
 800b070:	7afb      	ldrb	r3, [r7, #11]
 800b072:	3301      	adds	r3, #1
 800b074:	72fb      	strb	r3, [r7, #11]
          break;
 800b076:	e007      	b.n	800b088 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b078:	6839      	ldr	r1, [r7, #0]
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fa41 	bl	800b502 <USBD_CtlError>
          err++;
 800b080:	7afb      	ldrb	r3, [r7, #11]
 800b082:	3301      	adds	r3, #1
 800b084:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b086:	bf00      	nop
      }
      break;
 800b088:	e037      	b.n	800b0fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	7c1b      	ldrb	r3, [r3, #16]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d109      	bne.n	800b0a6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b09a:	f107 0208 	add.w	r2, r7, #8
 800b09e:	4610      	mov	r0, r2
 800b0a0:	4798      	blx	r3
 800b0a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0a4:	e029      	b.n	800b0fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 fa2a 	bl	800b502 <USBD_CtlError>
        err++;
 800b0ae:	7afb      	ldrb	r3, [r7, #11]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	72fb      	strb	r3, [r7, #11]
      break;
 800b0b4:	e021      	b.n	800b0fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	7c1b      	ldrb	r3, [r3, #16]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d10d      	bne.n	800b0da <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c6:	f107 0208 	add.w	r2, r7, #8
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	4798      	blx	r3
 800b0ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	2207      	movs	r2, #7
 800b0d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0d8:	e00f      	b.n	800b0fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0da:	6839      	ldr	r1, [r7, #0]
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fa10 	bl	800b502 <USBD_CtlError>
        err++;
 800b0e2:	7afb      	ldrb	r3, [r7, #11]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	72fb      	strb	r3, [r7, #11]
      break;
 800b0e8:	e007      	b.n	800b0fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b0ea:	6839      	ldr	r1, [r7, #0]
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 fa08 	bl	800b502 <USBD_CtlError>
      err++;
 800b0f2:	7afb      	ldrb	r3, [r7, #11]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	72fb      	strb	r3, [r7, #11]
      break;
 800b0f8:	bf00      	nop
  }

  if (err != 0U)
 800b0fa:	7afb      	ldrb	r3, [r7, #11]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d11e      	bne.n	800b13e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	88db      	ldrh	r3, [r3, #6]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d016      	beq.n	800b136 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b108:	893b      	ldrh	r3, [r7, #8]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00e      	beq.n	800b12c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	88da      	ldrh	r2, [r3, #6]
 800b112:	893b      	ldrh	r3, [r7, #8]
 800b114:	4293      	cmp	r3, r2
 800b116:	bf28      	it	cs
 800b118:	4613      	movcs	r3, r2
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b11e:	893b      	ldrh	r3, [r7, #8]
 800b120:	461a      	mov	r2, r3
 800b122:	68f9      	ldr	r1, [r7, #12]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fa5d 	bl	800b5e4 <USBD_CtlSendData>
 800b12a:	e009      	b.n	800b140 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b12c:	6839      	ldr	r1, [r7, #0]
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f9e7 	bl	800b502 <USBD_CtlError>
 800b134:	e004      	b.n	800b140 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 faae 	bl	800b698 <USBD_CtlSendStatus>
 800b13c:	e000      	b.n	800b140 <USBD_GetDescriptor+0x2cc>
    return;
 800b13e:	bf00      	nop
  }
}
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop

0800b148 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	889b      	ldrh	r3, [r3, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d131      	bne.n	800b1be <USBD_SetAddress+0x76>
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	88db      	ldrh	r3, [r3, #6]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d12d      	bne.n	800b1be <USBD_SetAddress+0x76>
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	885b      	ldrh	r3, [r3, #2]
 800b166:	2b7f      	cmp	r3, #127	; 0x7f
 800b168:	d829      	bhi.n	800b1be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	885b      	ldrh	r3, [r3, #2]
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b174:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	2b03      	cmp	r3, #3
 800b180:	d104      	bne.n	800b18c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b182:	6839      	ldr	r1, [r7, #0]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 f9bc 	bl	800b502 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b18a:	e01d      	b.n	800b1c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	7bfa      	ldrb	r2, [r7, #15]
 800b190:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b194:	7bfb      	ldrb	r3, [r7, #15]
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fedf 	bl	800bf5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fa7a 	bl	800b698 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d004      	beq.n	800b1b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2202      	movs	r2, #2
 800b1ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1b2:	e009      	b.n	800b1c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1bc:	e004      	b.n	800b1c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b1be:	6839      	ldr	r1, [r7, #0]
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 f99e 	bl	800b502 <USBD_CtlError>
  }
}
 800b1c6:	bf00      	nop
 800b1c8:	bf00      	nop
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	885b      	ldrh	r3, [r3, #2]
 800b1e2:	b2da      	uxtb	r2, r3
 800b1e4:	4b4e      	ldr	r3, [pc, #312]	; (800b320 <USBD_SetConfig+0x150>)
 800b1e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b1e8:	4b4d      	ldr	r3, [pc, #308]	; (800b320 <USBD_SetConfig+0x150>)
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d905      	bls.n	800b1fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f985 	bl	800b502 <USBD_CtlError>
    return USBD_FAIL;
 800b1f8:	2303      	movs	r3, #3
 800b1fa:	e08c      	b.n	800b316 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b202:	b2db      	uxtb	r3, r3
 800b204:	2b02      	cmp	r3, #2
 800b206:	d002      	beq.n	800b20e <USBD_SetConfig+0x3e>
 800b208:	2b03      	cmp	r3, #3
 800b20a:	d029      	beq.n	800b260 <USBD_SetConfig+0x90>
 800b20c:	e075      	b.n	800b2fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b20e:	4b44      	ldr	r3, [pc, #272]	; (800b320 <USBD_SetConfig+0x150>)
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d020      	beq.n	800b258 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b216:	4b42      	ldr	r3, [pc, #264]	; (800b320 <USBD_SetConfig+0x150>)
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	461a      	mov	r2, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b220:	4b3f      	ldr	r3, [pc, #252]	; (800b320 <USBD_SetConfig+0x150>)
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	4619      	mov	r1, r3
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7fe ffe7 	bl	800a1fa <USBD_SetClassConfig>
 800b22c:	4603      	mov	r3, r0
 800b22e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b230:	7bfb      	ldrb	r3, [r7, #15]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d008      	beq.n	800b248 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b236:	6839      	ldr	r1, [r7, #0]
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 f962 	bl	800b502 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2202      	movs	r2, #2
 800b242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b246:	e065      	b.n	800b314 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 fa25 	bl	800b698 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2203      	movs	r2, #3
 800b252:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b256:	e05d      	b.n	800b314 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 fa1d 	bl	800b698 <USBD_CtlSendStatus>
      break;
 800b25e:	e059      	b.n	800b314 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b260:	4b2f      	ldr	r3, [pc, #188]	; (800b320 <USBD_SetConfig+0x150>)
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d112      	bne.n	800b28e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2202      	movs	r2, #2
 800b26c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b270:	4b2b      	ldr	r3, [pc, #172]	; (800b320 <USBD_SetConfig+0x150>)
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	461a      	mov	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b27a:	4b29      	ldr	r3, [pc, #164]	; (800b320 <USBD_SetConfig+0x150>)
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	4619      	mov	r1, r3
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f7fe ffd6 	bl	800a232 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fa06 	bl	800b698 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b28c:	e042      	b.n	800b314 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b28e:	4b24      	ldr	r3, [pc, #144]	; (800b320 <USBD_SetConfig+0x150>)
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	461a      	mov	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d02a      	beq.n	800b2f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f7fe ffc4 	bl	800a232 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b2aa:	4b1d      	ldr	r3, [pc, #116]	; (800b320 <USBD_SetConfig+0x150>)
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b2b4:	4b1a      	ldr	r3, [pc, #104]	; (800b320 <USBD_SetConfig+0x150>)
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f7fe ff9d 	bl	800a1fa <USBD_SetClassConfig>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b2c4:	7bfb      	ldrb	r3, [r7, #15]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00f      	beq.n	800b2ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b2ca:	6839      	ldr	r1, [r7, #0]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f918 	bl	800b502 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f7fe ffa9 	bl	800a232 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2202      	movs	r2, #2
 800b2e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b2e8:	e014      	b.n	800b314 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f9d4 	bl	800b698 <USBD_CtlSendStatus>
      break;
 800b2f0:	e010      	b.n	800b314 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f9d0 	bl	800b698 <USBD_CtlSendStatus>
      break;
 800b2f8:	e00c      	b.n	800b314 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 f900 	bl	800b502 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b302:	4b07      	ldr	r3, [pc, #28]	; (800b320 <USBD_SetConfig+0x150>)
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	4619      	mov	r1, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f7fe ff92 	bl	800a232 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b30e:	2303      	movs	r3, #3
 800b310:	73fb      	strb	r3, [r7, #15]
      break;
 800b312:	bf00      	nop
  }

  return ret;
 800b314:	7bfb      	ldrb	r3, [r7, #15]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	2000036c 	.word	0x2000036c

0800b324 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	88db      	ldrh	r3, [r3, #6]
 800b332:	2b01      	cmp	r3, #1
 800b334:	d004      	beq.n	800b340 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b336:	6839      	ldr	r1, [r7, #0]
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f8e2 	bl	800b502 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b33e:	e023      	b.n	800b388 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b346:	b2db      	uxtb	r3, r3
 800b348:	2b02      	cmp	r3, #2
 800b34a:	dc02      	bgt.n	800b352 <USBD_GetConfig+0x2e>
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	dc03      	bgt.n	800b358 <USBD_GetConfig+0x34>
 800b350:	e015      	b.n	800b37e <USBD_GetConfig+0x5a>
 800b352:	2b03      	cmp	r3, #3
 800b354:	d00b      	beq.n	800b36e <USBD_GetConfig+0x4a>
 800b356:	e012      	b.n	800b37e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	3308      	adds	r3, #8
 800b362:	2201      	movs	r2, #1
 800b364:	4619      	mov	r1, r3
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 f93c 	bl	800b5e4 <USBD_CtlSendData>
        break;
 800b36c:	e00c      	b.n	800b388 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	3304      	adds	r3, #4
 800b372:	2201      	movs	r2, #1
 800b374:	4619      	mov	r1, r3
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f934 	bl	800b5e4 <USBD_CtlSendData>
        break;
 800b37c:	e004      	b.n	800b388 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b37e:	6839      	ldr	r1, [r7, #0]
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f8be 	bl	800b502 <USBD_CtlError>
        break;
 800b386:	bf00      	nop
}
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	d81e      	bhi.n	800b3e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	88db      	ldrh	r3, [r3, #6]
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	d004      	beq.n	800b3ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b3b0:	6839      	ldr	r1, [r7, #0]
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 f8a5 	bl	800b502 <USBD_CtlError>
        break;
 800b3b8:	e01a      	b.n	800b3f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d005      	beq.n	800b3d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	68db      	ldr	r3, [r3, #12]
 800b3ce:	f043 0202 	orr.w	r2, r3, #2
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	330c      	adds	r3, #12
 800b3da:	2202      	movs	r2, #2
 800b3dc:	4619      	mov	r1, r3
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f900 	bl	800b5e4 <USBD_CtlSendData>
      break;
 800b3e4:	e004      	b.n	800b3f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b3e6:	6839      	ldr	r1, [r7, #0]
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 f88a 	bl	800b502 <USBD_CtlError>
      break;
 800b3ee:	bf00      	nop
  }
}
 800b3f0:	bf00      	nop
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	885b      	ldrh	r3, [r3, #2]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d107      	bne.n	800b41a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2201      	movs	r2, #1
 800b40e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 f940 	bl	800b698 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b418:	e013      	b.n	800b442 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	885b      	ldrh	r3, [r3, #2]
 800b41e:	2b02      	cmp	r3, #2
 800b420:	d10b      	bne.n	800b43a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	889b      	ldrh	r3, [r3, #4]
 800b426:	0a1b      	lsrs	r3, r3, #8
 800b428:	b29b      	uxth	r3, r3
 800b42a:	b2da      	uxtb	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 f930 	bl	800b698 <USBD_CtlSendStatus>
}
 800b438:	e003      	b.n	800b442 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b43a:	6839      	ldr	r1, [r7, #0]
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 f860 	bl	800b502 <USBD_CtlError>
}
 800b442:	bf00      	nop
 800b444:	3708      	adds	r7, #8
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b082      	sub	sp, #8
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
 800b452:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	3b01      	subs	r3, #1
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d80b      	bhi.n	800b47a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	885b      	ldrh	r3, [r3, #2]
 800b466:	2b01      	cmp	r3, #1
 800b468:	d10c      	bne.n	800b484 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 f910 	bl	800b698 <USBD_CtlSendStatus>
      }
      break;
 800b478:	e004      	b.n	800b484 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b47a:	6839      	ldr	r1, [r7, #0]
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 f840 	bl	800b502 <USBD_CtlError>
      break;
 800b482:	e000      	b.n	800b486 <USBD_ClrFeature+0x3c>
      break;
 800b484:	bf00      	nop
  }
}
 800b486:	bf00      	nop
 800b488:	3708      	adds	r7, #8
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b084      	sub	sp, #16
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	781a      	ldrb	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	781a      	ldrb	r2, [r3, #0]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f7ff fa41 	bl	800a940 <SWAPBYTE>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f7ff fa34 	bl	800a940 <SWAPBYTE>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	461a      	mov	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b4ec:	68f8      	ldr	r0, [r7, #12]
 800b4ee:	f7ff fa27 	bl	800a940 <SWAPBYTE>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	80da      	strh	r2, [r3, #6]
}
 800b4fa:	bf00      	nop
 800b4fc:	3710      	adds	r7, #16
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b082      	sub	sp, #8
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b50c:	2180      	movs	r1, #128	; 0x80
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fcba 	bl	800be88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b514:	2100      	movs	r1, #0
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 fcb6 	bl	800be88 <USBD_LL_StallEP>
}
 800b51c:	bf00      	nop
 800b51e:	3708      	adds	r7, #8
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b530:	2300      	movs	r3, #0
 800b532:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d036      	beq.n	800b5a8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b53e:	6938      	ldr	r0, [r7, #16]
 800b540:	f000 f836 	bl	800b5b0 <USBD_GetLen>
 800b544:	4603      	mov	r3, r0
 800b546:	3301      	adds	r3, #1
 800b548:	b29b      	uxth	r3, r3
 800b54a:	005b      	lsls	r3, r3, #1
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b552:	7dfb      	ldrb	r3, [r7, #23]
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	4413      	add	r3, r2
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	7812      	ldrb	r2, [r2, #0]
 800b55c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b55e:	7dfb      	ldrb	r3, [r7, #23]
 800b560:	3301      	adds	r3, #1
 800b562:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b564:	7dfb      	ldrb	r3, [r7, #23]
 800b566:	68ba      	ldr	r2, [r7, #8]
 800b568:	4413      	add	r3, r2
 800b56a:	2203      	movs	r2, #3
 800b56c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b56e:	7dfb      	ldrb	r3, [r7, #23]
 800b570:	3301      	adds	r3, #1
 800b572:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b574:	e013      	b.n	800b59e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b576:	7dfb      	ldrb	r3, [r7, #23]
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	4413      	add	r3, r2
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	7812      	ldrb	r2, [r2, #0]
 800b580:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	3301      	adds	r3, #1
 800b586:	613b      	str	r3, [r7, #16]
    idx++;
 800b588:	7dfb      	ldrb	r3, [r7, #23]
 800b58a:	3301      	adds	r3, #1
 800b58c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	4413      	add	r3, r2
 800b594:	2200      	movs	r2, #0
 800b596:	701a      	strb	r2, [r3, #0]
    idx++;
 800b598:	7dfb      	ldrb	r3, [r7, #23]
 800b59a:	3301      	adds	r3, #1
 800b59c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1e7      	bne.n	800b576 <USBD_GetString+0x52>
 800b5a6:	e000      	b.n	800b5aa <USBD_GetString+0x86>
    return;
 800b5a8:	bf00      	nop
  }
}
 800b5aa:	3718      	adds	r7, #24
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b5c0:	e005      	b.n	800b5ce <USBD_GetLen+0x1e>
  {
    len++;
 800b5c2:	7bfb      	ldrb	r3, [r7, #15]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1f5      	bne.n	800b5c2 <USBD_GetLen+0x12>
  }

  return len;
 800b5d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3714      	adds	r7, #20
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2202      	movs	r2, #2
 800b5f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	68ba      	ldr	r2, [r7, #8]
 800b608:	2100      	movs	r1, #0
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f000 fcc5 	bl	800bf9a <USBD_LL_Transmit>

  return USBD_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b084      	sub	sp, #16
 800b61e:	af00      	add	r7, sp, #0
 800b620:	60f8      	str	r0, [r7, #12]
 800b622:	60b9      	str	r1, [r7, #8]
 800b624:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	2100      	movs	r1, #0
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f000 fcb4 	bl	800bf9a <USBD_LL_Transmit>

  return USBD_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2203      	movs	r2, #3
 800b64c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	68ba      	ldr	r2, [r7, #8]
 800b664:	2100      	movs	r1, #0
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f000 fcb8 	bl	800bfdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b084      	sub	sp, #16
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	60f8      	str	r0, [r7, #12]
 800b67e:	60b9      	str	r1, [r7, #8]
 800b680:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	2100      	movs	r1, #0
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f000 fca7 	bl	800bfdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2204      	movs	r2, #4
 800b6a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 fc73 	bl	800bf9a <USBD_LL_Transmit>

  return USBD_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b082      	sub	sp, #8
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2205      	movs	r2, #5
 800b6ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 fc81 	bl	800bfdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	4912      	ldr	r1, [pc, #72]	; (800b734 <MX_USB_DEVICE_Init+0x50>)
 800b6ec:	4812      	ldr	r0, [pc, #72]	; (800b738 <MX_USB_DEVICE_Init+0x54>)
 800b6ee:	f7fe fd07 	bl	800a100 <USBD_Init>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d001      	beq.n	800b6fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b6f8:	f7f5 f8c4 	bl	8000884 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b6fc:	490f      	ldr	r1, [pc, #60]	; (800b73c <MX_USB_DEVICE_Init+0x58>)
 800b6fe:	480e      	ldr	r0, [pc, #56]	; (800b738 <MX_USB_DEVICE_Init+0x54>)
 800b700:	f7fe fd2e 	bl	800a160 <USBD_RegisterClass>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b70a:	f7f5 f8bb 	bl	8000884 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b70e:	490c      	ldr	r1, [pc, #48]	; (800b740 <MX_USB_DEVICE_Init+0x5c>)
 800b710:	4809      	ldr	r0, [pc, #36]	; (800b738 <MX_USB_DEVICE_Init+0x54>)
 800b712:	f7fe fc65 	bl	8009fe0 <USBD_CDC_RegisterInterface>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d001      	beq.n	800b720 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b71c:	f7f5 f8b2 	bl	8000884 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b720:	4805      	ldr	r0, [pc, #20]	; (800b738 <MX_USB_DEVICE_Init+0x54>)
 800b722:	f7fe fd53 	bl	800a1cc <USBD_Start>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d001      	beq.n	800b730 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b72c:	f7f5 f8aa 	bl	8000884 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b730:	bf00      	nop
 800b732:	bd80      	pop	{r7, pc}
 800b734:	200000ac 	.word	0x200000ac
 800b738:	20000370 	.word	0x20000370
 800b73c:	20000018 	.word	0x20000018
 800b740:	20000098 	.word	0x20000098

0800b744 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b748:	2200      	movs	r2, #0
 800b74a:	4905      	ldr	r1, [pc, #20]	; (800b760 <CDC_Init_FS+0x1c>)
 800b74c:	4805      	ldr	r0, [pc, #20]	; (800b764 <CDC_Init_FS+0x20>)
 800b74e:	f7fe fc61 	bl	800a014 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b752:	4905      	ldr	r1, [pc, #20]	; (800b768 <CDC_Init_FS+0x24>)
 800b754:	4803      	ldr	r0, [pc, #12]	; (800b764 <CDC_Init_FS+0x20>)
 800b756:	f7fe fc7f 	bl	800a058 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b75a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	20000a4c 	.word	0x20000a4c
 800b764:	20000370 	.word	0x20000370
 800b768:	2000064c 	.word	0x2000064c

0800b76c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b76c:	b480      	push	{r7}
 800b76e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b770:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b772:	4618      	mov	r0, r3
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	4603      	mov	r3, r0
 800b784:	6039      	str	r1, [r7, #0]
 800b786:	71fb      	strb	r3, [r7, #7]
 800b788:	4613      	mov	r3, r2
 800b78a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b78c:	79fb      	ldrb	r3, [r7, #7]
 800b78e:	2b23      	cmp	r3, #35	; 0x23
 800b790:	d84a      	bhi.n	800b828 <CDC_Control_FS+0xac>
 800b792:	a201      	add	r2, pc, #4	; (adr r2, 800b798 <CDC_Control_FS+0x1c>)
 800b794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b798:	0800b829 	.word	0x0800b829
 800b79c:	0800b829 	.word	0x0800b829
 800b7a0:	0800b829 	.word	0x0800b829
 800b7a4:	0800b829 	.word	0x0800b829
 800b7a8:	0800b829 	.word	0x0800b829
 800b7ac:	0800b829 	.word	0x0800b829
 800b7b0:	0800b829 	.word	0x0800b829
 800b7b4:	0800b829 	.word	0x0800b829
 800b7b8:	0800b829 	.word	0x0800b829
 800b7bc:	0800b829 	.word	0x0800b829
 800b7c0:	0800b829 	.word	0x0800b829
 800b7c4:	0800b829 	.word	0x0800b829
 800b7c8:	0800b829 	.word	0x0800b829
 800b7cc:	0800b829 	.word	0x0800b829
 800b7d0:	0800b829 	.word	0x0800b829
 800b7d4:	0800b829 	.word	0x0800b829
 800b7d8:	0800b829 	.word	0x0800b829
 800b7dc:	0800b829 	.word	0x0800b829
 800b7e0:	0800b829 	.word	0x0800b829
 800b7e4:	0800b829 	.word	0x0800b829
 800b7e8:	0800b829 	.word	0x0800b829
 800b7ec:	0800b829 	.word	0x0800b829
 800b7f0:	0800b829 	.word	0x0800b829
 800b7f4:	0800b829 	.word	0x0800b829
 800b7f8:	0800b829 	.word	0x0800b829
 800b7fc:	0800b829 	.word	0x0800b829
 800b800:	0800b829 	.word	0x0800b829
 800b804:	0800b829 	.word	0x0800b829
 800b808:	0800b829 	.word	0x0800b829
 800b80c:	0800b829 	.word	0x0800b829
 800b810:	0800b829 	.word	0x0800b829
 800b814:	0800b829 	.word	0x0800b829
 800b818:	0800b829 	.word	0x0800b829
 800b81c:	0800b829 	.word	0x0800b829
 800b820:	0800b829 	.word	0x0800b829
 800b824:	0800b829 	.word	0x0800b829
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b828:	bf00      	nop
  }

  return (USBD_OK);
 800b82a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b842:	6879      	ldr	r1, [r7, #4]
 800b844:	4805      	ldr	r0, [pc, #20]	; (800b85c <CDC_Receive_FS+0x24>)
 800b846:	f7fe fc07 	bl	800a058 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b84a:	4804      	ldr	r0, [pc, #16]	; (800b85c <CDC_Receive_FS+0x24>)
 800b84c:	f7fe fc22 	bl	800a094 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b850:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b852:	4618      	mov	r0, r3
 800b854:	3708      	adds	r7, #8
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	20000370 	.word	0x20000370

0800b860 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b860:	b480      	push	{r7}
 800b862:	b087      	sub	sp, #28
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	4613      	mov	r3, r2
 800b86c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b86e:	2300      	movs	r3, #0
 800b870:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b872:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b876:	4618      	mov	r0, r3
 800b878:	371c      	adds	r7, #28
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
	...

0800b884 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	4603      	mov	r3, r0
 800b88c:	6039      	str	r1, [r7, #0]
 800b88e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	2212      	movs	r2, #18
 800b894:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b896:	4b03      	ldr	r3, [pc, #12]	; (800b8a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b898:	4618      	mov	r0, r3
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr
 800b8a4:	200000c8 	.word	0x200000c8

0800b8a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	6039      	str	r1, [r7, #0]
 800b8b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	2204      	movs	r2, #4
 800b8b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b8ba:	4b03      	ldr	r3, [pc, #12]	; (800b8c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr
 800b8c8:	200000dc 	.word	0x200000dc

0800b8cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	6039      	str	r1, [r7, #0]
 800b8d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8d8:	79fb      	ldrb	r3, [r7, #7]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d105      	bne.n	800b8ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8de:	683a      	ldr	r2, [r7, #0]
 800b8e0:	4907      	ldr	r1, [pc, #28]	; (800b900 <USBD_FS_ProductStrDescriptor+0x34>)
 800b8e2:	4808      	ldr	r0, [pc, #32]	; (800b904 <USBD_FS_ProductStrDescriptor+0x38>)
 800b8e4:	f7ff fe1e 	bl	800b524 <USBD_GetString>
 800b8e8:	e004      	b.n	800b8f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8ea:	683a      	ldr	r2, [r7, #0]
 800b8ec:	4904      	ldr	r1, [pc, #16]	; (800b900 <USBD_FS_ProductStrDescriptor+0x34>)
 800b8ee:	4805      	ldr	r0, [pc, #20]	; (800b904 <USBD_FS_ProductStrDescriptor+0x38>)
 800b8f0:	f7ff fe18 	bl	800b524 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8f4:	4b02      	ldr	r3, [pc, #8]	; (800b900 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	20000e4c 	.word	0x20000e4c
 800b904:	0800c13c 	.word	0x0800c13c

0800b908 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	4603      	mov	r3, r0
 800b910:	6039      	str	r1, [r7, #0]
 800b912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b914:	683a      	ldr	r2, [r7, #0]
 800b916:	4904      	ldr	r1, [pc, #16]	; (800b928 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b918:	4804      	ldr	r0, [pc, #16]	; (800b92c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b91a:	f7ff fe03 	bl	800b524 <USBD_GetString>
  return USBD_StrDesc;
 800b91e:	4b02      	ldr	r3, [pc, #8]	; (800b928 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b920:	4618      	mov	r0, r3
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	20000e4c 	.word	0x20000e4c
 800b92c:	0800c154 	.word	0x0800c154

0800b930 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	4603      	mov	r3, r0
 800b938:	6039      	str	r1, [r7, #0]
 800b93a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	221a      	movs	r2, #26
 800b940:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b942:	f000 f843 	bl	800b9cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b946:	4b02      	ldr	r3, [pc, #8]	; (800b950 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	200000e0 	.word	0x200000e0

0800b954 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	4603      	mov	r3, r0
 800b95c:	6039      	str	r1, [r7, #0]
 800b95e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b960:	79fb      	ldrb	r3, [r7, #7]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d105      	bne.n	800b972 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b966:	683a      	ldr	r2, [r7, #0]
 800b968:	4907      	ldr	r1, [pc, #28]	; (800b988 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b96a:	4808      	ldr	r0, [pc, #32]	; (800b98c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b96c:	f7ff fdda 	bl	800b524 <USBD_GetString>
 800b970:	e004      	b.n	800b97c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b972:	683a      	ldr	r2, [r7, #0]
 800b974:	4904      	ldr	r1, [pc, #16]	; (800b988 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b976:	4805      	ldr	r0, [pc, #20]	; (800b98c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b978:	f7ff fdd4 	bl	800b524 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b97c:	4b02      	ldr	r3, [pc, #8]	; (800b988 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3708      	adds	r7, #8
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	20000e4c 	.word	0x20000e4c
 800b98c:	0800c168 	.word	0x0800c168

0800b990 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	4603      	mov	r3, r0
 800b998:	6039      	str	r1, [r7, #0]
 800b99a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b99c:	79fb      	ldrb	r3, [r7, #7]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d105      	bne.n	800b9ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	4907      	ldr	r1, [pc, #28]	; (800b9c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9a6:	4808      	ldr	r0, [pc, #32]	; (800b9c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9a8:	f7ff fdbc 	bl	800b524 <USBD_GetString>
 800b9ac:	e004      	b.n	800b9b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9ae:	683a      	ldr	r2, [r7, #0]
 800b9b0:	4904      	ldr	r1, [pc, #16]	; (800b9c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9b2:	4805      	ldr	r0, [pc, #20]	; (800b9c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9b4:	f7ff fdb6 	bl	800b524 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9b8:	4b02      	ldr	r3, [pc, #8]	; (800b9c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3708      	adds	r7, #8
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	20000e4c 	.word	0x20000e4c
 800b9c8:	0800c174 	.word	0x0800c174

0800b9cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b9d2:	4b0f      	ldr	r3, [pc, #60]	; (800ba10 <Get_SerialNum+0x44>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b9d8:	4b0e      	ldr	r3, [pc, #56]	; (800ba14 <Get_SerialNum+0x48>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b9de:	4b0e      	ldr	r3, [pc, #56]	; (800ba18 <Get_SerialNum+0x4c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d009      	beq.n	800ba06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b9f2:	2208      	movs	r2, #8
 800b9f4:	4909      	ldr	r1, [pc, #36]	; (800ba1c <Get_SerialNum+0x50>)
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	f000 f814 	bl	800ba24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b9fc:	2204      	movs	r2, #4
 800b9fe:	4908      	ldr	r1, [pc, #32]	; (800ba20 <Get_SerialNum+0x54>)
 800ba00:	68b8      	ldr	r0, [r7, #8]
 800ba02:	f000 f80f 	bl	800ba24 <IntToUnicode>
  }
}
 800ba06:	bf00      	nop
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	1fff7a10 	.word	0x1fff7a10
 800ba14:	1fff7a14 	.word	0x1fff7a14
 800ba18:	1fff7a18 	.word	0x1fff7a18
 800ba1c:	200000e2 	.word	0x200000e2
 800ba20:	200000f2 	.word	0x200000f2

0800ba24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b087      	sub	sp, #28
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	4613      	mov	r3, r2
 800ba30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ba36:	2300      	movs	r3, #0
 800ba38:	75fb      	strb	r3, [r7, #23]
 800ba3a:	e027      	b.n	800ba8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	0f1b      	lsrs	r3, r3, #28
 800ba40:	2b09      	cmp	r3, #9
 800ba42:	d80b      	bhi.n	800ba5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	0f1b      	lsrs	r3, r3, #28
 800ba48:	b2da      	uxtb	r2, r3
 800ba4a:	7dfb      	ldrb	r3, [r7, #23]
 800ba4c:	005b      	lsls	r3, r3, #1
 800ba4e:	4619      	mov	r1, r3
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	440b      	add	r3, r1
 800ba54:	3230      	adds	r2, #48	; 0x30
 800ba56:	b2d2      	uxtb	r2, r2
 800ba58:	701a      	strb	r2, [r3, #0]
 800ba5a:	e00a      	b.n	800ba72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	0f1b      	lsrs	r3, r3, #28
 800ba60:	b2da      	uxtb	r2, r3
 800ba62:	7dfb      	ldrb	r3, [r7, #23]
 800ba64:	005b      	lsls	r3, r3, #1
 800ba66:	4619      	mov	r1, r3
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	440b      	add	r3, r1
 800ba6c:	3237      	adds	r2, #55	; 0x37
 800ba6e:	b2d2      	uxtb	r2, r2
 800ba70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	011b      	lsls	r3, r3, #4
 800ba76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ba78:	7dfb      	ldrb	r3, [r7, #23]
 800ba7a:	005b      	lsls	r3, r3, #1
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	4413      	add	r3, r2
 800ba82:	2200      	movs	r2, #0
 800ba84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ba86:	7dfb      	ldrb	r3, [r7, #23]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	75fb      	strb	r3, [r7, #23]
 800ba8c:	7dfa      	ldrb	r2, [r7, #23]
 800ba8e:	79fb      	ldrb	r3, [r7, #7]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d3d3      	bcc.n	800ba3c <IntToUnicode+0x18>
  }
}
 800ba94:	bf00      	nop
 800ba96:	bf00      	nop
 800ba98:	371c      	adds	r7, #28
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr
	...

0800baa4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b08a      	sub	sp, #40	; 0x28
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800baac:	f107 0314 	add.w	r3, r7, #20
 800bab0:	2200      	movs	r2, #0
 800bab2:	601a      	str	r2, [r3, #0]
 800bab4:	605a      	str	r2, [r3, #4]
 800bab6:	609a      	str	r2, [r3, #8]
 800bab8:	60da      	str	r2, [r3, #12]
 800baba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bac4:	d13a      	bne.n	800bb3c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bac6:	2300      	movs	r3, #0
 800bac8:	613b      	str	r3, [r7, #16]
 800baca:	4b1e      	ldr	r3, [pc, #120]	; (800bb44 <HAL_PCD_MspInit+0xa0>)
 800bacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bace:	4a1d      	ldr	r2, [pc, #116]	; (800bb44 <HAL_PCD_MspInit+0xa0>)
 800bad0:	f043 0301 	orr.w	r3, r3, #1
 800bad4:	6313      	str	r3, [r2, #48]	; 0x30
 800bad6:	4b1b      	ldr	r3, [pc, #108]	; (800bb44 <HAL_PCD_MspInit+0xa0>)
 800bad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bada:	f003 0301 	and.w	r3, r3, #1
 800bade:	613b      	str	r3, [r7, #16]
 800bae0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bae2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bae8:	2302      	movs	r3, #2
 800baea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800baec:	2300      	movs	r3, #0
 800baee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800baf0:	2303      	movs	r3, #3
 800baf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800baf4:	230a      	movs	r3, #10
 800baf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800baf8:	f107 0314 	add.w	r3, r7, #20
 800bafc:	4619      	mov	r1, r3
 800bafe:	4812      	ldr	r0, [pc, #72]	; (800bb48 <HAL_PCD_MspInit+0xa4>)
 800bb00:	f7f5 ffb0 	bl	8001a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bb04:	4b0f      	ldr	r3, [pc, #60]	; (800bb44 <HAL_PCD_MspInit+0xa0>)
 800bb06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb08:	4a0e      	ldr	r2, [pc, #56]	; (800bb44 <HAL_PCD_MspInit+0xa0>)
 800bb0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb0e:	6353      	str	r3, [r2, #52]	; 0x34
 800bb10:	2300      	movs	r3, #0
 800bb12:	60fb      	str	r3, [r7, #12]
 800bb14:	4b0b      	ldr	r3, [pc, #44]	; (800bb44 <HAL_PCD_MspInit+0xa0>)
 800bb16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb18:	4a0a      	ldr	r2, [pc, #40]	; (800bb44 <HAL_PCD_MspInit+0xa0>)
 800bb1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb1e:	6453      	str	r3, [r2, #68]	; 0x44
 800bb20:	4b08      	ldr	r3, [pc, #32]	; (800bb44 <HAL_PCD_MspInit+0xa0>)
 800bb22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb28:	60fb      	str	r3, [r7, #12]
 800bb2a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2100      	movs	r1, #0
 800bb30:	2043      	movs	r0, #67	; 0x43
 800bb32:	f7f5 fbd6 	bl	80012e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bb36:	2043      	movs	r0, #67	; 0x43
 800bb38:	f7f5 fbef 	bl	800131a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bb3c:	bf00      	nop
 800bb3e:	3728      	adds	r7, #40	; 0x28
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	40023800 	.word	0x40023800
 800bb48:	40020000 	.word	0x40020000

0800bb4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bb60:	4619      	mov	r1, r3
 800bb62:	4610      	mov	r0, r2
 800bb64:	f7fe fb7f 	bl	800a266 <USBD_LL_SetupStage>
}
 800bb68:	bf00      	nop
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	460b      	mov	r3, r1
 800bb7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bb82:	78fa      	ldrb	r2, [r7, #3]
 800bb84:	6879      	ldr	r1, [r7, #4]
 800bb86:	4613      	mov	r3, r2
 800bb88:	00db      	lsls	r3, r3, #3
 800bb8a:	4413      	add	r3, r2
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	440b      	add	r3, r1
 800bb90:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	78fb      	ldrb	r3, [r7, #3]
 800bb98:	4619      	mov	r1, r3
 800bb9a:	f7fe fbb9 	bl	800a310 <USBD_LL_DataOutStage>
}
 800bb9e:	bf00      	nop
 800bba0:	3708      	adds	r7, #8
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b082      	sub	sp, #8
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
 800bbae:	460b      	mov	r3, r1
 800bbb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bbb8:	78fa      	ldrb	r2, [r7, #3]
 800bbba:	6879      	ldr	r1, [r7, #4]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	00db      	lsls	r3, r3, #3
 800bbc0:	4413      	add	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	440b      	add	r3, r1
 800bbc6:	334c      	adds	r3, #76	; 0x4c
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	78fb      	ldrb	r3, [r7, #3]
 800bbcc:	4619      	mov	r1, r3
 800bbce:	f7fe fc52 	bl	800a476 <USBD_LL_DataInStage>
}
 800bbd2:	bf00      	nop
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b082      	sub	sp, #8
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7fe fd86 	bl	800a6fa <USBD_LL_SOF>
}
 800bbee:	bf00      	nop
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b084      	sub	sp, #16
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d102      	bne.n	800bc10 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	73fb      	strb	r3, [r7, #15]
 800bc0e:	e008      	b.n	800bc22 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	d102      	bne.n	800bc1e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	73fb      	strb	r3, [r7, #15]
 800bc1c:	e001      	b.n	800bc22 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bc1e:	f7f4 fe31 	bl	8000884 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc28:	7bfa      	ldrb	r2, [r7, #15]
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7fe fd26 	bl	800a67e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7fe fcce 	bl	800a5da <USBD_LL_Reset>
}
 800bc3e:	bf00      	nop
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
	...

0800bc48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7fe fd21 	bl	800a69e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	6812      	ldr	r2, [r2, #0]
 800bc6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bc6e:	f043 0301 	orr.w	r3, r3, #1
 800bc72:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a1b      	ldr	r3, [r3, #32]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d005      	beq.n	800bc88 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc7c:	4b04      	ldr	r3, [pc, #16]	; (800bc90 <HAL_PCD_SuspendCallback+0x48>)
 800bc7e:	691b      	ldr	r3, [r3, #16]
 800bc80:	4a03      	ldr	r2, [pc, #12]	; (800bc90 <HAL_PCD_SuspendCallback+0x48>)
 800bc82:	f043 0306 	orr.w	r3, r3, #6
 800bc86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc88:	bf00      	nop
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	e000ed00 	.word	0xe000ed00

0800bc94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7fe fd11 	bl	800a6ca <USBD_LL_Resume>
}
 800bca8:	bf00      	nop
 800bcaa:	3708      	adds	r7, #8
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	460b      	mov	r3, r1
 800bcba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bcc2:	78fa      	ldrb	r2, [r7, #3]
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fe fd69 	bl	800a79e <USBD_LL_IsoOUTIncomplete>
}
 800bccc:	bf00      	nop
 800bcce:	3708      	adds	r7, #8
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bce6:	78fa      	ldrb	r2, [r7, #3]
 800bce8:	4611      	mov	r1, r2
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fe fd25 	bl	800a73a <USBD_LL_IsoINIncomplete>
}
 800bcf0:	bf00      	nop
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fe fd7b 	bl	800a802 <USBD_LL_DevConnected>
}
 800bd0c:	bf00      	nop
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7fe fd78 	bl	800a818 <USBD_LL_DevDisconnected>
}
 800bd28:	bf00      	nop
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d13c      	bne.n	800bdba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bd40:	4a20      	ldr	r2, [pc, #128]	; (800bdc4 <USBD_LL_Init+0x94>)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	4a1e      	ldr	r2, [pc, #120]	; (800bdc4 <USBD_LL_Init+0x94>)
 800bd4c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bd50:	4b1c      	ldr	r3, [pc, #112]	; (800bdc4 <USBD_LL_Init+0x94>)
 800bd52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bd56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bd58:	4b1a      	ldr	r3, [pc, #104]	; (800bdc4 <USBD_LL_Init+0x94>)
 800bd5a:	2204      	movs	r2, #4
 800bd5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bd5e:	4b19      	ldr	r3, [pc, #100]	; (800bdc4 <USBD_LL_Init+0x94>)
 800bd60:	2202      	movs	r2, #2
 800bd62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bd64:	4b17      	ldr	r3, [pc, #92]	; (800bdc4 <USBD_LL_Init+0x94>)
 800bd66:	2200      	movs	r2, #0
 800bd68:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bd6a:	4b16      	ldr	r3, [pc, #88]	; (800bdc4 <USBD_LL_Init+0x94>)
 800bd6c:	2202      	movs	r2, #2
 800bd6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800bd70:	4b14      	ldr	r3, [pc, #80]	; (800bdc4 <USBD_LL_Init+0x94>)
 800bd72:	2201      	movs	r2, #1
 800bd74:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bd76:	4b13      	ldr	r3, [pc, #76]	; (800bdc4 <USBD_LL_Init+0x94>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bd7c:	4b11      	ldr	r3, [pc, #68]	; (800bdc4 <USBD_LL_Init+0x94>)
 800bd7e:	2200      	movs	r2, #0
 800bd80:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bd82:	4b10      	ldr	r3, [pc, #64]	; (800bdc4 <USBD_LL_Init+0x94>)
 800bd84:	2200      	movs	r2, #0
 800bd86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bd88:	4b0e      	ldr	r3, [pc, #56]	; (800bdc4 <USBD_LL_Init+0x94>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bd8e:	480d      	ldr	r0, [pc, #52]	; (800bdc4 <USBD_LL_Init+0x94>)
 800bd90:	f7f7 fe61 	bl	8003a56 <HAL_PCD_Init>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d001      	beq.n	800bd9e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bd9a:	f7f4 fd73 	bl	8000884 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bd9e:	2180      	movs	r1, #128	; 0x80
 800bda0:	4808      	ldr	r0, [pc, #32]	; (800bdc4 <USBD_LL_Init+0x94>)
 800bda2:	f7f9 f8b8 	bl	8004f16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bda6:	2240      	movs	r2, #64	; 0x40
 800bda8:	2100      	movs	r1, #0
 800bdaa:	4806      	ldr	r0, [pc, #24]	; (800bdc4 <USBD_LL_Init+0x94>)
 800bdac:	f7f9 f86c 	bl	8004e88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bdb0:	2280      	movs	r2, #128	; 0x80
 800bdb2:	2101      	movs	r1, #1
 800bdb4:	4803      	ldr	r0, [pc, #12]	; (800bdc4 <USBD_LL_Init+0x94>)
 800bdb6:	f7f9 f867 	bl	8004e88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	2000104c 	.word	0x2000104c

0800bdc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7f7 ff56 	bl	8003c90 <HAL_PCD_Start>
 800bde4:	4603      	mov	r3, r0
 800bde6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bde8:	7bfb      	ldrb	r3, [r7, #15]
 800bdea:	4618      	mov	r0, r3
 800bdec:	f000 f942 	bl	800c074 <USBD_Get_USB_Status>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}

0800bdfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bdfe:	b580      	push	{r7, lr}
 800be00:	b084      	sub	sp, #16
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
 800be06:	4608      	mov	r0, r1
 800be08:	4611      	mov	r1, r2
 800be0a:	461a      	mov	r2, r3
 800be0c:	4603      	mov	r3, r0
 800be0e:	70fb      	strb	r3, [r7, #3]
 800be10:	460b      	mov	r3, r1
 800be12:	70bb      	strb	r3, [r7, #2]
 800be14:	4613      	mov	r3, r2
 800be16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800be26:	78bb      	ldrb	r3, [r7, #2]
 800be28:	883a      	ldrh	r2, [r7, #0]
 800be2a:	78f9      	ldrb	r1, [r7, #3]
 800be2c:	f7f8 fc27 	bl	800467e <HAL_PCD_EP_Open>
 800be30:	4603      	mov	r3, r0
 800be32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be34:	7bfb      	ldrb	r3, [r7, #15]
 800be36:	4618      	mov	r0, r3
 800be38:	f000 f91c 	bl	800c074 <USBD_Get_USB_Status>
 800be3c:	4603      	mov	r3, r0
 800be3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be40:	7bbb      	ldrb	r3, [r7, #14]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b084      	sub	sp, #16
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
 800be52:	460b      	mov	r3, r1
 800be54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be64:	78fa      	ldrb	r2, [r7, #3]
 800be66:	4611      	mov	r1, r2
 800be68:	4618      	mov	r0, r3
 800be6a:	f7f8 fc70 	bl	800474e <HAL_PCD_EP_Close>
 800be6e:	4603      	mov	r3, r0
 800be70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be72:	7bfb      	ldrb	r3, [r7, #15]
 800be74:	4618      	mov	r0, r3
 800be76:	f000 f8fd 	bl	800c074 <USBD_Get_USB_Status>
 800be7a:	4603      	mov	r3, r0
 800be7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	460b      	mov	r3, r1
 800be92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be94:	2300      	movs	r3, #0
 800be96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be98:	2300      	movs	r3, #0
 800be9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bea2:	78fa      	ldrb	r2, [r7, #3]
 800bea4:	4611      	mov	r1, r2
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7f8 fd48 	bl	800493c <HAL_PCD_EP_SetStall>
 800beac:	4603      	mov	r3, r0
 800beae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beb0:	7bfb      	ldrb	r3, [r7, #15]
 800beb2:	4618      	mov	r0, r3
 800beb4:	f000 f8de 	bl	800c074 <USBD_Get_USB_Status>
 800beb8:	4603      	mov	r3, r0
 800beba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bebc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3710      	adds	r7, #16
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b084      	sub	sp, #16
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
 800bece:	460b      	mov	r3, r1
 800bed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bed6:	2300      	movs	r3, #0
 800bed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bee0:	78fa      	ldrb	r2, [r7, #3]
 800bee2:	4611      	mov	r1, r2
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7f8 fd8d 	bl	8004a04 <HAL_PCD_EP_ClrStall>
 800beea:	4603      	mov	r3, r0
 800beec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beee:	7bfb      	ldrb	r3, [r7, #15]
 800bef0:	4618      	mov	r0, r3
 800bef2:	f000 f8bf 	bl	800c074 <USBD_Get_USB_Status>
 800bef6:	4603      	mov	r3, r0
 800bef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800befa:	7bbb      	ldrb	r3, [r7, #14]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bf18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	da0b      	bge.n	800bf38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bf20:	78fb      	ldrb	r3, [r7, #3]
 800bf22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf26:	68f9      	ldr	r1, [r7, #12]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	00db      	lsls	r3, r3, #3
 800bf2c:	4413      	add	r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	440b      	add	r3, r1
 800bf32:	333e      	adds	r3, #62	; 0x3e
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	e00b      	b.n	800bf50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bf38:	78fb      	ldrb	r3, [r7, #3]
 800bf3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf3e:	68f9      	ldr	r1, [r7, #12]
 800bf40:	4613      	mov	r3, r2
 800bf42:	00db      	lsls	r3, r3, #3
 800bf44:	4413      	add	r3, r2
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	440b      	add	r3, r1
 800bf4a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bf4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	460b      	mov	r3, r1
 800bf66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf76:	78fa      	ldrb	r2, [r7, #3]
 800bf78:	4611      	mov	r1, r2
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7f8 fb5a 	bl	8004634 <HAL_PCD_SetAddress>
 800bf80:	4603      	mov	r3, r0
 800bf82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf84:	7bfb      	ldrb	r3, [r7, #15]
 800bf86:	4618      	mov	r0, r3
 800bf88:	f000 f874 	bl	800c074 <USBD_Get_USB_Status>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf90:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b086      	sub	sp, #24
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	60f8      	str	r0, [r7, #12]
 800bfa2:	607a      	str	r2, [r7, #4]
 800bfa4:	603b      	str	r3, [r7, #0]
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bfb8:	7af9      	ldrb	r1, [r7, #11]
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	f7f8 fc73 	bl	80048a8 <HAL_PCD_EP_Transmit>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfc6:	7dfb      	ldrb	r3, [r7, #23]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f000 f853 	bl	800c074 <USBD_Get_USB_Status>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bfd2:	7dbb      	ldrb	r3, [r7, #22]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3718      	adds	r7, #24
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b086      	sub	sp, #24
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	607a      	str	r2, [r7, #4]
 800bfe6:	603b      	str	r3, [r7, #0]
 800bfe8:	460b      	mov	r3, r1
 800bfea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfec:	2300      	movs	r3, #0
 800bfee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bff0:	2300      	movs	r3, #0
 800bff2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bffa:	7af9      	ldrb	r1, [r7, #11]
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	f7f8 fbef 	bl	80047e2 <HAL_PCD_EP_Receive>
 800c004:	4603      	mov	r3, r0
 800c006:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c008:	7dfb      	ldrb	r3, [r7, #23]
 800c00a:	4618      	mov	r0, r3
 800c00c:	f000 f832 	bl	800c074 <USBD_Get_USB_Status>
 800c010:	4603      	mov	r3, r0
 800c012:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c014:	7dbb      	ldrb	r3, [r7, #22]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3718      	adds	r7, #24
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b082      	sub	sp, #8
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
 800c026:	460b      	mov	r3, r1
 800c028:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c030:	78fa      	ldrb	r2, [r7, #3]
 800c032:	4611      	mov	r1, r2
 800c034:	4618      	mov	r0, r3
 800c036:	f7f8 fc1f 	bl	8004878 <HAL_PCD_EP_GetRxCount>
 800c03a:	4603      	mov	r3, r0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3708      	adds	r7, #8
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c04c:	4b03      	ldr	r3, [pc, #12]	; (800c05c <USBD_static_malloc+0x18>)
}
 800c04e:	4618      	mov	r0, r3
 800c050:	370c      	adds	r7, #12
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr
 800c05a:	bf00      	nop
 800c05c:	20001558 	.word	0x20001558

0800c060 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]

}
 800c068:	bf00      	nop
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	4603      	mov	r3, r0
 800c07c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c07e:	2300      	movs	r3, #0
 800c080:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c082:	79fb      	ldrb	r3, [r7, #7]
 800c084:	2b03      	cmp	r3, #3
 800c086:	d817      	bhi.n	800c0b8 <USBD_Get_USB_Status+0x44>
 800c088:	a201      	add	r2, pc, #4	; (adr r2, 800c090 <USBD_Get_USB_Status+0x1c>)
 800c08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c08e:	bf00      	nop
 800c090:	0800c0a1 	.word	0x0800c0a1
 800c094:	0800c0a7 	.word	0x0800c0a7
 800c098:	0800c0ad 	.word	0x0800c0ad
 800c09c:	0800c0b3 	.word	0x0800c0b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c0a4:	e00b      	b.n	800c0be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c0a6:	2303      	movs	r3, #3
 800c0a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c0aa:	e008      	b.n	800c0be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c0b0:	e005      	b.n	800c0be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c0b2:	2303      	movs	r3, #3
 800c0b4:	73fb      	strb	r3, [r7, #15]
    break;
 800c0b6:	e002      	b.n	800c0be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c0b8:	2303      	movs	r3, #3
 800c0ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c0bc:	bf00      	nop
  }
  return usb_status;
 800c0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3714      	adds	r7, #20
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <__libc_init_array>:
 800c0cc:	b570      	push	{r4, r5, r6, lr}
 800c0ce:	4d0d      	ldr	r5, [pc, #52]	; (800c104 <__libc_init_array+0x38>)
 800c0d0:	4c0d      	ldr	r4, [pc, #52]	; (800c108 <__libc_init_array+0x3c>)
 800c0d2:	1b64      	subs	r4, r4, r5
 800c0d4:	10a4      	asrs	r4, r4, #2
 800c0d6:	2600      	movs	r6, #0
 800c0d8:	42a6      	cmp	r6, r4
 800c0da:	d109      	bne.n	800c0f0 <__libc_init_array+0x24>
 800c0dc:	4d0b      	ldr	r5, [pc, #44]	; (800c10c <__libc_init_array+0x40>)
 800c0de:	4c0c      	ldr	r4, [pc, #48]	; (800c110 <__libc_init_array+0x44>)
 800c0e0:	f000 f820 	bl	800c124 <_init>
 800c0e4:	1b64      	subs	r4, r4, r5
 800c0e6:	10a4      	asrs	r4, r4, #2
 800c0e8:	2600      	movs	r6, #0
 800c0ea:	42a6      	cmp	r6, r4
 800c0ec:	d105      	bne.n	800c0fa <__libc_init_array+0x2e>
 800c0ee:	bd70      	pop	{r4, r5, r6, pc}
 800c0f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0f4:	4798      	blx	r3
 800c0f6:	3601      	adds	r6, #1
 800c0f8:	e7ee      	b.n	800c0d8 <__libc_init_array+0xc>
 800c0fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0fe:	4798      	blx	r3
 800c100:	3601      	adds	r6, #1
 800c102:	e7f2      	b.n	800c0ea <__libc_init_array+0x1e>
 800c104:	0800c1ac 	.word	0x0800c1ac
 800c108:	0800c1ac 	.word	0x0800c1ac
 800c10c:	0800c1ac 	.word	0x0800c1ac
 800c110:	0800c1b0 	.word	0x0800c1b0

0800c114 <memset>:
 800c114:	4402      	add	r2, r0
 800c116:	4603      	mov	r3, r0
 800c118:	4293      	cmp	r3, r2
 800c11a:	d100      	bne.n	800c11e <memset+0xa>
 800c11c:	4770      	bx	lr
 800c11e:	f803 1b01 	strb.w	r1, [r3], #1
 800c122:	e7f9      	b.n	800c118 <memset+0x4>

0800c124 <_init>:
 800c124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c126:	bf00      	nop
 800c128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c12a:	bc08      	pop	{r3}
 800c12c:	469e      	mov	lr, r3
 800c12e:	4770      	bx	lr

0800c130 <_fini>:
 800c130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c132:	bf00      	nop
 800c134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c136:	bc08      	pop	{r3}
 800c138:	469e      	mov	lr, r3
 800c13a:	4770      	bx	lr
